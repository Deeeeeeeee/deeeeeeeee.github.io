<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>算法系列-0-使用javac-algs4和java-algs4</title>
    <url>/post/algorithm-0-algs4/</url>
    <content><![CDATA[<p>在教程中会使用 javac-algs4 和 java-algs4 命令进行编译和执行 java 文件，classpath 默认有 algs4.jar。所以需要自定义 javac 和 java</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ul>
<li><p>windows</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">E:<span class="symbol">\d</span>e_learn<span class="symbol">\a</span>lgorithms<span class="symbol">\h</span>omework<span class="symbol">\d</span>equeue_ramdom&gt;javac-algs4 Permutation.java</span><br><span class="line"></span><br><span class="line">E:<span class="symbol">\d</span>e_learn<span class="symbol">\a</span>lgorithms<span class="symbol">\h</span>omework<span class="symbol">\d</span>equeue_ramdom&gt;java-algs4 Permutation 3 &lt; queues<span class="symbol">\d</span>istinct.txt</span><br><span class="line">RandomizedQueue&#123;C, B, A&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>linux</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ javac-algs4 PercolationStats.java </span><br><span class="line">$ java-algs4 PercolationStats <span class="number">200</span> <span class="number">100</span></span><br><span class="line">mean                    = <span class="number">0.5937762499999999</span></span><br><span class="line">stddev                  = <span class="number">0.0098221928257679</span></span><br><span class="line"><span class="number">95</span>% confidence <span class="built_in">int</span>erval = [<span class="number">0.5918511002061494</span>, <span class="number">0.5957013997938504</span>]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<div class="note warning"><p>思路很简单，首先尝试使用 javac 和 java 命令，直接添加 classpath。<br>然后自定义 cmd 命令，将 classpath 带上。</p></div>
<h2 id="java-javac-添加-classpath"><a href="#java-javac-添加-classpath" class="headerlink" title="java javac 添加 classpath"></a>java javac 添加 classpath</h2><ul>
<li>windows 下用分号 “;” 作为分隔符</li>
</ul>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">javac -cp E:<span class="symbol">\d</span>e_project<span class="symbol">\g</span>it<span class="symbol">\A</span>lgorithmsSedgewick<span class="symbol">\a</span>lgs4.jar;E:<span class="symbol">\d</span>e_project<span class="symbol">\g</span>it<span class="symbol">\A</span>lgorithmsSedgewick<span class="symbol">\s</span>tdlib.jar; *.java</span><br><span class="line">或者</span><br><span class="line">javac -classpath E:<span class="symbol">\d</span>e_project<span class="symbol">\g</span>it<span class="symbol">\A</span>lgorithmsSedgewick<span class="symbol">\a</span>lgs4.jar;E:<span class="symbol">\d</span>e_project<span class="symbol">\g</span>it<span class="symbol">\A</span>lgorithmsSedgewick<span class="symbol">\s</span>tdlib.jar; *.java</span><br></pre></td></tr></table></figure>
<ul>
<li>linux 下用冒号 “:” 作为分隔符</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">javac -cp <span class="regexp">/home/</span>sealde<span class="regexp">/Document/</span>de_file<span class="regexp">/algorithms/</span>homework<span class="regexp">/jar/</span>algs4.<span class="string">jar:</span><span class="regexp">/home/</span>sealde<span class="regexp">/Document/</span>de_file<span class="regexp">/algorithms/</span>homework<span class="regexp">/jar/</span>stdlib.<span class="string">jar:</span> *.java</span><br></pre></td></tr></table></figure>
<h2 id="windows-下进行自定义命令"><a href="#windows-下进行自定义命令" class="headerlink" title="windows 下进行自定义命令"></a>windows 下进行自定义命令</h2><ul>
<li><p>设置 ALGS4 环境变量（可以不设置，只是为了方便）</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">ALGS4=E:<span class="symbol">\d</span>e_project<span class="symbol">\g</span>it<span class="symbol">\A</span>lgorithmsSedgewick<span class="symbol">\a</span>lgs4.jar;E:<span class="symbol">\d</span>e_project<span class="symbol">\g</span>it<span class="symbol">\A</span>lgorithmsSedgewick<span class="symbol">\s</span>tdlib.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 bat 脚本，脚本功能为添加自定义的命令。符号意义如下：</p>
<ul>
<li>doskey 相当于 linux 的 alias，@ 不显示命令</li>
<li>%ALGS4% 从系统环境变量取值</li>
<li>$* 指还有参数，这个没有深究</li>
<li>分号确保有以分号结束 classpath</li>
</ul>
</li>
</ul>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">@doskey java-algs4 = java -classpath %ALGS4%; $*</span><br><span class="line">@doskey javac-algs4 = javac -classpath %ALGS4%; $*</span><br></pre></td></tr></table></figure>
<ul>
<li>添加注册表信息，为了 cmd 启动时自动运行上面的脚本<ul>
<li>Win+R ==》regedit ==》 HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor ==》 新建字符串值，名为AutoRun ==》 值为E:\de_learn\algorithms\bin\algs4.bat ==》 保存退出</li>
</ul>
</li>
</ul>
<h2 id="linux-下进行自定义命令"><a href="#linux-下进行自定义命令" class="headerlink" title="linux 下进行自定义命令"></a>linux 下进行自定义命令</h2><ul>
<li>设置 ALGS4 环境变量（可以不设置，只是为了方便）；并添加 alias<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="attribute">ALGS4</span>=<span class="string">"/home/sealde/Document/de_file/algorithms/homework/jar/"</span></span><br><span class="line">alias <span class="attribute">javac-algs4</span>=<span class="string">"javac -cp <span class="variable">$ALGS4</span>/stdlib.jar:<span class="variable">$ALGS4</span>/algs4.jar:"</span></span><br><span class="line">alias <span class="attribute">java-algs4</span>=<span class="string">"java -cp <span class="variable">$ALGS4</span>/stdlib.jar:<span class="variable">$ALGS4</span>/algs4.jar:"</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>【go】tcell终端编辑库</title>
    <url>/post/go-tcell/</url>
    <content><![CDATA[<img src="/post/go-tcell/tcell.png" class="">
<a id="more"></a>
<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p><a href="https://github.com/gdamore/tcell" target="_blank" rel="noopener">https://github.com/gdamore/tcell</a></p>
<p>一个终端编辑库，受termbox启发，目前仍在维护，有不少终端工具在使用，如fzf, termshark, tview。由于打算使用这个库，翻了下代码，整理了一点内容，也方便后面查看</p>
<h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _demos              # <span class="built_in">demo</span></span><br><span class="line">│   └── ...</span><br><span class="line">├── attr.<span class="built_in">go</span></span><br><span class="line">├── cell.<span class="built_in">go</span></span><br><span class="line">├── charset_stub.<span class="built_in">go</span></span><br><span class="line">├── charset_unix.<span class="built_in">go</span></span><br><span class="line">├── charset_windows.<span class="built_in">go</span></span><br><span class="line">├── <span class="built_in">color</span>.<span class="built_in">go</span></span><br><span class="line">├── colorfit.<span class="built_in">go</span></span><br><span class="line">├── console_stub.<span class="built_in">go</span></span><br><span class="line">├── console_win.<span class="built_in">go</span></span><br><span class="line">├── doc.<span class="built_in">go</span></span><br><span class="line">├── encoding            # 编码</span><br><span class="line">│   └── all.<span class="built_in">go</span></span><br><span class="line">├── encoding.<span class="built_in">go</span></span><br><span class="line">├── <span class="built_in">errors</span>.<span class="built_in">go</span></span><br><span class="line">├── event.<span class="built_in">go</span></span><br><span class="line">├── interrupt.<span class="built_in">go</span></span><br><span class="line">├── <span class="built_in">key</span>.<span class="built_in">go</span>              # 键盘事件定义</span><br><span class="line">├── mouse.<span class="built_in">go</span>            # 鼠标事件定义</span><br><span class="line">├── nonblock_bsd.<span class="built_in">go</span></span><br><span class="line">├── nonblock_unix.<span class="built_in">go</span></span><br><span class="line">├── paste.<span class="built_in">go</span></span><br><span class="line">├── resize.<span class="built_in">go</span></span><br><span class="line">├── runes.<span class="built_in">go</span>            # 字符映射定义(不能恰当转换的时候用到)</span><br><span class="line">├── screen.<span class="built_in">go</span>           # screen 接口定义</span><br><span class="line">├── simulation.<span class="built_in">go</span></span><br><span class="line">├── stdin_unix.<span class="built_in">go</span></span><br><span class="line">├── <span class="built_in">style</span>.<span class="built_in">go</span></span><br><span class="line">├── termbox             # termbox 兼容实例</span><br><span class="line">│   └── compat.<span class="built_in">go</span></span><br><span class="line">├── terminfo            # 适配各种终端</span><br><span class="line">│   └── ...</span><br><span class="line">├── terms_default.<span class="built_in">go</span></span><br><span class="line">├── terms_dynamic.<span class="built_in">go</span></span><br><span class="line">├── terms_static.<span class="built_in">go</span></span><br><span class="line">├── tscreen.<span class="built_in">go</span>          # 实际使用的 screen. 重要</span><br><span class="line">├── tscreen_stub.<span class="built_in">go</span></span><br><span class="line">├── tscreen_unix.<span class="built_in">go</span></span><br><span class="line">├── tty.<span class="built_in">go</span>              # 终端操作封装</span><br><span class="line">├── tty_unix.<span class="built_in">go</span></span><br><span class="line">└── views               # 对 tcell 封装</span><br><span class="line">    ├── _demos</span><br><span class="line">    │   └── ...</span><br><span class="line">    ├── app.<span class="built_in">go</span></span><br><span class="line">    ├── boxlayout.<span class="built_in">go</span></span><br><span class="line">    ├── cellarea.<span class="built_in">go</span></span><br><span class="line">    ├── constants.<span class="built_in">go</span></span><br><span class="line">    ├── panel.<span class="built_in">go</span></span><br><span class="line">    ├── spacer.<span class="built_in">go</span></span><br><span class="line">    ├── sstext.<span class="built_in">go</span></span><br><span class="line">    ├── sstextbar.<span class="built_in">go</span></span><br><span class="line">    ├── text.<span class="built_in">go</span></span><br><span class="line">    ├── textarea.<span class="built_in">go</span></span><br><span class="line">    ├── textbar.<span class="built_in">go</span></span><br><span class="line">    ├── <span class="built_in">view</span>.<span class="built_in">go</span></span><br><span class="line">    └── widget.<span class="built_in">go</span></span><br></pre></td></tr></table></figure>
<h2 id="入口views"><a href="#入口views" class="headerlink" title="入口views"></a>入口views</h2><p>views 是 tcell 自己的一层封装，从这里入手开始看。会看到 views/app.go 中 run 方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(app *Application)</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    screen := app.screen</span><br><span class="line">    widget := app.widget</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> widget == <span class="literal">nil</span> &#123;</span><br><span class="line">        app.wg.Done()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> screen == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// app 初始化</span></span><br><span class="line">        <span class="keyword">if</span> e := app.initialize(); e != <span class="literal">nil</span> &#123;</span><br><span class="line">            app.wg.Done()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        screen = app.screen</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        screen.Fini()</span><br><span class="line">        app.wg.Done()</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// screen 初始化</span></span><br><span class="line">    screen.Init()</span><br><span class="line">    screen.Clear()</span><br><span class="line">    <span class="comment">// widget 设置 view</span></span><br><span class="line">    widget.SetView(screen)</span><br><span class="line"></span><br><span class="line">loop:</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> widget = app.widget; widget == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// draw 和 show</span></span><br><span class="line">        widget.Draw()</span><br><span class="line">        screen.Show()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// screen pollEvent</span></span><br><span class="line">        ev := screen.PollEvent()</span><br><span class="line">        <span class="keyword">switch</span> nev := ev.(<span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> *eventAppQuit:</span><br><span class="line">            <span class="keyword">break</span> loop</span><br><span class="line">        <span class="keyword">case</span> *eventAppUpdate:</span><br><span class="line">            screen.Show()</span><br><span class="line">        <span class="keyword">case</span> *eventAppRefresh:</span><br><span class="line">            screen.Sync()</span><br><span class="line">        <span class="keyword">case</span> *eventAppFunc:</span><br><span class="line">            nev.fn()</span><br><span class="line">        <span class="keyword">case</span> *tcell.EventResize:</span><br><span class="line">            screen.Sync()</span><br><span class="line">            widget.Resize()</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            widget.HandleEvent(ev)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到有几件事情</p>
<ul>
<li>app 初始化</li>
<li>screen 初始化</li>
<li>widget 设置 view</li>
<li>循环<ul>
<li>draw 和 show</li>
<li>poollEvent</li>
<li>处理事件</li>
</ul>
</li>
</ul>
<h3 id="app-initialize初始化"><a href="#app-initialize初始化" class="headerlink" title="app.initialize初始化"></a>app.initialize初始化</h3><p>views/app.go 中 app.initialize 会调 tscreen.go 下面的方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTerminfoScreenFromTty</span><span class="params">(tty Tty)</span> <span class="params">(Screen, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 从系统 env 中获取 TERM，然后找到 terminfo</span></span><br><span class="line">    ti, e := terminfo.LookupTerminfo(os.Getenv(<span class="string">"TERM"</span>))</span><br><span class="line">    <span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">        ti, e = loadDynamicTerminfo(os.Getenv(<span class="string">"TERM"</span>))</span><br><span class="line">        <span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, e</span><br><span class="line">        &#125;</span><br><span class="line">        terminfo.AddTerminfo(ti)</span><br><span class="line">    &#125;</span><br><span class="line">    t := &amp;tScreen&#123;ti: ti, tty: tty&#125;</span><br><span class="line"></span><br><span class="line">    t.keyexist = <span class="built_in">make</span>(<span class="keyword">map</span>[Key]<span class="keyword">bool</span>)</span><br><span class="line">    t.keycodes = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*tKeyCode)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(ti.Mouse) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        t.mouse = []<span class="keyword">byte</span>(ti.Mouse)</span><br><span class="line">    &#125;</span><br><span class="line">    t.prepareKeys()</span><br><span class="line">    t.buildAcsMap()</span><br><span class="line">    t.resizeQ = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>)                      <span class="comment">// resize chan</span></span><br><span class="line">    t.fallback = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">rune</span>]<span class="keyword">string</span>)</span><br><span class="line">    <span class="comment">// 加载字符映射</span></span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> RuneFallbacks &#123;</span><br><span class="line">        t.fallback[k] = v</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> t, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到有几件事情</p>
<ul>
<li>从 env 中获取 TERM 环境变量，然后找 terminfo</li>
<li>创建 tScreen 实例，并初始化基本字段</li>
</ul>
<h2 id="screen-Init方法"><a href="#screen-Init方法" class="headerlink" title="screen.Init方法"></a>screen.Init方法</h2><p>再来看 tscreen.go Init 方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *tScreen)</span> <span class="title">Init</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// 初始化t.tty</span></span><br><span class="line">    <span class="keyword">if</span> e := t.initialize(); e != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    t.evch = <span class="built_in">make</span>(<span class="keyword">chan</span> Event, <span class="number">10</span>)                       <span class="comment">// 事件chan</span></span><br><span class="line">    t.keychan = <span class="built_in">make</span>(<span class="keyword">chan</span> []<span class="keyword">byte</span>, <span class="number">10</span>)                   <span class="comment">// 按键chan(包括鼠标)</span></span><br><span class="line">    t.keytimer = time.NewTimer(time.Millisecond * <span class="number">50</span>)   <span class="comment">// 处理按键的定时器</span></span><br><span class="line">    t.charset = <span class="string">"UTF-8"</span></span><br><span class="line"></span><br><span class="line">    t.charset = getCharset()</span><br><span class="line">    <span class="keyword">if</span> enc := GetEncoding(t.charset); enc != <span class="literal">nil</span> &#123;</span><br><span class="line">        t.encoder = enc.NewEncoder()</span><br><span class="line">        t.decoder = enc.NewDecoder()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ErrNoCharset</span><br><span class="line">    &#125;</span><br><span class="line">    ti := t.ti</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    t.colors = <span class="built_in">make</span>(<span class="keyword">map</span>[Color]Color)</span><br><span class="line">    t.palette = <span class="built_in">make</span>([]Color, t.nColors())</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; t.nColors(); i++ &#123;</span><br><span class="line">        t.palette[i] = Color(i) | ColorValid</span><br><span class="line">        <span class="comment">// identity map for our builtin colors</span></span><br><span class="line">        t.colors[Color(i)|ColorValid] = Color(i) | ColorValid</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    t.quit = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)                        <span class="comment">// quit chan</span></span><br><span class="line"></span><br><span class="line">    t.Lock()</span><br><span class="line">    t.cx = <span class="number">-1</span>                                           <span class="comment">// cellbuffer 宽</span></span><br><span class="line">    t.cy = <span class="number">-1</span>                                           <span class="comment">// cellbuffer 高</span></span><br><span class="line">    t.style = StyleDefault</span><br><span class="line">    t.cells.Resize(w, h)</span><br><span class="line">    t.cursorx = <span class="number">-1</span>                                      <span class="comment">// 光标x</span></span><br><span class="line">    t.cursory = <span class="number">-1</span>                                      <span class="comment">// 光标y</span></span><br><span class="line">    t.resize()</span><br><span class="line">    t.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := t.engage(); err != <span class="literal">nil</span> &#123;                  <span class="comment">// 终端操作调用</span></span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里干了几件事情</p>
<ul>
<li>初始化 tty</li>
<li>事件、按键chan的初始化，按键定时器</li>
<li>quit chan初始化</li>
<li>终端操作调用</li>
</ul>
<h3 id="初始化tty"><a href="#初始化tty" class="headerlink" title="初始化tty"></a>初始化tty</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NewDevTtyFromDev opens a tty device given a path.  This can be useful to bind to other nodes.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDevTtyFromDev</span><span class="params">(dev <span class="keyword">string</span>)</span> <span class="params">(Tty, error)</span></span> &#123;</span><br><span class="line">    tty := &amp;devTty&#123;</span><br><span class="line">        dev: dev,</span><br><span class="line">        sig: <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal),                                  <span class="comment">// 接收窗口大小改变信号</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> err error</span><br><span class="line">    <span class="keyword">if</span> tty.of, err = os.OpenFile(dev, os.O_RDWR, <span class="number">0</span>); err != <span class="literal">nil</span> &#123;   <span class="comment">// 拿到 /dev/tty 的 fd</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    tty.fd = <span class="keyword">int</span>(tty.of.Fd())</span><br><span class="line">    <span class="keyword">if</span> !term.IsTerminal(tty.fd) &#123;</span><br><span class="line">        _ = tty.f.Close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"not a terminal"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> tty.saved, err = term.GetState(tty.fd); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        _ = tty.f.Close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"failed to get state: %w"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tty, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>tty 的初始化有个窗口大小改变的信号处理，后面会用到。另外一个是拿到 terminal 的 fd，已经初始状态，以便 app 退出的时候恢复</p>
<h3 id="终端操作调用"><a href="#终端操作调用" class="headerlink" title="终端操作调用"></a>终端操作调用</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *tScreen)</span> <span class="title">engage</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    t.Lock()</span><br><span class="line">    <span class="keyword">defer</span> t.Unlock()</span><br><span class="line">    <span class="keyword">if</span> t.tty == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ErrNoScreen</span><br><span class="line">    &#125;</span><br><span class="line">    t.tty.NotifyResize(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;             <span class="comment">// 注册窗口大小改变回调函数</span></span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> t.resizeQ &lt;- <span class="literal">true</span>:             <span class="comment">// 往 resizeQ 塞数据</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> t.running &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">"already engaged"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := t.tty.Start(); err != <span class="literal">nil</span> &#123;   <span class="comment">// tty.Start</span></span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    t.running = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> w, h, err := t.tty.WindowSize(); err == <span class="literal">nil</span> &amp;&amp; w != <span class="number">0</span> &amp;&amp; h != <span class="number">0</span> &#123;</span><br><span class="line">        t.cells.Resize(w, h)</span><br><span class="line">    &#125;</span><br><span class="line">    stopQ := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)            <span class="comment">// stop chan</span></span><br><span class="line">    t.stopQ = stopQ</span><br><span class="line">    t.enableMouse(t.mouseFlags)</span><br><span class="line">    t.enablePasting(t.pasteEnabled)</span><br><span class="line"></span><br><span class="line">    ti := t.ti</span><br><span class="line">    t.TPuts(ti.EnterCA)</span><br><span class="line">    t.TPuts(ti.EnterKeypad)</span><br><span class="line">    t.TPuts(ti.HideCursor)</span><br><span class="line">    t.TPuts(ti.EnableAcs)</span><br><span class="line">    t.TPuts(ti.Clear)</span><br><span class="line"></span><br><span class="line">    t.wg.Add(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">go</span> t.inputLoop(stopQ)                   <span class="comment">// 输入循环</span></span><br><span class="line">    <span class="keyword">go</span> t.mainLoop(stopQ)                    <span class="comment">// main循环</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>干了几件事情</p>
<ul>
<li>注册窗口大小改变回调函数<ul>
<li>函数注册到了 tty.cb 中</li>
</ul>
</li>
<li>tty.Start()</li>
<li>stop chan 初始化</li>
<li>输入处理循环</li>
<li>main循环</li>
</ul>
<h4 id="tty-Start-方法"><a href="#tty-Start-方法" class="headerlink" title="tty.Start()方法"></a>tty.Start()方法</h4><p>tty.Start() 在 tty_unis.go 中</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tty *devTty)</span> <span class="title">Start</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    tty.l.Lock()</span><br><span class="line">    <span class="keyword">defer</span> tty.l.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里重新获取了一遍dev的fd，说是macOS有bug</span></span><br><span class="line">    <span class="keyword">var</span> err error</span><br><span class="line">    <span class="keyword">if</span> tty.f, err = os.OpenFile(tty.dev, os.O_RDWR, <span class="number">0</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    tty.fd = <span class="keyword">int</span>(tty.of.Fd())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !term.IsTerminal(tty.fd) &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">"device is not a terminal"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _ = tty.f.SetReadDeadline(time.Time&#123;&#125;)</span><br><span class="line">    saved, err := term.MakeRaw(tty.fd) <span class="comment">// also sets vMin and vTime</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    tty.saved = saved</span><br><span class="line"></span><br><span class="line">    tty.stopQ = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)             <span class="comment">// stop chan</span></span><br><span class="line">    tty.wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(stopQ <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;              <span class="comment">// 起了个go程，处理窗口大小改变信息</span></span><br><span class="line">        <span class="keyword">defer</span> tty.wg.Done()</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> &lt;-tty.sig:</span><br><span class="line">                tty.l.Lock()</span><br><span class="line">                cb := tty.cb</span><br><span class="line">                tty.l.Unlock()</span><br><span class="line">                <span class="keyword">if</span> cb != <span class="literal">nil</span> &#123;</span><br><span class="line">                    cb()</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> &lt;-stopQ:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(tty.stopQ)</span><br><span class="line"></span><br><span class="line">    signal.Notify(tty.sig, syscall.SIGWINCH)    <span class="comment">// 向系统注册窗口大小改变信号</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>干了几件事情：</p>
<ul>
<li>初始化 tty.stopQ 管道</li>
<li>起了个go程，处理窗口大小改变信息<ul>
<li>select 两个管道 stopQ 和 tty.sig</li>
<li>执行了回调函数</li>
</ul>
</li>
<li>注册窗口大小改变回调函数</li>
</ul>
<h4 id="inputLoop输入处理"><a href="#inputLoop输入处理" class="headerlink" title="inputLoop输入处理"></a>inputLoop输入处理</h4><p>再来看看 inputLoop 方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *tScreen)</span> <span class="title">inputLoop</span><span class="params">(stopQ <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> t.wg.Done()</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-stopQ:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">        chunk := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">128</span>)</span><br><span class="line">        n, e := t.tty.Read(chunk)               <span class="comment">// 从tty的fd读数据</span></span><br><span class="line">        <span class="keyword">switch</span> e &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            _ = t.PostEvent(NewEventError(e))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line">            t.keychan &lt;- chunk[:n]              <span class="comment">// 将读取得数据送到keychan</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>干了几件事情：</p>
<ul>
<li>从tty的fd读数据</li>
<li>将数据送到keychan</li>
</ul>
<h4 id="mainLoop主循环"><a href="#mainLoop主循环" class="headerlink" title="mainLoop主循环"></a>mainLoop主循环</h4><p>再来看看 mainLoop 方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *tScreen)</span> <span class="title">mainLoop</span><span class="params">(stopQ <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> t.wg.Done()</span><br><span class="line">    buf := &amp;bytes.Buffer&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-stopQ:                               <span class="comment">// screen 的 stopQ</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">case</span> &lt;-t.quit:                              <span class="comment">// screen 的 quit</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">case</span> &lt;-t.resizeQ:                           <span class="comment">// tty 接收窗口大小改变信号的消息</span></span><br><span class="line">            t.Lock()</span><br><span class="line">            t.cx = <span class="number">-1</span></span><br><span class="line">            t.cy = <span class="number">-1</span></span><br><span class="line">            t.resize()</span><br><span class="line">            t.cells.Invalidate()</span><br><span class="line">            t.draw()</span><br><span class="line">            t.Unlock()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">case</span> &lt;-t.keytimer.C:                        <span class="comment">// 定时处理50ms</span></span><br><span class="line">            <span class="comment">// If the timer fired, and the current time</span></span><br><span class="line">            <span class="comment">// is after the expiration of the escape sequence,</span></span><br><span class="line">            <span class="comment">// then we assume the escape sequence reached it's</span></span><br><span class="line">            <span class="comment">// conclusion, and process the chunk independently.</span></span><br><span class="line">            <span class="comment">// This lets us detect conflicts such as a lone ESC.</span></span><br><span class="line">            <span class="keyword">if</span> buf.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> time.Now().After(t.keyexpire) &#123;</span><br><span class="line">                    t.scanInput(buf, <span class="literal">true</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> buf.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> !t.keytimer.Stop() &#123;</span><br><span class="line">                    <span class="keyword">select</span> &#123;</span><br><span class="line">                    <span class="keyword">case</span> &lt;-t.keytimer.C:</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                t.keytimer.Reset(time.Millisecond * <span class="number">50</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> chunk := &lt;-t.keychan:                  <span class="comment">// kechan事件处理</span></span><br><span class="line">            buf.Write(chunk)</span><br><span class="line">            t.keyexpire = time.Now().Add(time.Millisecond * <span class="number">50</span>)</span><br><span class="line">            t.scanInput(buf, <span class="literal">false</span>)                 <span class="comment">// 从buf读数据，处理成事件推到t.evch中(可能会阻塞)</span></span><br><span class="line">            <span class="keyword">if</span> !t.keytimer.Stop() &#123;                 <span class="comment">// 主动停timer</span></span><br><span class="line">                <span class="keyword">select</span> &#123;</span><br><span class="line">                <span class="keyword">case</span> &lt;-t.keytimer.C:</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> buf.Len() &gt; <span class="number">0</span> &#123;                      <span class="comment">// 如果buf还有数据，起50ms定时器</span></span><br><span class="line">                t.keytimer.Reset(time.Millisecond * <span class="number">50</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>干了几件事情：</p>
<ul>
<li>接收 stopQ 和 quit 消息，终止循环</li>
<li>处理窗口大小改变信号过来的消息</li>
<li>定时处理<ul>
<li>keychan接收的输入可能不完整，超过 50ms 直接处理</li>
<li>超时的情况直接将符号推到evch中(让app来处理)</li>
</ul>
</li>
<li>kechan事件处理<ul>
<li>将keychan的消息写到buf</li>
<li>设置过期时间</li>
<li>从buf读数据，处理成事件推到t.evch中</li>
<li>主动停timer，如果buf还有数据，说明buf数据有未完全数据，需要起50ms定时去看超过时间还没有keychan消息的情况</li>
</ul>
</li>
</ul>
<h4 id="scanInput方法"><a href="#scanInput方法" class="headerlink" title="scanInput方法"></a>scanInput方法</h4><p>处理buf的符号成对应的事件，发送到 t.evch 中</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *tScreen)</span> <span class="title">scanInput</span><span class="params">(buf *bytes.Buffer, expire <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    evs := t.collectEventsFromInput(buf, expire)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, ev := <span class="keyword">range</span> evs &#123;</span><br><span class="line">        t.PostEventWait(ev)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="screen-PollEvent方法"><a href="#screen-PollEvent方法" class="headerlink" title="screen.PollEvent方法"></a>screen.PollEvent方法</h2><p>再来看看事件这一部分，在 views/app.go 主循环中，不停地 PollEvent 事件出来处理。PostEvent 方法在 tscreen.go 中</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *tScreen)</span> <span class="title">PollEvent</span><span class="params">()</span> <span class="title">Event</span></span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-t.quit:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> ev := &lt;-t.evch:</span><br><span class="line">        <span class="keyword">return</span> ev</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到就是一直从 t.evch chan 中拿事件</p>
<h3 id="PostEvent方法"><a href="#PostEvent方法" class="headerlink" title="PostEvent方法"></a>PostEvent方法</h3><p>PostEvent 分两种，一种 PostEventWait 是如果 t.evch 满了，会阻塞直到能 Post；另一种 PostEvent 是直接发数据到 t.evch，如果满了就返回 Full 错误</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *tScreen)</span> <span class="title">PostEventWait</span><span class="params">(ev Event)</span></span> &#123;</span><br><span class="line">    t.evch &lt;- ev</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *tScreen)</span> <span class="title">PostEvent</span><span class="params">(ev Event)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> t.evch &lt;- ev:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> ErrEventQFull</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="触发时机"><a href="#触发时机" class="headerlink" title="触发时机"></a>触发时机</h3><ol>
<li>scanInput 的时候。即从终端读完 keychan 消息处理成事件后</li>
<li>resize 的时候。而resize分别会在 Init, Show, Sync 和 mainLoop中resizeQ 被调用<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *tScreen)</span> <span class="title">resize</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> w, h, e := t.tty.WindowSize(); e == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> w != t.w || h != t.h &#123;</span><br><span class="line">            t.cx = <span class="number">-1</span></span><br><span class="line">            t.cy = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">            t.cells.Resize(w, h)</span><br><span class="line">            t.cells.Invalidate()</span><br><span class="line">            t.h = h</span><br><span class="line">            t.w = w</span><br><span class="line">            ev := NewEventResize(w, h)</span><br><span class="line">            _ = t.PostEvent(ev)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>inputLoop 中 t.tty.Read(chunk) 从终端消息读取失败会推Event <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">n, e := t.tty.Read(chunk)</span><br><span class="line"><span class="keyword">switch</span> e &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    _ = t.PostEvent(NewEventError(e))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>application 自己主动调用</li>
</ol>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>tcell</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/post/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>hexo-next-travis-ci 构建自动化部署博客</title>
    <url>/post/hexo-next-travis-ci/</url>
    <content><![CDATA[<video height="100%" width="100%" loop="loop" controls="controls"><br>  <source src="/post/hexo-next-travis-ci/show.mp4" type="video/mp4"></source><br></video>

<p>构建效果如上面视频所示，如果浏览器不支持请戳一下链接: <a href="/post/hexo-next-travis-ci/show.mp4" title="自动化部署构建效果">自动化部署构建效果</a> 。<strong>只要将编辑的 .md 文件推送到 github 上，博客网站就可以更新这篇文章</strong>。</p>
<a id="more"></a>
<p>其实差不多半年前也构建过一次，由于安装 travis-ci 失败终结了~这一次看到小伙伴也在使用，就想整好拿来玩玩。只能说，这些还挺有意思，挺牛逼的，哈哈哈。</p>
<hr>
<h1 id="稍微介绍一下所用的工具-hexo-博客框架、NexT-主题、travis-ci-持续集成工具"><a href="#稍微介绍一下所用的工具-hexo-博客框架、NexT-主题、travis-ci-持续集成工具" class="headerlink" title="稍微介绍一下所用的工具: hexo 博客框架、NexT 主题、travis-ci 持续集成工具"></a>稍微介绍一下所用的工具: <strong>hexo 博客框架</strong>、<strong>NexT 主题</strong>、<strong>travis-ci 持续集成工具</strong></h1><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><div class="note success"><p>A fast, simple &amp; powerful blog framework</p>
<p><strong>hexo</strong> - <a href="https://hexo.io" target="_blank" rel="noopener"><em>hexo 官网</em></a></p></div>
<ul>
<li>hexo 一个基于 node.js 开源博客框架</li>
<li>hexo 的插件和主题可以在文档中找到  <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener"><em>中文文档</em></a></li>
<li>github 有相关的组织和开发主题的教程  <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener"><em>hexojs/hexo</em></a>  <a href="https://github.com/hexojs/awesome-hexo" target="_blank" rel="noopener"><em>hexojs/awesome-hexo</em></a></li>
</ul>
<h2 id="NexT"><a href="#NexT" class="headerlink" title="NexT"></a>NexT</h2><div class="note info"><p>精于心，简于形 Elegant Theme for Hexo</p>
<p><strong>NexT</strong> - <a href="http://theme-next.iissnan.com" target="_blank" rel="noopener"><em>NexT使用文档</em></a></p></div>
<p>NexT 一个 hexo 下的高可定制化主题，并且有 Muse、Mist、Pisces、Gemini 几种模式。目前我使用的就是 Mist。    <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener"><em>NexT github</em></a></p>
<h2 id="travis-ci"><a href="#travis-ci" class="headerlink" title="travis-ci"></a>travis-ci</h2><div class="note warning"><p>Free continuous integration platform for GitHub projects.</p>
<p><strong>travis-ci</strong> - <a href="https://www.travis-ci.org" target="_blank" rel="noopener"><em>travis-ci 官网</em></a></p></div>
<p>一个开源持续集成项目，通过执行预先的脚本完成相应的部署  <a href="https://github.com/travis-ci" target="_blank" rel="noopener"><em>travis-ci github</em></a></p>
<hr>
<h1 id="安装-hexo-和建站"><a href="#安装-hexo-和建站" class="headerlink" title="安装 hexo 和建站"></a>安装 hexo 和建站</h1><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p>
<ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="noopener"><em>Node.js 官网</em></a></li>
<li><a href="https://git-scm.com/" target="_blank" rel="noopener"><em>Git 官网</em></a></li>
</ul>
<p>对于 linux 用户，可以选择用命令行安装 Node.js 和 Git。我已经忘记当初我是怎么安装的了～可以参考 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener"><em>hexo 官网文档</em></a></p>
<h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><div class="note success"><p>如果下载速度缓慢，可以添加<strong>淘宝镜像</strong>。以下两者都可以添加镜像。</p></div>
<ul>
<li>第一个可以用 npm config get registry 验证配置是否成功</li>
<li>第二个使用的时候用 cnpm 替换 npm， cnpm install express</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> npm config <span class="keyword">set</span> registry <span class="comment">https:</span>//<span class="comment">registry.npm.taobao.org</span></span><br><span class="line">或</span><br><span class="line">$ npm <span class="comment">install -g cnpm --registry=https:</span>//<span class="comment">registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>
<p>安装 hexo<br><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure></p>
<h2 id="建站准备"><a href="#建站准备" class="headerlink" title="建站准备"></a>建站准备</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure></p>
<p>新建完成后，指定文件夹的目录如下：<br><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="variable">_config</span>.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── <span class="variable">_drafts</span></span><br><span class="line">|   └── <span class="variable">_posts</span></span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></p>
<h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的<strong>配置</strong>信息，您可以在此配置大部分的参数。</p>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。<br><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hexo-site"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"hexo"</span>: &#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">""</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"hexo"</span>: <span class="string">"^3.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-archive"</span>: <span class="string">"^0.1.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-category"</span>: <span class="string">"^0.1.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-index"</span>: <span class="string">"^0.1.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-tag"</span>: <span class="string">"^0.1.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-ejs"</span>: <span class="string">"^0.1.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-stylus"</span>: <span class="string">"^0.2.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-marked"</span>: <span class="string">"^0.2.4"</span>,</span><br><span class="line">    <span class="attr">"hexo-server"</span>: <span class="string">"^0.1.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p>模版文件夹。当您新建文章时，Hexo 会根据 <strong>scaffold</strong> 来建立文件。</p>
<p>Hexo的模板是指在新建的markdown文件中<strong>默认填充</strong>的内容。例如，如果您修改<strong>scaffold/post.md</strong>中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>
<h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹是<strong>存放用户资源</strong>的地方。除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p>
<h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p>主题文件夹。Hexo 会根据主题来生成静态页面。Hexo 默认主题是 landscape。</p>
<h2 id="本地开启服务"><a href="#本地开启服务" class="headerlink" title="本地开启服务"></a>本地开启服务</h2><p>生成静态文件并启动服务器</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ hexo generate &amp;&amp; hexo server</span><br><span class="line">简写</span><br><span class="line">$ hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<p>清楚缓存文件(db.json)和已生成的静态文件(public)。<br><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo clean</span><br></pre></td></tr></table></figure></p>
<p>更多命令参考 <a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener"><em>hexo 指令</em></a></p>
<p>执行完 <strong>hexo g &amp;&amp; hexo s</strong> 后你将会看到如下页面：<br><img src="/post/hexo-next-travis-ci/hexo-start.png" class=""></p>
<hr>
<h1 id="使用-NexT-主题"><a href="#使用-NexT-主题" class="headerlink" title="使用 NexT 主题"></a>使用 NexT 主题</h1><p>觉得默认的主题不满意，那就换个主题，比如 NexT。</p>
<p>在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于<strong>站点根目录</strong>下，主要包含 Hexo 本身的配置，称为<strong>站点配置文件</strong>；另一份位于<strong>主题目录</strong>下，这份配置由主题作者提供，主要用于配置主题相关的选项，称为<strong>主题配置文件</strong>。</p>
<h2 id="安装-NexT"><a href="#安装-NexT" class="headerlink" title="安装 NexT"></a>安装 NexT</h2><p>Hexo 安装主题的方式<strong>非常简单</strong>，只需要将主题文件拷贝至站点目录的 <code>themes</code> 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。</p>
<h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">cd</span> <span class="symbol">&lt;folder&gt;</span></span><br><span class="line">$ git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure>
<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 <strong>站点配置文件</strong>，即 &lt;folder&gt; 目录下的 <code>_config.yml</code> 文件， 找到 <code>theme</code> 字段，并将其值更改为 next。</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">theme: <span class="keyword">next</span></span><br></pre></td></tr></table></figure>
<h2 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h2><h3 id="选择-Scheme（模式）"><a href="#选择-Scheme（模式）" class="headerlink" title="选择 Scheme（模式）"></a>选择 Scheme（模式）</h3><p>Scheme 的切换通过更改 <strong>主题配置文件</strong>，即 <strong>theme/next</strong> 目录下的 <code>_config.yml</code> 文件， 搜索 scheme 关键字。 你会看到有四行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#scheme: Muse</span></span><br><span class="line">scheme: Mist</span><br><span class="line"><span class="meta">#scheme: Pisces</span></span><br><span class="line"><span class="meta">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>
<h3 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h3><p>编辑 <strong>站点配置文件</strong>， 将 <code>language</code> 设置成你所需要的语言，可以在 themes/next/languages 下找到。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-Hans</span><br></pre></td></tr></table></figure>
<p>这里只是简单的配置，更多的配置请参考 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener"><em>NexT 使用文档</em></a></p>
<h2 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h2><div class="note success"><p>到此，NexT 主题安装和简单配置完成。</p></div>
下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 `hexo clean` 来清除 Hexo 的缓存。

启动 Hexo 本地站点

<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo clean</span><br><span class="line"><span class="variable">$ </span>hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>

启动时你将会看到类似如下日志
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">INFO  <span class="symbol">Generated:</span> index.html</span><br><span class="line">INFO  <span class="symbol">Generated:</span> archives/index.html</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/algolia_logo.svg</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/apple-touch-icon-<span class="keyword">next</span>.png</span><br><span class="line">INFO  <span class="symbol">Generated:</span> archives/<span class="number">2018</span>/index.html</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/avatar.gif</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/cc-by-nc-sa.svg</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/cc-by-nc-nd.svg</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/cc-by-nd.svg</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/cc-by-nc.svg</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/cc-by-sa.svg</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/cc-zero.svg</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/favicon-<span class="number">16</span>x16-<span class="keyword">next</span>.png</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/cc-by.svg</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/favicon-<span class="number">32</span>x32-<span class="keyword">next</span>.png</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/loading.gif</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/logo.svg</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/placeholder.gif</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/quote-r.svg</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/searchicon.png</span><br><span class="line">INFO  <span class="symbol">Generated:</span> images/quote-l.svg</span><br><span class="line">INFO  <span class="symbol">Generated:</span> <span class="class"><span class="keyword">lib</span>/<span class="title">fastclick</span>/<span class="title">LICENSE</span></span></span><br><span class="line">INFO  <span class="symbol">Generated:</span> archives/<span class="number">2018</span>/<span class="number">0</span>2/index.html</span><br><span class="line">INFO  <span class="symbol">Generated:</span> <span class="class"><span class="keyword">lib</span>/<span class="title">font</span>-<span class="title">awesome</span>/<span class="title">HELP</span>-<span class="title">US</span>-<span class="title">OUT</span>.<span class="title">txt</span></span></span><br><span class="line">INFO  <span class="symbol">Generated:</span> <span class="class"><span class="keyword">lib</span>/<span class="title">canvas</span>-<span class="title">nest</span>/<span class="title">canvas</span>-<span class="title">nest</span>.<span class="title">min</span>.<span class="title">js</span></span></span><br><span class="line">INFO  <span class="symbol">Generated:</span> <span class="class"><span class="keyword">lib</span>/<span class="title">canvas</span>-<span class="title">ribbon</span>/<span class="title">canvas</span>-<span class="title">ribbon</span>.<span class="title">js</span></span></span><br><span class="line">INFO  <span class="symbol">Generated:</span> <span class="class"><span class="keyword">lib</span>/<span class="title">algolia</span>-<span class="title">instant</span>-<span class="title">search</span>/<span class="title">instantsearch</span>.<span class="title">min</span>.<span class="title">css</span></span></span><br><span class="line">INFO  <span class="symbol">Generated:</span> <span class="class"><span class="keyword">lib</span>/<span class="title">font</span>-<span class="title">awesome</span>/<span class="title">bower</span>.<span class="title">json</span></span></span><br><span class="line">INFO  <span class="symbol">Generated:</span> <span class="class"><span class="keyword">lib</span>/<span class="title">jquery_lazyload</span>/<span class="title">CONTRIBUTING</span>.<span class="title">html</span></span></span><br><span class="line">INFO  <span class="symbol">Generated:</span> <span class="class"><span class="keyword">lib</span>/<span class="title">fastclick</span>/<span class="title">bower</span>.<span class="title">json</span></span></span><br><span class="line">INFO  <span class="symbol">Generated:</span> <span class="class"><span class="keyword">lib</span>/<span class="title">jquery_lazyload</span>/<span class="title">bower</span>.<span class="title">json</span></span></span><br><span class="line">INFO  <span class="symbol">Generated:</span> <span class="class"><span class="keyword">lib</span>/<span class="title">fastclick</span>/<span class="title">README</span>.<span class="title">html</span></span></span><br><span class="line">INFO  <span class="symbol">Generated:</span> <span class="class"><span class="keyword">lib</span>/<span class="title">jquery_lazyload</span>/<span class="title">README</span>.<span class="title">html</span></span></span><br><span class="line">INFO  <span class="symbol">Generated:</span> <span class="class"><span class="keyword">lib</span>/<span class="title">jquery_lazyload</span>/<span class="title">jquery</span>.<span class="title">lazyload</span>.<span class="title">js</span></span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">INFO  Hexo is running at <span class="symbol">http:</span>/<span class="regexp">/localhost:4000/</span>. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

访问本地站点 http://localhost:4000/ 会得到如下页面
<img src="/post/hexo-next-travis-ci/hexo-next.png" class="">

</br>  
  
<div class="note warning"><p>在这里只是做最简单的配置，更多的配置请参考 <a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener"><em>NexT 使用文档-主题配置</em></a></p></div>
<h2 id="github-io-部署"><a href="#github-io-部署" class="headerlink" title="github io 部署"></a>github io 部署</h2><p>部署到网络有多种途径，可以部署到服务器上，也可以部署到 github 上，github pages 提供给用户部署静态页面，这里就部署到 github 上。</p>
<h3 id="配置-github-仓库"><a href="#配置-github-仓库" class="headerlink" title="配置 github 仓库"></a>配置 github 仓库</h3><p>创建仓库：名称（首字母小写）.github.io<br>如： 我的 github 名称为 Deeeeeeeee，那么创建仓库名为 deeeeeeeee.github.io</p>
<img src="/post/hexo-next-travis-ci/github-new-repository.png" class="">
<p></br></p>
<p>进入仓库 ==》 <i class="fa fa-cog fa-lg"></i> Settings ==》 <code>GitHub Pages</code> ==》 选择 master 分支作为 github pages 分支</p>
<img src="/post/hexo-next-travis-ci/github-pages-setting.png" class="">
<h3 id="配置-hexo-部署信息"><a href="#配置-hexo-部署信息" class="headerlink" title="配置 hexo 部署信息"></a>配置 hexo 部署信息</h3><div class="note warning"><p>这里略过 SSH keys 配置的步骤，百度会告诉你<br><strong>更多部署操作参考 <a href="https://hexo.io/zh-cn/docs/deployment.html#Git" target="_blank" rel="noopener"><em>Hexo 文档-部署</em></a></strong></p></div>
<p>安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener"><em>hexo-deployer-git</em></a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>修改站点配置<br><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> <span class="params">&lt;repository url&gt;</span></span><br><span class="line"><span class="symbol">  branch:</span> [branch]</span><br><span class="line"><span class="symbol">  message:</span> [message]</span><br></pre></td></tr></table></figure></p>
<figure class="highlight less"><figcaption><span>我的配置</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/Deeeeeeeee/deeeeeeeee.github.io</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br><span class="line">  <span class="attribute">message</span>:</span><br></pre></td></tr></table></figure>
<h3 id="推送到-github"><a href="#推送到-github" class="headerlink" title="推送到 github"></a>推送到 github</h3><p>如果配置了 github，hexo 部署的时候会将 public 文件夹下的文件推送到指定地址和分支<br><strong>执行部署命令</strong><br><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo deploy</span><br><span class="line">简写</span><br><span class="line"><span class="variable">$ </span>hexo d</span><br></pre></td></tr></table></figure></p>
<p>这时候可以在 github 仓库中看到更新的文件，访问页面你的 github io，如: <a href="https://deeeeeeeee.github.io">https://deeeeeeeee.github.io</a></p>
<img src="/post/hexo-next-travis-ci/github-master.png" class="">
<hr>
<h1 id="使用-Travis-CI"><a href="#使用-Travis-CI" class="headerlink" title="使用 Travis CI"></a>使用 Travis CI</h1><div class="note success"><p>如果换工作环境，那么又需要安装 Node.js、Git、Hexo 等等。这时候可以使用 travis-ci 持续集成工具，虽然这比较鸡肋，因为你会在每个工作环境都装上 Node.js、Git、Hexo 等等。啊哈哈哈~</p></div>
<h2 id="Travis-CI-官网配置"><a href="#Travis-CI-官网配置" class="headerlink" title="Travis CI 官网配置"></a>Travis CI 官网配置</h2><p>由于使用 travis-ci，所以需要在官网上配置 github 信息。<a href="https://www.travis-ci.org" target="_blank" rel="noopener"><em>Travis CI 官网地址</em></a></p>
<h3 id="配置项目信息"><a href="#配置项目信息" class="headerlink" title="配置项目信息"></a>配置项目信息</h3><p>进入官网并登录，选择添加仓库</p>
<img src="/post/hexo-next-travis-ci/travis-repository.png" class="">
<p></br><br>项目构建配置</p>
<img src="/post/hexo-next-travis-ci/travis-build-setting.png" class="">
<h3 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h3><p>由于推送代码需要 github 权限，又不能将账号密码暴露，所以可以将 github Token 设置为环境变量</p>
<p><i class="fa fa-github fa-lg"></i> github ==》 <i class="fa fa-cog fa-lg"></i> Settings ==》 Developer settings ==》 Personal access tokens ==》 Generate new token</p>
<img src="/post/hexo-next-travis-ci/github-token.png" class="">
<p></br></p>
<div class="note success"><p>将 token 保存好，因为 github 上只显示一次</p></div>
<p>在 travis 上设置 token 环境变量</p>
<img src="/post/hexo-next-travis-ci/travis-token-setting.png" class="">
<h2 id="编写-travis-脚本"><a href="#编写-travis-脚本" class="headerlink" title="编写 travis 脚本"></a>编写 travis 脚本</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S: Build Lifecycle</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-generator-searchdb</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#before_script:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"Deeeeeeeee"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"seal.de@foxmail.com"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">"Update docs"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">"https://$&#123;GIT_HUB_TOKEN&#125;@$&#123;GH_REF&#125;"</span> <span class="string">master:master</span></span><br><span class="line"><span class="comment"># E: Build LifeCycle</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branchs:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">GH_REF:</span> <span class="string">github.com/Deeeeeeeee/deeeeeeeee.github.io.git</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="将文件推送到-dev-分支"><a href="#将文件推送到-dev-分支" class="headerlink" title="将文件推送到 dev 分支"></a>将文件推送到 dev 分支</h2><div class="note warning"><p>推送到远程分之前，建议删除 themes/next 下的 .git 文件夹和 .gitignore 文件</p></div>
<p>给本地仓库添加 dev 分支<br><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">$ git checkout -<span class="keyword">b </span>dev1</span><br></pre></td></tr></table></figure></p>
<p>将分支推送到远程<br><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">push</span> --force -u <span class="built_in">origin</span> dev</span><br></pre></td></tr></table></figure></p>
<p>推送上去之后文件目录，如下图<br><img src="/post/hexo-next-travis-ci/github-dev.png" class=""></p>
<p><strong>最后在 travis 上就可以看到部署你的博客到 github pages 的日志</strong></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>travis-ci</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>阅读源码系列--双重校验锁</title>
    <url>/post/read-java-source-preface/</url>
    <content><![CDATA[<p>双重校验锁：即在代码 synchronized 代码块之前和代码块开始，都对一个变量进行校验</p>
<p>javax.xml.parsers.FactoryFinder 类里面有个方法 static <T> T find(Class<T> type, String fallbackClassName)，其中有一段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (firstTime) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (cacheProps) &#123;</span><br><span class="line">            <span class="keyword">if</span> (firstTime) &#123;</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>其中 firstTime 和 cachePros 为。firstTime 判断是否已经缓存过，cachePros 缓存 properties<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flag indicating if properties from java.home/lib/jaxp.properties</span></span><br><span class="line"><span class="comment"> * have been cached.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> firstTime = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cache for properties in java.home/lib/jaxp.properties</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Properties cacheProps = <span class="keyword">new</span> Properties();</span><br></pre></td></tr></table></figure></p>
<div class="note warning"><p>那么，问题来了，为什么要写成这么蛋疼的加锁形式呢？</p></div>
<h2 id="不加锁的情况"><a href="#不加锁的情况" class="headerlink" title="不加锁的情况"></a>不加锁的情况</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (firstTime) &#123;</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<p>当有多个线程调用这一段时，有种情况会出现问题，cachePros 已经缓存了，但是另外一个线程执行到了 if(firstTime)，此时 firstTime 还是为 true。那么就出现问题了</p>
<h2 id="加锁的情况"><a href="#加锁的情况" class="headerlink" title="加锁的情况"></a>加锁的情况</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="keyword">synchronized</span> (cacheProps) &#123;</span><br><span class="line">		<span class="keyword">if</span> (firstTime) &#123;</span><br></pre></td></tr></table></figure>
<p>这种情况效率会比较低一点，因为同一时间只允许一个线程执行这段代码。但是可以在前面添加一个判断，让程序只在第一次调用时阻塞</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (firstTime) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (cacheProps) &#123;</span><br><span class="line">            <span class="keyword">if</span> (firstTime) &#123;</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>
<h2 id="使用-volatile-同步变量并防止指令重排"><a href="#使用-volatile-同步变量并防止指令重排" class="headerlink" title="使用 volatile 同步变量并防止指令重排"></a>使用 volatile 同步变量并防止指令重排</h2><p>jvm 优化指令时，有可能会重排指令，虽然感觉这里不需要防止指令重排。啊哈哈哈</p>
]]></content>
      <categories>
        <category>阅读源码</category>
      </categories>
      <tags>
        <tag>jdk</tag>
        <tag>double-check</tag>
        <tag>lock</tag>
      </tags>
  </entry>
  <entry>
    <title>记连接 oracle 数据库失败</title>
    <url>/post/oracle-connect-fail/</url>
    <content><![CDATA[<p>plsql 客户端可以连上 oracle 数据库，程序连接不上。报错信息 oracle 1153 或 oracle 12505，connection refused</p>
<a id="more"></a>
<p>错误信息1：<br><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory</span><br><span class="line"> <span class="params">(Io 异常: Connection refused(<span class="attr">DESCRIPTION</span>=(<span class="attr">ERR</span>=1153)</span><span class="params">(<span class="attr">VSNNUM</span>=0)</span><span class="params">(<span class="attr">ERROR_STACK</span>=(<span class="attr">ERROR</span>=(<span class="attr">CODE</span>=1153)</span><span class="params">(<span class="attr">EMFI</span>=4)</span></span><br><span class="line"> <span class="params">(<span class="attr">ARGS</span>='(<span class="attr">ADDRESS</span>=(<span class="attr">PROTOCOL</span>=TCP)</span><span class="params">(<span class="attr">HOST</span>=10.100.1.13)</span><span class="params">(<span class="attr">PORT</span>=1521)</span>)'))<span class="params">(<span class="attr">ERROR</span>=(<span class="attr">CODE</span>=305)</span><span class="params">(<span class="attr">EMFI</span>=1)</span>))))</span><br></pre></td></tr></table></figure></p>
<p>错误信息2：<br><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ORA-12505, TNS:listener does <span class="keyword">not</span> currently know of SID given <span class="keyword">in</span> connect descriptor</span><br><span class="line">The<span class="built_in"> Connection </span>descriptor used by the<span class="built_in"> client </span>was:</span><br><span class="line">xx.xxx.xx.xx:1521:xxx</span><br></pre></td></tr></table></figure></p>
<div class="note success"><p>服务器是 windows 2008 server, oracle 是 10g, jdk 是 1.6</p></div>
<p>刚开始是报第一个错误，换了几个版本的驱动包，直到换成 ojdbc6_11.1.0.7.0，出现了第二个报错。<br>然后将配置信息从<br><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"url"</span> value=<span class="string">"jdbc:oracle:thin:@172.xx.xx.xxx:1521:xxxx"</span> /&gt;</span><br></pre></td></tr></table></figure><br>改成了<br><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"url"</span> value=<span class="string">"jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=172.xx.xx.xxx)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=xxxx)))"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>这个数据就是跟配置在 tnsnames.ora 上的，最后连接上了数据库</p>
]]></content>
      <categories>
        <category>生产问题</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>connect-fail</tag>
        <tag>1153</tag>
      </tags>
  </entry>
  <entry>
    <title>阅读源码系列--线程池 ThreadPoolExecutor</title>
    <url>/post/rj-thread-pool/</url>
    <content><![CDATA[<div class="note success"><p>通过使用标准化的，广泛测试过的并发构建模块，可以消除很多潜在的线程编程风险，诸如死锁、饥饿、竞争条件(race conditions)和过度的上下文切换。</p>
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/concurrency/overview.html" target="_blank" rel="noopener"><em>jdk 说明文档</em></a></p></div>
<p>看了一下 ThreadPoolExecutor 源码的实现，觉得真的是赏心悦目。<strong>写的很漂亮</strong>，至少在我眼里是很漂亮的。</p>
<a id="more"></a>
<p>ThreadPoolExecutor 是并发实用工具(utilities)中 Task scheduling framework 里面的默认的线程池实现，具有灵活性和可扩展性。并发实用工具还有 Fork/join framework、Concurrent collections、Atomic varibles、Synchronizers、Locks 和 Nanosecond-granularity timing。有时间再去翻翻其他相关的实现，啊哈哈哈。<br>我阅读源码的 jdk 版本为 <strong>1.8.0_131</strong>，<strong>强烈建议</strong>先读 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html" target="_blank" rel="noopener"><em>api文档</em></a>，再阅读 jdk 的代码，会让你的思路变得清晰。</p>
<h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><img src="/post/rj-thread-pool/uml.png" class="">
<p>简单基本的关系图，继承关系非常清晰。其中 Future 属于任务提交后的异步结果，Executors 是创建 ExecutorService、Callable 等的工厂，RejectedExecutionException 是任务不能被接收时抛出的异常。<br>接下来简单看一下接口和抽象类。</p>
<h2 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Executor 接口将任务提交和线程使用的细节、调度解耦，也是该并发框架的核心，只有一个 <code>void execute(Runnable command)</code> 方法，通常负责创建线程。</p>
<h2 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorService</span> <span class="keyword">extends</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 终止线程池</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    <span class="comment">// 提交任务</span></span><br><span class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span></span>;</span><br><span class="line"></span><br><span class="line">    Future&lt;?&gt; submit(Runnable task);</span><br><span class="line">    <span class="comment">// 集中处理任务</span></span><br><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br><span class="line">        <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span><br><span class="line">                                  <span class="keyword">long</span> timeout, TimeUnit unit)</span><br><span class="line">        <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ExecutorService 更像是对 Executor 的补充，提供终止线程池、提交任务和集中处理任务。</p>
<h2 id="AbstractExecutorService"><a href="#AbstractExecutorService" class="headerlink" title="AbstractExecutorService"></a>AbstractExecutorService</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractExecutorService</span> <span class="keyword">implements</span> <span class="title">ExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 装饰任务</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">RunnableFuture&lt;T&gt; <span class="title">newTaskFor</span><span class="params">(Runnable runnable, T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FutureTask&lt;T&gt;(runnable, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">RunnableFuture&lt;T&gt; <span class="title">newTaskFor</span><span class="params">(Callable&lt;T&gt; callable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FutureTask&lt;T&gt;(callable);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AbstractExecutorService 除了实现 <code>submit()</code> 和 <code>invoke()</code> 相关的方法外，还新增了两个装饰任务的方法 <code>newTaskFor()</code>。这两个方法在新增任务的时候会被调用。</p>
<h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><p>官方推荐使用 Executors 创建线程池，默认创建的是 ThreadPoolExecutor，当然也可以继承 ThreadPoolExecutor， 并使用自己定义的线程池。为了简便，以下实例直接从 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html" target="_blank" rel="noopener"><em>api 文档</em></a>  中搬运过来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkService</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ServerSocket serverSocket;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ExecutorService pool;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NetworkService</span><span class="params">(<span class="keyword">int</span> port, <span class="keyword">int</span> poolSize)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">    pool = Executors.newFixedThreadPool(poolSize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// run the service</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        pool.execute(<span class="keyword">new</span> Handler(serverSocket.accept()));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Socket socket;</span><br><span class="line">  Handler(Socket socket) &#123; <span class="keyword">this</span>.socket = socket; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// read and service request on socket</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>终止线程池的方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shutdownAndAwaitTermination</span><span class="params">(ExecutorService pool)</span> </span>&#123;</span><br><span class="line">  pool.shutdown(); <span class="comment">// Disable new tasks from being submitted</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Wait a while for existing tasks to terminate</span></span><br><span class="line">    <span class="keyword">if</span> (!pool.awaitTermination(<span class="number">60</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">      pool.shutdownNow(); <span class="comment">// Cancel currently executing tasks</span></span><br><span class="line">      <span class="comment">// Wait a while for tasks to respond to being cancelled</span></span><br><span class="line">      <span class="keyword">if</span> (!pool.awaitTermination(<span class="number">60</span>, TimeUnit.SECONDS))</span><br><span class="line">          System.err.println(<span class="string">"Pool did not terminate"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">    <span class="comment">// (Re-)Cancel if current thread also interrupted</span></span><br><span class="line">    pool.shutdownNow();</span><br><span class="line">    <span class="comment">// Preserve interrupt status</span></span><br><span class="line">    Thread.currentThread().interrupt();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>使用起来很简单，只要将需要执行的任务提交给线程池即可，线程管理、调度等都会帮你搞定。但是，只有这样的功能足够优秀么？</p>
<p>首先有个概念，<strong>线程池“雇佣了”多名工人去执行任务</strong>。工人指的就是线程池中的线程，任务指的是原本需要创建的线程（现在交给了线程池执行）。所以节省了线程频繁创建和销毁的开销，并且可以控制线程占用资源。<br>ThreadPoolExecutor 还提供核心工人数的设置、预创建工人、创建新工人的 factory、工人存活时间设置、数据结构的设置、四种异常处理策略、hook、清除任务等功能。具有不错的灵活性和健壮性。</p>
<p>说了这么多，最想了解的还是对线程管理的那一块，很明显，就是 <code>execute()</code> 方法了。其余的设计放到后面再进行阅读。所以，接下来阅读的是 <code>execute()</code> 方法。</p>
<h1 id="execute-方法"><a href="#execute-方法" class="headerlink" title="execute 方法"></a>execute 方法</h1><div class="note success"><p>execute 方法负责创建线程和安排任务，可以说是一个调度者，考虑什么时候要加工人，安排任务需要注意什么。也是线程管理的关键。</p></div>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Proceed in 3 steps:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class="line"><span class="comment">     * start a new thread with the given command as its first</span></span><br><span class="line"><span class="comment">     * task.  The call to addWorker atomically checks runState and</span></span><br><span class="line"><span class="comment">     * workerCount, and so prevents false alarms that would add</span></span><br><span class="line"><span class="comment">     * threads when it shouldn't, by returning false.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2. If a task can be successfully queued, then we still need</span></span><br><span class="line"><span class="comment">     * to double-check whether we should have added a thread</span></span><br><span class="line"><span class="comment">     * (because existing ones died since last checking) or that</span></span><br><span class="line"><span class="comment">     * the pool shut down since entry into this method. So we</span></span><br><span class="line"><span class="comment">     * recheck state and if necessary roll back the enqueuing if</span></span><br><span class="line"><span class="comment">     * stopped, or start a new thread if there are none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3. If we cannot queue task, then we try to add a new</span></span><br><span class="line"><span class="comment">     * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class="line"><span class="comment">     * and so reject the task.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>execute()</code> 方法做的是添加工人或将任务添加到工作队列中。其中的逻辑如下：</p>
<ul>
<li>如果工人数量小于核心线程数量，则添加工人，并将任务作为初始任务给这个工人</li>
<li>否则将任务添加到工作队列中（<code>workQueue.offer(command)</code>），并做二次校验（校验是否应该添加工人）</li>
<li>尝试添加核心线程数以外的工人，如果仍失败，则拒绝本次任务的提交</li>
</ul>
<p>看到这里，是不是觉得几行代码就将核心工程完成了！那么，任务交给谁去完成了呢？这就需要看一下内部类 Worker 了，所以<strong>真正干活的是工人</strong>。</p>
<h2 id="工人-Worker"><a href="#工人-Worker" class="headerlink" title="工人 Worker"></a>工人 Worker</h2><p>首先看一下工人的日常生活</p>
<div class="note info"><p>此处应有动画 [捂脸]，然而我的前端技术限制了我的想法。总之，工人就是不断地从任务队列中获取任务，然后不断地完成任务。</p></div>
<p><i id="worker_a" class="fa fa-hand-o-down"/><a href="#hook_a"><em>从下面过来的朋友</em></a><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/** Thread this worker is running in.  Null if factory fails. */</span></span><br><span class="line">    <span class="keyword">final</span> Thread thread;</span><br><span class="line">    <span class="comment">/** Initial task to run.  Possibly null. */</span></span><br><span class="line">    Runnable firstTask;</span><br><span class="line"></span><br><span class="line">    Worker(Runnable firstTask) &#123;</span><br><span class="line">        setState(-<span class="number">1</span>); <span class="comment">// inhibit interrupts until runWorker</span></span><br><span class="line">        <span class="keyword">this</span>.firstTask = firstTask;</span><br><span class="line">        <span class="keyword">this</span>.thread = getThreadFactory().newThread(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Delegates main run loop to outer runWorker  */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        runWorker(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span>        </span>&#123; acquire(<span class="number">1</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span>      </span>&#123; release(<span class="number">1</span>); &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">    Thread wt = Thread.currentThread();</span><br><span class="line">    Runnable task = w.firstTask;</span><br><span class="line">    w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">    w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">    <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            w.lock();</span><br><span class="line">            <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">            <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">            <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">            <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                    (Thread.interrupted() &amp;&amp;</span><br><span class="line">                    runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                !wt.isInterrupted())</span><br><span class="line">                wt.interrupt();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                beforeExecute(wt, task);</span><br><span class="line">                Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    task.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    afterExecute(task, thrown);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                task = <span class="keyword">null</span>;</span><br><span class="line">                w.completedTasks++;</span><br><span class="line">                w.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        processWorkerExit(w, completedAbruptly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由于想简单说说这个 Worker 的日常，所以只截取其中一段代码。</p>
<ul>
<li>首先，worker 有两个重要的变量，<code>thread</code> 和 <code>firstTask</code>。</li>
<li>Worker 构造函数中，可以看出，<code>thread</code> 还是 <code>worker</code> 自身，<code>firstTask</code> 是构造时候赋值的，表示第一个任务。</li>
<li>除了构造方法，还有一个方法是 <code>run()</code> 方法，<code>run()</code> 方法调用了 <code>runWorker()</code> 方法。</li>
<li><code>runWorker()</code> 方法，就是在 worker 线程中，不停地 <code>getTask()</code>，然后去调用获取到的任务的 <code>task.run()</code> 方法。也就相当于不停地干着获取到的任务。</li>
</ul>
<div class="note warning"><p>到这里，我们知道了 execute 方法会添加 task 和 worker，然后 worker 只要开始干活了，即 worker 这个线程 <code>start()</code> 了，worker 就会不停地完成 task。<br>那么 worker 又是什么时候开始工作的呢？也就是什么时候开始 start() 的呢？这就要看上面 excute 方法里面调用的 addWorker() 方法。</p></div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">    retry:</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">            ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">                firstTask == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                ! workQueue.isEmpty()))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line">            <span class="keyword">if</span> (wc &gt;= CAPACITY ||</span><br><span class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">break</span> retry;</span><br><span class="line">            c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">            <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                <span class="keyword">continue</span> retry;</span><br><span class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">    Worker w = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        w = <span class="keyword">new</span> Worker(firstTask);</span><br><span class="line">        <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">            mainLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                <span class="keyword">int</span> rs = runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">                    workers.add(w);</span><br><span class="line">                    <span class="keyword">int</span> s = workers.size();</span><br><span class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                        largestPoolSize = s;</span><br><span class="line">                    workerAdded = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">                t.start();</span><br><span class="line">                workerStarted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">            addWorkerFailed(w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> workerStarted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>addWorker 方法只干两件事情</p>
<ul>
<li>在条件允许的情况下，添加工人(<code>compareAndIncrementWorkerCount()</code> 接着new worker() 然后 <code>workers.add(w)</code>)</li>
<li>让工人开始干活（<code>t.start()</code>）</li>
</ul>
<p>好了，到这里，主要的流程都明白了。当然，还有异常处理等流程还没有看，接下来也许会看。那么有几个问题，如果当多个线程同时去获取一个任务的时候怎么处理？怎么保证线程池中的工人数量跟预期的是一样的？（比如，你认为有 10 个工人，实际可能有1000个工人）当任务失败了，是怎么处理工人的呢？…</p>
<h2 id="防止争抢任务"><a href="#防止争抢任务" class="headerlink" title="防止争抢任务"></a>防止争抢任务</h2><p>当多个线程同时获取一个任务的时候，这里线程池是通过阻塞队列这一数据结构，实现在多线程情况下数据的安全性。先来看看 <code>getTask()</code> 方法，<code>getTask()</code> 方法有以下一句。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runnable r = timed ?</span><br><span class="line">    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">    workQueue.take();</span><br></pre></td></tr></table></figure><br><code>timed</code> 是 boolean 类型，条件是设置了核心线程超时或者当前工人数大于核心线程数为 true。不论是 true 还是 false，都是从 workQueue 获取任务。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;</span><br></pre></td></tr></table></figure><br>workQueue 是阻塞队列。BlockingQueue 有多个实现，我们可以挑其中一个常见的来看看，比如 <code>LinkedBlockingQueue</code>。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/** Lock held by take, poll, etc */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Wait queue for waiting takes */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty = takeLock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Lock held by put, offer, etc */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Wait queue for waiting puts */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull = putLock.newCondition();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">final</span> AtomicInteger count = <span class="keyword">this</span>.count;</span><br><span class="line">        <span class="keyword">if</span> (count.get() == capacity)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> c = -<span class="number">1</span>;</span><br><span class="line">        Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;E&gt;(e);</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">this</span>.putLock;</span><br><span class="line">        putLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (count.get() &lt; capacity) &#123;</span><br><span class="line">                enqueue(node);</span><br><span class="line">                c = count.getAndIncrement();</span><br><span class="line">                <span class="keyword">if</span> (c + <span class="number">1</span> &lt; capacity)</span><br><span class="line">                    notFull.signal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            putLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">            signalNotEmpty();</span><br><span class="line">        <span class="keyword">return</span> c &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        E x;</span><br><span class="line">        <span class="keyword">int</span> c = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">final</span> AtomicInteger count = <span class="keyword">this</span>.count;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">this</span>.takeLock;</span><br><span class="line">        takeLock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (count.get() == <span class="number">0</span>) &#123;</span><br><span class="line">                notEmpty.await();</span><br><span class="line">            &#125;</span><br><span class="line">            x = dequeue();</span><br><span class="line">            c = count.getAndDecrement();</span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">1</span>)</span><br><span class="line">                notEmpty.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            takeLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == capacity)</span><br><span class="line">            signalNotFull();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>明显地，每次获取任务的时候，通过 <code>takeLock</code> 和 <code>putLock</code> 保证只有一个线程在 获取/放入 任务，从而防止多个线程获取到同一个任务的尴尬。poll() 方法的实现跟 take() 方法实现类似，这里不再贴上代码。<br>当然，这里也可以学习到如何运用 <code>ReentrantLock</code> 和 <code>Condition</code> 进行阻塞和解掉阻塞的操作。详细的使用，会再开一篇文章进行讨论，以及测试。</p>
<h1 id="线程池状态和工人数"><a href="#线程池状态和工人数" class="headerlink" title="线程池状态和工人数"></a>线程池状态和工人数</h1><p>为什么会把线程池状态和工人数一起说呢？因为在线程池中，线程状态和工人数共同打包成一个整数，然后以掩码的形式对这个整数进行解包获取。掩码是什么呢？简单理解就是与或非运算。</p>
<h2 id="打包成一个整数"><a href="#打包成一个整数" class="headerlink" title="打包成一个整数"></a>打包成一个整数</h2><p>表示状态的代码如下：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runState is stored in the high-order bits</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Packing and unpacking ctl</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure><br>再来看看下面这个表格，你就会理解，哪些是打包的，哪些是解包的，以及这个思路是怎么样的。</p>
<style>
table th:first-of-type {
    width: 15%;
}
</style>

<table>
<thead>
<tr>
<th>变量</th>
<th>二进制</th>
<th>十进制</th>
</tr>
</thead>
<tbody>
<tr>
<td>COUNT_BITS</td>
<td></td>
<td>29</td>
</tr>
<tr>
<td>CAPACITY</td>
<td>00011111111111111111111111111111</td>
<td></td>
</tr>
<tr>
<td>~CAPACITY</td>
<td>11100000000000000000000000000000</td>
<td></td>
</tr>
<tr>
<td>RUNNING</td>
<td>11100000000000000000000000000000</td>
<td>-536870912</td>
</tr>
<tr>
<td>SHUTDOWN</td>
<td>00000000000000000000000000000000</td>
<td>0</td>
</tr>
<tr>
<td>STOP</td>
<td>00100000000000000000000000000000</td>
<td>536870912</td>
</tr>
<tr>
<td>TIDYING</td>
<td>01000000000000000000000000000000</td>
<td>1073741824</td>
</tr>
<tr>
<td>TERMINATED</td>
<td>01100000000000000000000000000000</td>
<td>1610612736</td>
</tr>
</tbody>
</table>
<div class="note success"><p>看到这里，你就会发现整数一共 32 位，前 3 位表示<strong>状态位</strong>，后 29 位表示<strong>工人数</strong>，也就是最多可以有 CAPACITY = (2^29) - 1 个工人数。<br>使用移位以及掩码的设计其实很常见，像雪花算法就有类似的设计～</p></div>
<h2 id="线程池的状态"><a href="#线程池的状态" class="headerlink" title="线程池的状态"></a>线程池的状态</h2><p>其实当你赋予一个对象状态，可以说你给了它生命，状态变化的过程，也就可以称之为<strong>生命周期</strong>。通常这些状态的变化都是有一定的规则去约束的。这里简单地说一下线程池的状态。</p>
<p>线程池的状态如上面表格所示，一共有 5 种。分别为： </p>
<ul>
<li><strong>RUNNING</strong>: 接收新的任务并且处理队列中的任务</li>
<li><strong>SHUTDOWN</strong>: 不接收新的任务，但是处理队列中的任务</li>
<li><strong>STOP</strong>: 不接收新的任务也不处理队列中的任务，并且中断正在执行的任务</li>
<li><strong>TIDYING</strong>: 所有任务都已经终止，工人数为 0，这个状态将会执行 <code>terminated()</code> 方法</li>
<li><strong>TERMINATED</strong>: <code>terminated()</code> 方法已经执行完</li>
</ul>
<p>如果对状态的变化实现感兴趣，可以看一下 <code>advanceRunState()</code> 和 <code>tryTerminate()</code> 这两个方法。特别地，<code>terminated()</code> 是一个 protected 方法，目的在于子类覆盖这个方法时，会在 TIDYING -&gt; TERMINATED 时执行。<br>了解线程池的生命周期，也有助于阅读源码时候的分析。在这里不详细说工人数的增减，可以查看 <code>execute()</code> 方法和 <code>runWorker()</code> 方法。</p>
<h1 id="我们来聊聊设计"><a href="#我们来聊聊设计" class="headerlink" title="我们来聊聊设计"></a>我们来聊聊设计</h1><p>起初我想看 <code>ThreadPoolExecutor</code> 线程池的源码，是因为好奇它是怎么完成线程池概念的，以及我想学习一个框架是怎么设计的。因为最近我在项目中想重新设计某个模块的结构，尝试设计，但是失败了，所以想借鉴一下。</p>
<p>其实只是单纯地实现某个功能，这个模块可以不用设计，但是，只要想让这个模块好用，也就是灵活性和扩展性好，那么就需要花心思了。想要窥探一个框架的扩展性，我觉得可以从 <strong>构造方法</strong> 和 <strong>protected</strong> 方法入手。</p>
<h2 id="ThreadPoolExecutor-的构造方法"><a href="#ThreadPoolExecutor-的构造方法" class="headerlink" title="ThreadPoolExecutor 的构造方法"></a>ThreadPoolExecutor 的构造方法</h2><p>直接看参数最多的构造方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里有核心线程数和最大线程数的设置，线程存活时间的设置，有数据结构阻塞队列的设置，线程工厂的设置，拒绝异常处理的设置(任务被拒绝)。可以看得出来，一般都把常用的配置放置到构造函数中，给使用者进行选择。当然，也可以通过 <code>set()</code> 方法进行设置。</p>
<p>而像 <code>allowCoreThreadTimeOut()</code>，<code>ensurePrestart()</code>等配置，则没有体现在构造函数上。当然，像功能上的方法，则肯定不能在构造函数中了，比如 <code>remove(Runnable task)</code>，<code>purge()</code>。</p>
<h2 id="protected-方法"><a href="#protected-方法" class="headerlink" title="protected 方法"></a>protected 方法</h2><p>首先从 <code>ThreadPoolExecutor</code> 的父类 <code>AbstractExecutorService</code> 开始。</p>
<h3 id="newTaskFor"><a href="#newTaskFor" class="headerlink" title="newTaskFor"></a>newTaskFor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">RunnableFuture&lt;T&gt; <span class="title">newTaskFor</span><span class="params">(Runnable runnable, T value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FutureTask&lt;T&gt;(runnable, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">RunnableFuture&lt;T&gt; <span class="title">newTaskFor</span><span class="params">(Callable&lt;T&gt; callable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FutureTask&lt;T&gt;(callable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里提供默认包装任务的实现，并返回了包装后的结果。这里有<strong>很重要</strong>的一点，至少对我来说很重要，即包装之后返回了一个接口。<br>仔细想一下，为什么有这么一个返回，本身 <code>Runnable.run()</code> 是没有返回的；为什么返回的是接口。可能你在编程中，会遇到返回固定类型的，比如某个请求后指定的返回对象；会遇到返回某中数据类型的，其实也是接口，比如 <code>Map</code>、<code>TreeMap</code>等；会遇到返回抽象类型的，抽象类型有公共的一些变量；会遇到根据参数，通过反射获取返回类型的。</p>
<p>返回类型的设计五花八门，各有各的好处，当然有些坏处也特别明显(就是扩展性不好，使用起来不够顺手)。我也是最近才发现这种设计的，这种设计其实在很多源码当中<strong>经常使用</strong>。<br>就算返回很简单，也可以包装一下，为的就是利用面向对象的多态性质。比如 <code>javax.xml.ws.Response</code> 接口，其实返回的是 <code>Map&lt;String,Object&gt;</code>，但就是要来这么一手，啊哈哈哈。</p>
<h3 id="beforeExecute、afterExecute-和-terminated"><a href="#beforeExecute、afterExecute-和-terminated" class="headerlink" title="beforeExecute、afterExecute 和 terminated"></a>beforeExecute、afterExecute 和 terminated</h3><p><code>beforeExecute()</code>、<code>afterExecute()</code> 就是所谓的 hook(不知道如何正确解释 hook =。=)。这个两个方法使用在 <i id="hook_a" class="fa fa-hand-o-up"/><a href="#worker_a"><em>runworker()</em></a> 中，可以在执行任务前后做点什么。</p>
<div class="note success"><p>将动作延后到子类当中，这样的设计也是非常常见的。</p></div>
<p><code>terminated()</code> 同样如此，详细可以查看 <code>tryTerminate()</code> 方法。</p>
<h3 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h3><p>还有一个 <code>finalize()</code> 方法，但是这个是 Object 的方法，是在对象没有被引用，GC 之前会调用的方法。通常进行释放资源等操作。</p>
<h2 id="如何去设计"><a href="#如何去设计" class="headerlink" title="如何去设计"></a>如何去设计</h2><p>对于面向对象，我一直在摸索（虽然也没摸索多久～），我也没有什么好的经验。只能在这里立 flag，然后去实践，然后再总结，再实践…</p>
<p>但是把线程池一路看下来，我决定按照以下思路去进行实践，以后有机会再回来说明效果如何。大致就是先设计 api，然后再去实现。</p>
<ul>
<li>首先确定模块的核心功能，并定义为接口。比如这里的 <code>Executor</code> 接口</li>
<li>补充必要的辅助功能，并继承核心接口</li>
<li>接口的参数和返回值可以考虑使用接口，充分发挥多态</li>
<li>围绕核心功能进行实现，实现的时候将职责分开，谁该干嘛就交给谁干</li>
<li>最后将常用的配置放到构造函数，并且必要时开放一些方法给子类去实现</li>
<li>如有必要，提供工厂，用于创建常用配置的实现。如 <code>Executors</code></li>
</ul>
<!-- ThreadPool 的 defaultThreadFactory 创建的线程是同一个 ThreadGroup 的，线程优先级为 NORM_PRIORITY 的非守护线程

-->]]></content>
      <categories>
        <category>阅读源码</category>
      </categories>
      <tags>
        <tag>jdk</tag>
        <tag>threadPool</tag>
      </tags>
  </entry>
  <entry>
    <title>生产问题-spring quartz 暂停</title>
    <url>/post/spring-quartz/</url>
    <content><![CDATA[<p>前几天生产上出现一个问题，使用 spring 集成 quartz 定时器无故停住了，重启又好了。导致一些功能受到限制，查询和沟通了一段时间才解决。</p>
<p>描述：表象，订单状态全部卡在了一个状态下，不再改变；日志，定时器执行一段时间后不再执行，而且是所有的定时器都不执行了。</p>
<a id="more"></a>
<h1 id="开始思考"><a href="#开始思考" class="headerlink" title="开始思考"></a>开始思考</h1><p>定时器卡住了的原因可能是：</p>
<ul>
<li>jvm 内存爆了，导致应用停止了（第一反应是这个～因为定时器都没有设置 concurrent = false）</li>
<li>线程阻塞了，或者在等待，死锁了</li>
</ul>
<h1 id="spring-集成-quartz"><a href="#spring-集成-quartz" class="headerlink" title="spring 集成 quartz"></a>spring 集成 quartz</h1><div class="note success"><p>生产上使用的 spring 版本为 3.0.5</p></div>
<p>在 <a href="https://docs.spring.io/spring/docs/3.2.18.RELEASE/spring-framework-reference/htmlsingle/#scheduling" target="_blank" rel="noopener"><em>spring 3.2.18 文档</em></a> 看了半天才明白 spring 的定时器有两类，一类完全是 spring 代码里面编写的，一类是是集成了 <a href="http://quartz-scheduler.org/" target="_blank" rel="noopener"><em>Quartz</em></a>。。。</p>
<h2 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 定时器注册工厂 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"SpringJobSchedulerFactoryBean"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"triggers"</span>&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;ref bean=<span class="string">"ftp-scan-trigger"</span>/&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 定时器配置 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"ftp-scan-trigger"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerBean"</span>&gt;</span><br><span class="line">    &lt;property name="jobDetail" ref="ftp-scan-jobDetail"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name="cronExpression" value="0 0/1 * * * ?"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 任务配置 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"ftp-scan-jobDetail"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"targetObject"</span>&gt;</span><br><span class="line">        &lt;ref bean=<span class="string">"ftp-scan-jobBean"</span>/&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">"targetMethod"</span>&gt;</span><br><span class="line">        &lt;value&gt;execute&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><img src="/post/spring-quartz/class_uml.png" class="">
<h2 id="看一些代码"><a href="#看一些代码" class="headerlink" title="看一些代码"></a>看一些代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerFactoryBean</span> <span class="keyword">extends</span> <span class="title">SchedulerAccessor</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Scheduler</span>&gt;, <span class="title">BeanNameAware</span>, <span class="title">ApplicationContextAware</span>, <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span>, <span class="title">SmartLifecycle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; schedulerFactoryClass = StdSchedulerFactory<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        SchedulerFactory schedulerFactory = (SchedulerFactory)BeanUtils.instantiateClass(<span class="keyword">this</span>.schedulerFactoryClass);</span><br><span class="line">		</span><br><span class="line">	...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认使用的是 org.quartz.impl.StdSchedulerFactory。StdSchedulerFactory 代码就不贴了，从中可以看出，StdSchedulerFactory 从 quartz.properties 获取相关配置。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">org.quartz.scheduler.instanceName = DefaultQuartzScheduler</span><br><span class="line">org.quartz.scheduler.rmi.export = <span class="literal">false</span></span><br><span class="line">org.quartz.scheduler.rmi.proxy = <span class="literal">false</span></span><br><span class="line">org.quartz.scheduler.wrapJobExecutionInUserTransaction = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool</span><br><span class="line">org.quartz.threadPool.threadCount = <span class="number">10</span></span><br><span class="line">org.quartz.threadPool.threadPriority = <span class="number">5</span></span><br><span class="line">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">org.quartz.jobStore.misfireThreshold = <span class="number">60000</span></span><br><span class="line"></span><br><span class="line">org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore</span><br></pre></td></tr></table></figure>
<div class="note warning"><p>再进一步看 StdSchedulerFactory 代码（这里就不贴了，太长了~），可以知道使用的线程池为 org.quartz.simpl.SimpleThreadPool，默认为 10 个线程，并且配置在同一个 SchedulerFactoryBean 下的定时器使用的是同一个线程池。</p></div>
<h1 id="开始寻找"><a href="#开始寻找" class="headerlink" title="开始寻找"></a>开始寻找</h1><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>在生产上看了机器物理内存占用，发现没有什么问题（现在想想，真的是搞笑～其实查看 jvm 内存使用用情况可以使用 jmap 查看）。日志上也没有找到 OufOfMemory。</p>
<p>其实一般情况下，代码没有递归，没有大数量的循环，是不会产生内存溢出的，除非 jvm 参数设置得特别小。</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p><code>jstack pid</code> 发现线程池中，所有线程都在干同一件事情<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">"SpringJobSchedulerFactoryBean_Worker-9"</span> prio=<span class="number">10</span> tid=<span class="number">0x00007f63cc35b000</span> nid=<span class="number">0x13fa</span> runnable [<span class="number">0x00007f6444aec000</span>]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">	at java.net.SocketInputStream.socketRead0(Native Method)</span><br><span class="line">	at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">129</span>)</span><br><span class="line">	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:<span class="number">264</span>)</span><br><span class="line">	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:<span class="number">306</span>)</span><br><span class="line">	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:<span class="number">158</span>)</span><br><span class="line">	- locked &lt;<span class="number">0x0000000715c70950</span>&gt; (a java.io.InputStreamReader)</span><br><span class="line">	at java.io.InputStreamReader.read(InputStreamReader.java:<span class="number">167</span>)</span><br><span class="line">	at java.io.BufferedReader.fill(BufferedReader.java:<span class="number">136</span>)</span><br><span class="line">	at java.io.BufferedReader.readLine(BufferedReader.java:<span class="number">299</span>)</span><br><span class="line">	- locked &lt;<span class="number">0x0000000715c70950</span>&gt; (a java.io.InputStreamReader)</span><br><span class="line">	at java.io.BufferedReader.readLine(BufferedReader.java:<span class="number">362</span>)</span><br><span class="line">	at org.apache.commons.net.ftp.FTPFileEntryParserImpl.readNextEntry(FTPFileEntryParserImpl.java:<span class="number">53</span>)</span><br><span class="line">	at org.apache.commons.net.ftp.FTPListParseEngine.readStream(FTPListParseEngine.java:<span class="number">128</span>)</span><br><span class="line">	at org.apache.commons.net.ftp.FTPListParseEngine.readServerList(FTPListParseEngine.java:<span class="number">104</span>)</span><br><span class="line">	at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:<span class="number">3302</span>)</span><br><span class="line">	at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:<span class="number">3271</span>)</span><br><span class="line">	at org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:<span class="number">2930</span>)</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line"><span class="string">"SpringJobSchedulerFactoryBean_Worker-8"</span> prio=<span class="number">10</span> tid=<span class="number">0x00007f64050ac800</span> nid=<span class="number">0x13f9</span> runnable [<span class="number">0x00007f6444b2d000</span>]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">	at java.net.SocketInputStream.socketRead0(Native Method)</span><br><span class="line">	at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">129</span>)</span><br><span class="line">	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:<span class="number">264</span>)</span><br><span class="line">	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:<span class="number">306</span>)</span><br><span class="line">	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:<span class="number">158</span>)</span><br><span class="line">	- locked &lt;<span class="number">0x0000000716242610</span>&gt; (a java.io.InputStreamReader)</span><br><span class="line">	at java.io.InputStreamReader.read(InputStreamReader.java:<span class="number">167</span>)</span><br><span class="line">	at java.io.BufferedReader.fill(BufferedReader.java:<span class="number">136</span>)</span><br><span class="line">	at java.io.BufferedReader.readLine(BufferedReader.java:<span class="number">299</span>)</span><br><span class="line">	- locked &lt;<span class="number">0x0000000716242610</span>&gt; (a java.io.InputStreamReader)</span><br><span class="line">	at java.io.BufferedReader.readLine(BufferedReader.java:<span class="number">362</span>)</span><br><span class="line">	at org.apache.commons.net.ftp.FTPFileEntryParserImpl.readNextEntry(FTPFileEntryParserImpl.java:<span class="number">53</span>)</span><br><span class="line">	at org.apache.commons.net.ftp.FTPListParseEngine.readStream(FTPListParseEngine.java:<span class="number">128</span>)</span><br><span class="line">	at org.apache.commons.net.ftp.FTPListParseEngine.readServerList(FTPListParseEngine.java:<span class="number">104</span>)</span><br><span class="line">	at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:<span class="number">3302</span>)</span><br><span class="line">	at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:<span class="number">3271</span>)</span><br><span class="line">	at org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:<span class="number">2930</span>)</span><br><span class="line">	...</span><br></pre></td></tr></table></figure></p>
<p>都在 listFiles。然后从代码中查看到，有个 ftp 出现了卡住现象，所谓的假死。<br>查到这里就很容易得出结论了，由于线程池资源全部被占用，导致定时器卡死，而导致线程卡住的原因是，一个路径下的文件数量太多了。</p>
<h1 id="最后处理"><a href="#最后处理" class="headerlink" title="最后处理"></a>最后处理</h1><p>清理了路径下的文件，然后再进行代码上的优化。</p>
<ul>
<li>把容易卡住的定时器分配到另外一个线程池中(添加一个多一个 <code>SchedulerFactoryBean</code>)，并扩大线程池的线程数</li>
<li>缓存 listFiles 出来的文件名称，去除大量的无效操作（这是在查询问题过程中发现的）</li>
<li>如果后面观察到文件数量仍然过多，则需要提高每个线程消耗消耗文件的能力</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"SpringJobSchedulerFactoryBean"</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"triggers"</span>&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;ref bean=<span class="string">"ftp-scan-trigger"</span>/&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">"configLocation"</span> value=<span class="string">"classpath:quartz.properties"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<p>然后在 quartz.properites 中配置。</p>
<div class="note warning"><p>写在最后，分析类似的问题，还是多使用分析工具～因为发现当初我的猜测跟实践有很大的差别[捂脸]</p></div>
]]></content>
      <categories>
        <category>生产问题</category>
      </categories>
      <tags>
        <tag>spring-quartz</tag>
        <tag>Quartz</tag>
        <tag>jstack</tag>
      </tags>
  </entry>
  <entry>
    <title>【系统学习-mysql】【一】架构和存储引擎</title>
    <url>/post/sys-learn-mysql-01/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>前段时间一直在聊并发编程，估计都腻了吧，其实还有一些并发编程的东西可以聊一下。我们还是先换个主题吧，后面有机会再聊一下并发编程。我们今天来聊一下 Mysql，先来聊一下抽象一点的东西，聊聊 mysql 的大概架构和存储引擎。所以今天聊的内容有</p>
<ul>
<li>性能衡量标准</li>
<li>逻辑架构</li>
<li>存储引擎</li>
</ul>
<a id="more"></a>
<h2 id="性能衡量标准"><a href="#性能衡量标准" class="headerlink" title="性能衡量标准"></a>性能衡量标准</h2><p>tps 和 qps</p>
<ul>
<li>TPS(Transactions Per Second）每秒传输的事物处理个数：TPS = (COM_COMMIT + COM_ROLLBACK)/UPTIME</li>
<li>QPS(Questions Per Second) 每秒查询速度：QPS = QUESTIONS/UPTIME</li>
</ul>
<p>我们国内比较流行这样的查询去衡量数据库的使用情况，也算一种监控吧，当然还有很多指标可以监控</p>
<h3 id="计算-tps"><a href="#计算-tps" class="headerlink" title="计算 tps"></a>计算 tps</h3><p>由于 mysql5.7 之后我没找到 com_commit 和 com_rollback 这两个系统状态存在哪张表里，所以就将就一下吧。当然也可以设置 show_compatibility_56 解决，只是我懒～毕竟我没有要成为 DBA</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> performance_schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'com_commit'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'com_rollback'</span>;</span><br><span class="line"><span class="keyword">select</span> VARIABLE_VALUE <span class="keyword">into</span> @uptime <span class="keyword">from</span> global_status <span class="keyword">where</span> VARIABLE_NAME = <span class="string">'uptime'</span>;</span><br><span class="line"><span class="comment">-- 这里com_commit 和 com_rollback 换上面查出来的结果</span></span><br><span class="line"><span class="keyword">select</span> (com_commit + com_rollback)/@uptime;</span><br></pre></td></tr></table></figure>
<h3 id="计算-qps"><a href="#计算-qps" class="headerlink" title="计算 qps"></a>计算 qps</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> performance_schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> VARIABLE_VALUE <span class="keyword">into</span> @questions <span class="keyword">from</span> global_status <span class="keyword">where</span> VARIABLE_NAME = <span class="string">'Questions'</span>;</span><br><span class="line"><span class="keyword">select</span> VARIABLE_VALUE <span class="keyword">into</span> @uptime <span class="keyword">from</span> global_status <span class="keyword">where</span> VARIABLE_NAME = <span class="string">'uptime'</span>;</span><br><span class="line"><span class="keyword">select</span> @questions/@uptime;</span><br></pre></td></tr></table></figure>
<h3 id="mysqlslap-压测工具"><a href="#mysqlslap-压测工具" class="headerlink" title="mysqlslap 压测工具"></a>mysqlslap 压测工具</h3><p>mysqlslap 这个压测工具是自带的工具，一般用来给 mysql 服务器做基准测试，协助后续使用中的监控和优化。<code>mysqlslap --help</code> 或 <code>man mysqlslap</code> 可以查看使用手册，不过这个是在 unix 类系统上的命令，其实 <a href="https://dev.mysql.com/doc/refman/5.7/en/mysqlslap.html" target="_blank" rel="noopener">mysql 文档</a> 上也可以看。当然我们可以直接看看是怎么使用的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqlslap -uroot -p123456 --concurrency=1,50,100,200 --iterations=3 --number-char-cols=5 --number-int-cols=5 --auto-generate-sql --auto-generate-sql-add-autoincrement --engine=myisam,innodb --create-schema='test'</span><br><span class="line"></span><br><span class="line">// 输出结果</span><br><span class="line">Benchmark</span><br><span class="line">	Running for engine myisam</span><br><span class="line">	Average number of seconds to run all queries: 0.000 seconds</span><br><span class="line">	Minimum number of seconds to run all queries: 0.000 seconds</span><br><span class="line">	Maximum number of seconds to run all queries: 0.000 seconds</span><br><span class="line">	Number of clients running queries: 1</span><br><span class="line">	Average number of queries per client: 0</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">	Running for engine myisam</span><br><span class="line">	Average number of seconds to run all queries: 0.023 seconds</span><br><span class="line">	Minimum number of seconds to run all queries: 0.010 seconds</span><br><span class="line">	Maximum number of seconds to run all queries: 0.049 seconds</span><br><span class="line">	Number of clients running queries: 50</span><br><span class="line">	Average number of queries per client: 0</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">	Running for engine myisam</span><br><span class="line">	Average number of seconds to run all queries: 0.025 seconds</span><br><span class="line">	Minimum number of seconds to run all queries: 0.018 seconds</span><br><span class="line">	Maximum number of seconds to run all queries: 0.036 seconds</span><br><span class="line">	Number of clients running queries: 100</span><br><span class="line">	Average number of queries per client: 0</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">	Running for engine myisam</span><br><span class="line">	Average number of seconds to run all queries: 0.111 seconds</span><br><span class="line">	Minimum number of seconds to run all queries: 0.047 seconds</span><br><span class="line">	Maximum number of seconds to run all queries: 0.161 seconds</span><br><span class="line">	Number of clients running queries: 200</span><br><span class="line">	Average number of queries per client: 0</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">	Running for engine innodb</span><br><span class="line">	Average number of seconds to run all queries: 0.029 seconds</span><br><span class="line">	Minimum number of seconds to run all queries: 0.029 seconds</span><br><span class="line">	Maximum number of seconds to run all queries: 0.029 seconds</span><br><span class="line">	Number of clients running queries: 1</span><br><span class="line">	Average number of queries per client: 0</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">	Running for engine innodb</span><br><span class="line">	Average number of seconds to run all queries: 0.159 seconds</span><br><span class="line">	Minimum number of seconds to run all queries: 0.153 seconds</span><br><span class="line">	Maximum number of seconds to run all queries: 0.172 seconds</span><br><span class="line">	Number of clients running queries: 50</span><br><span class="line">	Average number of queries per client: 0</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">	Running for engine innodb</span><br><span class="line">	Average number of seconds to run all queries: 0.342 seconds</span><br><span class="line">	Minimum number of seconds to run all queries: 0.310 seconds</span><br><span class="line">	Maximum number of seconds to run all queries: 0.392 seconds</span><br><span class="line">	Number of clients running queries: 100</span><br><span class="line">	Average number of queries per client: 0</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">	Running for engine innodb</span><br><span class="line">	Average number of seconds to run all queries: 0.432 seconds</span><br><span class="line">	Minimum number of seconds to run all queries: 0.382 seconds</span><br><span class="line">	Maximum number of seconds to run all queries: 0.467 seconds</span><br><span class="line">	Number of clients running queries: 200</span><br><span class="line">	Average number of queries per client: 0</span><br></pre></td></tr></table></figure>
<p>可以看到 myisam 引擎还是比 innodb 的查询速度快不少的，那稍微聊一下 mysqlslap 一些参数的意义吧，当然也可以看上面那份 mysql文档，有更详细的说明</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">-u 用户 -p 密码</span><br><span class="line">--concurrency 查询并发数  --iterations 迭代次数</span><br><span class="line">--number-char-cols 多少列字符类型的数据</span><br><span class="line">--number-<span class="keyword">int</span>-cols  多少列整型的数据</span><br><span class="line">--auto-<span class="keyword">generate</span>-sql 自动生成sql语句</span><br><span class="line">--auto-<span class="keyword">generate</span>-sql-add-autoincrement 生成的表添加自增列</span><br><span class="line">--engine 需要测试的引擎</span><br><span class="line">--create-schema schema名称(数据库名称)</span><br></pre></td></tr></table></figure>
<p>当然，还有一些需要开启 mysql debug 才能测试的，比如 cpu 和 内存信息等，只是再一次，因为我毕竟不想成为 DBA，我又懒了，大家可以去网上查找一下怎么开启</p>
<h2 id="逻辑架构"><a href="#逻辑架构" class="headerlink" title="逻辑架构"></a>逻辑架构</h2><img src="/post/sys-learn-mysql-01/mysql-engine-overview.png" class="">
<p>mysql 的逻辑架构可以分为以下四个层次</p>
<ul>
<li>连接层<ul>
<li>图中上面 Connectors， Connection Pool 连接池 和左边 管理和安全等组成了连接层</li>
<li>mysql 是多用户连接的，每连接一个就会创建一个线程；接着会进行安全验证等</li>
</ul>
</li>
<li>服务层<ul>
<li>图中四个框框，SQL Interface 接口，Parser 解析器，Optimizer 优化器，Caches &amp; Buffers 缓存 这几个部分组成</li>
<li>sql 执行(查询)的过程。先判断是否命中缓存<ul>
<li>如果没有命中交给 Parser 进行语义分析，然后再给 Optimizer 优化，接着执行语句返回结果</li>
<li>如果命中缓存，则直接返回结果，或者直接拿到解析优化后的执行语句</li>
</ul>
</li>
</ul>
</li>
<li>存储引擎层<ul>
<li>图中中下长长的框 Pluggable Storage Engines 是存储引擎层</li>
</ul>
</li>
<li>文件层</li>
</ul>
<h3 id="mysql-缓存"><a href="#mysql-缓存" class="headerlink" title="mysql 缓存"></a>mysql 缓存</h3><p>mysql 缓存分为</p>
<ul>
<li>sql 语句缓存。节省执行计划的时间</li>
<li>缓存数据(生产不建议开启)<ul>
<li>不建议开启是因为，很多操作都会引起缓存失效，这会给数据库带来更多的压力，一般建议在应用上做缓存，比如使用 redis 等</li>
<li>直接缓存数据，query_cache_type 是否开启缓存，这个需要修改配置文件</li>
<li>query_cache_size 缓存大小。<code>set GLOBAL query_cache_size = 1024000</code></li>
</ul>
</li>
</ul>
<h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>我们现在最常用的存储引擎是 innodb 和 myisam，然后还有很多其他引擎，可以通过 <code>show engines</code>查看支持哪一些引擎，甚至可以安装引擎，因为 mysql 的存储引擎是插件化的</p>
<p>先来说一下怎创建不同存储引擎的表，其实就是在 engine 上填上不同的存储引擎名称</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`myisamt`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure>
<h3 id="myisam"><a href="#myisam" class="headerlink" title="myisam"></a>myisam</h3><p>data 文件，<code>show global variables like &#39;datadir&#39;</code> 可以查看到数据文件的位置，myisam 存储引擎的表会有三个文件，具体如下</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 这里我的数据库名称是 test，所以在 test 路径下</span><br><span class="line"><span class="comment"># pwd</span></span><br><span class="line"><span class="regexp">/var/</span>lib<span class="regexp">/mysql/</span>test</span><br><span class="line"></span><br><span class="line"><span class="comment"># tree</span></span><br><span class="line">├── myisamt.frm     <span class="comment"># 存储表结构 任何存储引擎都会有</span></span><br><span class="line">├── myisamt.MYD   <span class="comment"># 数据库文件</span></span><br><span class="line">└── myisamt.MYI     <span class="comment"># 索引文件</span></span><br></pre></td></tr></table></figure>
<p>myisam 特性</p>
<ul>
<li>并发特性：表级锁</li>
<li>支持全文搜索（后来 innodb 也支持了）</li>
<li>支持索引数据压缩<ul>
<li>使用 myisampack 工具进行压缩</li>
<li>myisampack -b -f xxx.myi</li>
</ul>
</li>
</ul>
<p>myisam 适用非事务、只读、空间类应用（后来 mysql5.7 innodb 也支持空间索引了～）</p>
<h3 id="innodb"><a href="#innodb" class="headerlink" title="innodb"></a>innodb</h3><p>data 文件</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">├── innodbt.frm     <span class="meta"># 存储表结构</span></span><br><span class="line">├── innodbt.ibd     <span class="meta"># 数据+索引文件</span></span><br></pre></td></tr></table></figure>
<p>特性</p>
<ul>
<li>事务性。ACID</li>
<li>行级锁</li>
<li>Redo log 和 undo log，提交事务的时候要把事务日志写到这里</li>
</ul>
<p>跟 myisam 区别</p>
<ul>
<li>innodb 行级锁，并发性更高</li>
<li>innodb有外键和事务</li>
<li>innodb有系统表空间和独立表空间</li>
<li>myisam不能缓存真实的数据，只缓存索引</li>
</ul>
<p>所以什么是系统表空间和独立表空间呢。innodb_file_per_table 默认开启，表的数据文件和索引会单独一个文件，系统表空间只会创建一个 frm 文件存储表结构，数据和索引全部存到统一的一个文件，很容易想到这样 io 瓶颈会有问题，推荐是使用独立表空间的，默认也是独立表空间</p>
<h3 id="csv"><a href="#csv" class="headerlink" title="csv"></a>csv</h3><p>data 文件</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">├── csvt.CSM   <span class="meta"># 表的元数据，状态信息和数据量</span></span><br><span class="line">├── csvt.CSV    <span class="meta"># 数据文件</span></span><br><span class="line">├── csvt.frm     <span class="meta"># 表结构</span></span><br></pre></td></tr></table></figure>
<p>特性</p>
<ul>
<li>csv 格式存储，可以直接编辑</li>
<li>所有列不能为null</li>
<li>不支持索引</li>
</ul>
<h3 id="archive"><a href="#archive" class="headerlink" title="archive"></a>archive</h3><p>data 文件</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">├── archivet.ARZ    <span class="meta"># 数据文件</span></span><br><span class="line">├── archivet.frm     <span class="meta"># 表结构</span></span><br></pre></td></tr></table></figure>
<p>特性</p>
<ul>
<li>以zlib 对数据进行压缩，磁盘IO更少</li>
<li>只支持 insert 和 select</li>
<li>只允许自增ID列上加索引</li>
</ul>
<p>使用场景 日志和数据采集应用</p>
<h3 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h3><p>没有 data 文件，存在内存中</p>
<p>特性</p>
<ul>
<li>数据存在内存里</li>
<li>支持HASH索引和BTree索引</li>
<li>所有字段固定长度，不支持BLOG和Text 大字段</li>
<li>表级锁</li>
<li>最大大小 max_heap_table_size，设置容量</li>
</ul>
<p>memory 和临时表是不一样的，临时表分为</p>
<ul>
<li>系统创建临时表。系统在执行 sql 语句时，有时候会创建临时表，当表没有超过容量限制的时候，创建的是 memory 表；当超过容量限制的时候，创建的是 myisam 表</li>
<li>用户创建临时表，使用 <code>create temporary table</code> 这种语法去创建，即在正常创建表的前面加 temporary</li>
</ul>
<h3 id="ferderated"><a href="#ferderated" class="headerlink" title="ferderated"></a>ferderated</h3><p>远程访问的表，本地实际没有数据，数据都在远程，本地只保存表结构和远程连接信息</p>
<p>特性</p>
<ul>
<li>远程访问mysql服务器上的表</li>
<li>本地不存储数据，所有数据都在远程</li>
<li>本地需要保存表结构和服务器连接信息</li>
</ul>
<p>使用场景：偶尔的统计分析和手工查询</p>
<p>由于时间的关系，创建的语法这里就直接从 mysql 官方文档贴创建语句了，其实创建的时候多加一个远程连接的信息就可以了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`T1`</span>(</span><br><span class="line">  <span class="string">`A`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>),<span class="keyword">UNIQUE</span> <span class="keyword">KEY</span>(<span class="string">`A`</span>(<span class="number">30</span>))</span><br><span class="line">  ) <span class="keyword">ENGINE</span>=FEDERATED</span><br><span class="line">  <span class="keyword">CONNECTION</span>=<span class="string">'MYSQL://127.0.0.1:3306/TEST/T1'</span>;</span><br></pre></td></tr></table></figure>
<p>但是 ferderated 引擎默认是不开启的，需要修改配置文件，在配置文件上加 ferderated=1。这个大家可以在网上查找一下怎么在 mysql 配置文件上加这个选项</p>
<p>今天我们聊了一下 mysql 大概的逻辑架构，监控 tps 和 qps，最后聊了一下存储引擎。这里只是非常浅了聊了一下，mysql 的内容非常丰富，深入的了解就需要去 <a href="https://dev.mysql.com/doc/refman/5.7/en/preface.html" target="_blank" rel="noopener">mysql官方文档</a> 或者阅读书籍了</p>
]]></content>
      <categories>
        <category>mysql 学习</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>【系统学习-mysql】【二】锁</title>
    <url>/post/sys-learn-mysql-02/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>最近白昼变短，我们也就聊少一点，今天就来聊一下 Mysql 中的锁。其实 Mysql 中锁的概念跟我们之前聊过 java 里面的锁是很像的，共享锁和独占锁，共享锁是可以有多个线程占有的，独占锁是只有一个线程占有，也叫排它锁。当然还有其他锁，比如意向锁、gap锁、next-key锁等等，但是我们现在只聊最常用的。所以我们今天来聊聊以下几个方面</p>
<ul>
<li>锁分类</li>
<li>表的读锁和写锁</li>
<li>行的共享锁(S)和独占锁(X)</li>
<li>常见问题</li>
</ul>
<a id="more"></a>
<h2 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h2><p>Mysql 锁从粒度来分，可以分为 表锁、行锁、页面锁，比如 myisam 存储引擎只支持表锁，而 innodb 支持行锁。所谓表锁就是对整张表进行加锁，行锁是对一行数据进行加锁，类似于 Java 里面锁一个类(虽然锁的是类对象)和锁一个对象。不同粒度的锁性能，使用场景上会有锁差别</p>
<ul>
<li>表锁<ul>
<li>开销小，加锁快</li>
<li>不会死锁，锁粒度大，冲突高，并发低</li>
</ul>
</li>
<li>行锁<ul>
<li>开销大，加锁慢</li>
<li>会死锁，粒度小，冲突低，并发高</li>
</ul>
</li>
<li>页面锁<ul>
<li>开销和冲突介于表级锁和行级锁之间</li>
<li>会死锁</li>
</ul>
</li>
</ul>
<p>我们再来看一下加锁的语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 锁表</span></span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> 表名 <span class="keyword">read</span>/write;</span><br><span class="line"><span class="comment">-- 解锁表</span></span><br><span class="line"><span class="keyword">unlock</span> <span class="keyword">tables</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 行锁需要先开启事务，即 begin; 提交事务后，会释放锁，即 commit/rollback</span></span><br><span class="line"><span class="comment">-- 共享式锁行</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件 <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span></span><br><span class="line"><span class="comment">-- 独占式锁行</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件 <span class="keyword">for</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure>
<p>官方文档<a href="https://dev.mysql.com/doc/refman/5.7/en/lock-tables.html" target="_blank" rel="noopener">Mysql5.7表锁语法</a>。当然 mysql 的锁还有好多种，比如 意向锁、记录所、gap锁、next-key锁、插入意向锁等，我们现在只聊常用的。详细可以参考一下 <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html" target="_blank" rel="noopener">Mysql5.7 InnoDB Locking</a></p>
<h2 id="表的读锁和写锁"><a href="#表的读锁和写锁" class="headerlink" title="表的读锁和写锁"></a>表的读锁和写锁</h2><p>其实 Mysql 的读锁跟共享锁是一样样的，写锁跟独占锁（或者叫排它锁）是一样样的。我们接下来先看看锁之间有什么相互作用，然后再进行相应的测试进行验证，希望大家也做一般验证的操作，这会加深对 mysql 锁的理解</p>
<table>
<thead>
<tr>
<th style="text-align:center">锁类型</th>
<th style="text-align:center">同session同表</th>
<th style="text-align:center">同session不同表</th>
<th style="text-align:center">不同session同表</th>
<th style="text-align:center">不同session不同表</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">读锁</td>
<td style="text-align:center">可以查询/不可以修改</td>
<td style="text-align:center">什么操作都不可以</td>
<td style="text-align:center">可以查询/修改等待</td>
<td style="text-align:center">可以做任何操作</td>
</tr>
<tr>
<td style="text-align:center">写锁</td>
<td style="text-align:center">可以查询修改</td>
<td style="text-align:center">什么操作都不可以</td>
<td style="text-align:center">查询等待/修改等待</td>
<td style="text-align:center">可以做任何操作</td>
</tr>
</tbody>
</table>
<p>大致来说，加读锁(共享锁)，其他session可以读，不可以写；同一session可以读，不可以写。加写锁(排它锁)，其他session不可以读，不可以写；同一session可以读，也可以写。但不管读锁还是写锁，同一session不能对其他表做任何操作，包括查询</p>
<h3 id="表加读锁"><a href="#表加读锁" class="headerlink" title="表加读锁"></a>表加读锁</h3><p>sessionA 加写锁</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> test.myisamt <span class="keyword">read</span>;</span><br><span class="line"><span class="comment">-- 对表加读锁时，不能对数据进行更新。直接报错</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`myisamt`</span>(<span class="string">`id`</span>,<span class="string">`name`</span>)<span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">'aa'</span>);</span><br><span class="line"><span class="keyword">update</span> test.myisamt <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'b'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test.myisamt <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 对表加读锁时，可以对数据进行查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.myisamt;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对表加读锁时，对其他表不能做任何操作(包括修改表结构)，直接报错</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.innodbt;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test.innodbt (<span class="string">`id`</span>) <span class="keyword">values</span> (<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unlock</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure>
<p>sessionB</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 不同session。这里有另外一个session对myisamt加读锁</span></span><br><span class="line"><span class="comment">-- 可以查询</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test.myisamt;</span><br><span class="line"><span class="comment">-- 不能对数据进行更新，进入阻塞状态</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`myisamt`</span>(<span class="string">`id`</span>,<span class="string">`name`</span>)<span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">'aaa'</span>);</span><br><span class="line"><span class="keyword">update</span> test.myisamt <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'b'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test.myisamt <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对其他表可以做任何操作</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.innodbt;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test.innodbt (<span class="string">`id`</span>, <span class="string">`name`</span>) <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">'abc'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="表加写锁"><a href="#表加写锁" class="headerlink" title="表加写锁"></a>表加写锁</h3><p>sessionA 加写锁</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> test.myisamt write;</span><br><span class="line"><span class="comment">-- 对表加写锁时，可以对数据进行更新</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`myisamt`</span>(<span class="string">`id`</span>,<span class="string">`name`</span>)<span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">'aa'</span>);</span><br><span class="line"><span class="keyword">update</span> test.myisamt <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'b'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test.myisamt <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 对表加写锁时，可以对数据进行查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.myisamt;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对表加读锁时，对其他表不能做任何操作(包括修改表结构)，直接报错</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.innodbt;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test.innodbt (<span class="string">`id`</span>) <span class="keyword">values</span> (<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unlock</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure>
<p>sessionB</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 不同session。这里有另外一个session对myisamt加写锁</span></span><br><span class="line"><span class="comment">-- 不可以查询，进入阻塞</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> test.myisamt;</span><br><span class="line"><span class="comment">-- 不能对数据进行更新，进入阻塞状态</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`myisamt`</span>(<span class="string">`id`</span>,<span class="string">`name`</span>)<span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">'aaa'</span>);</span><br><span class="line"><span class="keyword">update</span> test.myisamt <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'b'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test.myisamt <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对其他表可以做任何操作</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.innodbt;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test.innodbt (<span class="string">`id`</span>, <span class="string">`name`</span>) <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">'abc'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="行的共享锁-S-和独占锁-X"><a href="#行的共享锁-S-和独占锁-X" class="headerlink" title="行的共享锁(S)和独占锁(X)"></a>行的共享锁(S)和独占锁(X)</h2><p>innodb 即支持行锁也支持表锁，表锁几乎跟 myisam 的表锁一样，表锁的语法是一样的。<strong>锁行需要先开启事务，并且如果重新开启事务，锁会释放</strong>。</p>
<ul>
<li>行加独占锁(x)时，该事务下可以对数据进行任意的操作；其他事务可以查询，但对锁住的数据更新、获取共享锁、获取独占锁将进入阻塞</li>
<li>行加共享锁(s)时，该事务下可以对数据进行任意的操作；其他事务可以查询、获取共享锁，但对锁住的数据更新、获取独占锁将进入阻塞</li>
</ul>
<p>总的来说，独占锁不能有多个事务同时拥有，共享锁可以；独占锁和共享锁对行数据加锁时，其他事务不能更新该行数据，其他数据可以进行操作。特别地，如果只有事务A加了共享锁，事务A内可以对该数据更新；有其他事务B也加了共享锁，事务A更新该行数据经进入阻塞</p>
<h3 id="行加共享锁"><a href="#行加共享锁" class="headerlink" title="行加共享锁"></a>行加共享锁</h3><p>事务A</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="comment">-- 行加共享锁时</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.innodbt <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span> <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span>;</span><br><span class="line"><span class="comment">-- 可以对加锁的行做任何操作</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.innodbt;</span><br><span class="line"><span class="keyword">update</span> test.innodbt <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'aaa'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test.innodbt <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以对非加锁的行做任何操作</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`innodbt`</span>(<span class="string">`id`</span>,<span class="string">`name`</span>)<span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">'test'</span>);</span><br><span class="line"><span class="keyword">update</span> test.innodbt <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'ttt'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test.innodbt <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以对其他表做任何操作</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.myisamt;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`myisamt`</span>(<span class="string">`id`</span>,<span class="string">`name`</span>)<span class="keyword">VALUES</span>(<span class="number">9</span>,<span class="string">'aaa'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>
<p>事务B</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 另外一个事务加独占锁时</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="comment">-- 可以查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.innodbt;</span><br><span class="line"><span class="comment">-- 更新进入阻塞</span></span><br><span class="line"><span class="keyword">update</span> test.innodbt <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'popp'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取独占锁进入阻塞</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.innodbt <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="comment">-- 获取共享锁成功</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.innodbt <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span> <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span>;</span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>
<h3 id="行加独占锁"><a href="#行加独占锁" class="headerlink" title="行加独占锁"></a>行加独占锁</h3><p>事务A</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="comment">-- 行加独占锁时</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.innodbt <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="comment">-- 可以对加锁的行做任何操作</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.innodbt;</span><br><span class="line"><span class="keyword">update</span> test.innodbt <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'aaa'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test.innodbt <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以对非加锁的行做任何操作</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`innodbt`</span>(<span class="string">`id`</span>,<span class="string">`name`</span>)<span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">'test'</span>);</span><br><span class="line"><span class="keyword">update</span> test.innodbt <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'ttt'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test.innodbt <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以对其他表做任何操作</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.myisamt;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`myisamt`</span>(<span class="string">`id`</span>,<span class="string">`name`</span>)<span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="string">'aaa'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>
<p>事务B</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 另外一个事务加独占锁时</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="comment">-- 可以查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.innodbt;</span><br><span class="line"><span class="comment">-- 更新进入阻塞</span></span><br><span class="line"><span class="keyword">update</span> test.innodbt <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'popp'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取独占锁进入阻塞</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.innodbt <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="comment">-- 获取共享锁进入阻塞</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.innodbt <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span> <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span>;</span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>问题：数据量很大，访问量也很大，白天跟晚上的访问量没什么区别，怎么修改表的字段(修改表结构会锁表)</p>
<p>这时候就可以通过复制表来完成这件事情，然后通过触发器实现数据的同步。先创建新表 A，修改好表结构将原表的数据copy到新表A中，并在原表添加触发器，同步操作到A表中，copy完成后将A表rename为原来的表名，默认会删除原表</p>
<p>当然这样的操作其实已经有工具帮我们实现，基于触发器的<code>pt-online-schema-change</code>。安装这个需要安装 perl 环境，还要安装 <a href="https://www.percona.com/downloads/percona-toolkit/LATEST/" target="_blank" rel="noopener">percona-toolkit 工具集合</a>。使用例子： <code>perl ..\pt-online-schema-change h=127.0.0.1,p=123456,u=root,D=test,t=innodbt --alter &quot;modify name varchar(150) not null default &#39;&#39; &quot; --execute</code> 其中 h 是 host，p是 password，u 是用户，D 是 schema 也可以说是数据库，t 是表名，–alter 是修改的语句</p>
<p>当然还有不是基于触发器的开源工具，<a href="https://github.com/github/gh-ost" target="_blank" rel="noopener">gh-host</a>这个是通过 binlog 进行操作的</p>
<p>今天就聊到这里吧，夜深了，就不聊了，怕吵到别人。</p>
]]></content>
      <categories>
        <category>mysql 学习</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>【系统学习-mysql】【三】事务</title>
    <url>/post/sys-learn-mysql-03/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>今天来浅聊一下 mysql 的事务，我们在业务中，需要确保业务的逻辑正确，比如账户A转给账户B，应该是A的余额减少，B的余额增加，或者用户下一个单，需要创建好几条数据等，这时候一般需要几条 sql 语句去执行，如果只执行了其中一部分 sql，那么业务逻辑就会出现错误，比如只执行了账户A余额的扣减，或者用户下单只创建了一部分数据。需要解决这类问题，我们就可以使用事务。但是当有多个事务需要读取和操作同一条数据的时候，事务之间还需要一定的规则去约定，这时候就有不同级别的隔离性规则。所以我们今天聊一下以下几点</p>
<ul>
<li>开启事务的语法</li>
<li>事务的特性 ACID</li>
<li>事务的隔离性</li>
</ul>
<a id="more"></a>
<h2 id="开启事务的语法"><a href="#开启事务的语法" class="headerlink" title="开启事务的语法"></a>开启事务的语法</h2><p>mysql 开启事务很简单，执行 begin 就完事了。不过要注意，mysql 中<strong>支持事务的存储引擎只有 innodb</strong>，可以通过执行<code>show engines</code>查看存储引擎是否支持事务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">table</span> xxxx;</span><br><span class="line"><span class="comment">-- 提交</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="comment">-- 回滚</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>
<p>其实还有一个叫还原点(savepoint)的东西，只是我们平时没有使用到，savepoint 可以回滚到具体的保存点上，我们来看一下例子。当执行 <code>rollback to savepoint s1</code>后，事务会回滚到<code>s1</code>，即后面两条 update 语句被回滚了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 先开启事务</span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> test.innodbt <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'savepoint1'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">savepoint</span> s1;</span><br><span class="line"><span class="keyword">update</span> test.innodbt <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'savepoint2'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">savepoint</span> s2;</span><br><span class="line"><span class="keyword">update</span> test.innodbt <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'savepoint3'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 回滚到具体的 savepoint</span></span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> <span class="keyword">savepoint</span> s1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<h2 id="事务的特性-ACID"><a href="#事务的特性-ACID" class="headerlink" title="事务的特性 ACID"></a>事务的特性 ACID</h2><p>事务性数据库是可以为一系列数据库操作(begin到commit)提供ACID属性的数据库操作系统。ACID 就是值事务的特性，分别为</p>
<ul>
<li><strong>原子性(Atomicity)</strong>。要么全执行，要么全不执行</li>
<li><strong>一致性(consistency)</strong>。事务对数据的影响必须是符合数据库规则的(约束、触发器等)，不符合规则(比如语句报错)的操作不能影响数据</li>
<li><strong>隔离性(isolation)</strong>。事务之间相互不影响，未完成的事务操作结果在其他事务中不可见(除了 read uncommitted)</li>
<li><strong>持久性(durability)</strong>。事务一旦提交，就永久有效，就算数据库崩溃也不能影响该事务的提交结果。通常是指修改记录不在不稳定的内存中</li>
</ul>
<h2 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h2><p>隔离性决定着在并发情况下，一个事务在操作过程中，别的事务操作对该事务的可见程度。在低隔离级别下，事务可以立即查看到其他事务中未提交的操作；在高隔离级别下，事务可能通过加锁，阻塞住将要操作同样数据的事务，防止别的事务对该事务造成影响。可能这聊的比较抽象，接下来我们一起操作一下就清楚了。在操作之前，我们先来看一下隔离级别有几种</p>
<p><strong>隔离级别依次提高</strong></p>
<ul>
<li><strong>read uncommitted（读未提交）</strong></li>
<li><strong>read committed（读已提交）</strong></li>
<li><strong>repeatable read（可重复读）</strong></li>
<li><strong>serializable（可串行化）</strong></li>
</ul>
<p>mysql5.7 默认的隔离级别是 <code>repeatable read</code>，可以通过执行 <code>show variables like &#39;%tx_isolation%&#39;</code> 查看当前事务的隔离级别</p>
<h3 id="读未提交-amp-脏读"><a href="#读未提交-amp-脏读" class="headerlink" title="读未提交 &amp; 脏读"></a>读未提交 &amp; 脏读</h3><p>read uncommitted，读未提交是指可以读取到其他事务未提交的结果</p>
<p>我们接下来会使用到的数据</p>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">balance</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">300</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">200</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">100</td>
</tr>
</tbody>
</table>
<p>事务A</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将隔离级别设置为读未提交</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> uncommitted;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> test.account <span class="keyword">set</span> balance = balance - <span class="number">50</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>
<p>事务B</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> uncommitted;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="comment">-- 在事务A还未提交的时候，事务B已经可以读取到事务A的修改，即 balance 为 250</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.account <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>脏读是指，事务A做了修改操作但没提交或回滚，事务B读取到了 balance 为 250，然后事务A回滚了，这时候事务B拿到的 250 这个数据就是脏数据，如果事务B接下拿这个数据进行操作，那么就会出问题</p>
<h3 id="读已提交-amp-不可重复读"><a href="#读已提交-amp-不可重复读" class="headerlink" title="读已提交 &amp; 不可重复读"></a>读已提交 &amp; 不可重复读</h3><p>read committed，读已提交是指只能读取到事务提交后的结果，由于不会读取到未提交的数据，所以也就没有脏读的问题，但也会产生不可重复读的问题。接下来我们继续看</p>
<p>事务A</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> committed;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> test.account <span class="keyword">set</span> balance = balance - <span class="number">50</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<p>事务B</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> committed;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="comment">-- 当事务A更新了数据但未提交的时候，事务A的 balance 是 250，事务B这里 balance 是 300</span></span><br><span class="line"><span class="comment">-- 当事务A提交了时，事务B再读取就是 balance 为 250</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.account <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>不可重复读是指，事务A做了修改操作但没有提交时，事务B读取到了 balance 为 300，然后事务A提交了，这时候事务B再读取得到了 balance 为 250，同一事务两次读取结果不一样，产生了诡异的现象</p>
<p>解决这个问题可以通过加锁来完成，即在事务B中将查询语句修改为<code>select * from test.account where id = 1 for update</code>。这个时候如果事务A已经进行了数据操作，那么事务B获取这个锁就会阻塞，知道事务A完成了工作；如果这个时候事务A还未进行数据操作，那么事务B直接获取到这个锁，但事务A想再操作这条数据的就需要等到这把锁释放掉。就这样，问题解决了</p>
<h3 id="可重复读-amp-幻读"><a href="#可重复读-amp-幻读" class="headerlink" title="可重复读 &amp; 幻读"></a>可重复读 &amp; 幻读</h3><p>repeatable read，可重复读是指事务开启后，第一次读取到的数据，再次读取不会因为其他事务做修改并提交而发生改变，保证了每次读取同一条数据都是一样的，就不会有不可重复读的问题。但也有幻读的问题，我们接下去继续看看</p>
<p>事务A</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> repeatable <span class="keyword">read</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> test.account <span class="keyword">set</span> balance = balance - <span class="number">50</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<p>事务B</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> repeatable <span class="keyword">read</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="comment">-- 当事务A更新了数据但未提交，事务B读取到的 balance 是 300，这个跟 read committed 一样。但是事务A提交了，事务B再读取还是 300。也就是说不管读多少次，值都是一样的</span></span><br><span class="line"><span class="comment">-- 当事务A更新了数据并已提交，事务B读取到的 balance 是 250</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.account <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>可以看出，可重复读就是不管其他事务是否有提交，只要当前事务读取过的数据，在事务内，再次读取就还是同样的数据。我们再来看一下幻读是怎么产生的</p>
<p>事务A</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.account <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`account`</span>(<span class="string">`id`</span>,<span class="string">`balance`</span>)<span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<p>事务B</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.account <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 在事务A没提交前，事务B读取到没有 id 为 4 的数据，由于可重复读，这时候，就算事务A提交了，读取到的结果也是一样的</span></span><br><span class="line"><span class="comment">-- 这时候信息满满地将数据插进去，发现主键冲突了</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`account`</span>(<span class="string">`id`</span>,<span class="string">`balance`</span>)<span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<p>可以看到，由于可重复读，在操作过程中数据，明明没有主键冲突，但执行结果让人意外，就像幻觉一样？同样地，如果一个事务在批量操作，另外一个事务在插入数据，也会出现这样的现象。解决这个问题，就需要锁表了</p>
<p>特别注意，<strong>在 repeatable read 隔离级别下，行锁的条件不是索引，将会锁整张表</strong>。比如 <code>select * from test.account where balance = 200 for update</code></p>
<h3 id="可串行化"><a href="#可串行化" class="headerlink" title="可串行化"></a>可串行化</h3><p>serializable，可串行化是指事务需要一个接着一个进行，不能并行地执行。比如事务A修改了数据a但未提交，事务B就不能修改甚至不能读取，进入阻塞；事务A读取了数据a但未提交，事务B能读取，但不能修改，进入阻塞</p>
<p>事务A</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">serializable</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.account <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> test.account <span class="keyword">set</span> balance = balance - <span class="number">50</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>事务B</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">serializable</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="comment">-- 当事务A执行了 update 操作，这里 select 进入阻塞</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test.account <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 当事务A执行了 select 操作，这里 update 进入阻塞</span></span><br><span class="line"><span class="keyword">update</span> test.account <span class="keyword">set</span> balance = balance - <span class="number">50</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>可以看到，串行化隔离级别会对读取或者修改的数据进行加锁，特别地，<strong>如果读取的数据是整张表的数据，那么就会锁表</strong></p>
<p>那么我们来总结一下，其实可以看到，事务的隔离级别越高，越能保证数据的完整性和一致性，但并发性能就越低，对于多数应用程序而言，<code>read committted</code>就可以了。我们再来总结一下脏读、不可重复读和幻读</p>
<ul>
<li>脏读：事务A读取了事务B更新的数据，然后B回滚了操作，那么事务A读取到的就是脏数据</li>
<li>不可重复读：事务A多次读取同一数据，事务B在事务A多次读取的过程中，对数据做了更新并提交，导致事务A多次读取同一数据时，结果不一致。解决这个问题可以锁行</li>
<li>幻读：事务A在事务B提交事务前，读取了数据，然后事务B先提交了，事务A在做提交，结果发现跟事务A想象的结果不一样。解决这个问题可以锁表</li>
</ul>
<p>我们还可以再对脏读、不可重复读、幻读做一张表</p>
<table>
<thead>
<tr>
<th style="text-align:center">事务隔离级别</th>
<th style="text-align:center">脏读</th>
<th style="text-align:center">不可重复读</th>
<th style="text-align:center">幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">未提交读(read uncommitted)</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">已提交读(read committed)</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">可重复读(repeatable read)</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">可串行化(serializable)</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
</tr>
</tbody>
</table>
<p>Emmm，天气转凉，早点吃饭睡觉</p>
]]></content>
      <categories>
        <category>mysql 学习</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>【系统学习-redis】【一】概述和数据结构</title>
    <url>/post/sys-learn-redis-01/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>今天我们开始聊一下 redis，慢慢地聊一下。redis 我们经常用于缓存数据库、排行榜、计数器应用等，在平时开发使用中，已经变成不可或缺的应用了。我们先一起来聊一下 redis 的一些功能和提供的数据结构，所以我们今天聊的有以下几点：</p>
<ul>
<li>redis 杂谈</li>
<li>数据结构</li>
<li>一些全局的命令</li>
</ul>
<a id="more"></a>
<h2 id="redis-杂谈"><a href="#redis-杂谈" class="headerlink" title="redis 杂谈"></a>redis 杂谈</h2><p>redis 是一种基于键值对(key-value)数据库，其中 value 可以为 string, hash, list, set, zset 等数据结构，还提供了键过期，发布订阅，事务，流水线等功能。redis 经常使用的场景有作为缓存数据库，排行榜，计数器应用，社交网络等</p>
<h3 id="redis-很快"><a href="#redis-很快" class="headerlink" title="redis 很快"></a>redis 很快</h3><p>redis 处理指令速度很快，也可以说是并发高，单机并发达到10W，实际需要真实测试，这个可以通过官方的压测工具 <code>redis-benchmark</code> 进行测试。那为什么 redis 很快呢，有以下几点原因</p>
<ul>
<li>redis 基于内存，所有数据都在内存中。内存的读写速度是很快的</li>
<li>单线程执行命令。避免了线程切换的消耗和线程之间资源的竞争</li>
<li>多路复用，nio(非阻塞io) 采用 epoll，不在 io 上浪费时间</li>
<li>resp协议很简单。redis在tcp上设计了自己的resp协议，这个协议非常简单，解析请求和响应的时候就消耗少</li>
</ul>
<h3 id="resp-协议"><a href="#resp-协议" class="headerlink" title="resp 协议"></a>resp 协议</h3><p>resp 协议规定了 redis 客户端和服务端之间的通信，协议的例子如下。这里有两条指令，一条是 <code>SELECT 0</code> 意思是使用第 0 个数据库，一条是 <code>set name sealde</code> 意思是设置一个值。可以看出协议中一条指令由三部分组成，第一部分<code>*2</code> 是命令由几个字符串组成，<code>$6</code> 指下一条字符串有 6 个字符，<code>SELECT</code> 指具体命令，即选择数据库，<code>$1</code> 指下一条字符串有 1 个字符，<code>0</code> 指具体的命令，即第 0 个。<code>set name sealde</code> 同样是这样的结构</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="comment">*2</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$6</span></span></span><br><span class="line">SELECT</span><br><span class="line"><span class="meta"><span class="meta-keyword">$1</span></span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="comment">*3</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$3</span></span></span><br><span class="line"><span class="keyword">set</span></span><br><span class="line">$4</span><br><span class="line">name</span><br><span class="line">$6</span><br><span class="line">sealde</span><br></pre></td></tr></table></figure>
<p>resp 协议很简单，甚至没事干，可以自己写个客户端，在 TCP 连接上去发送和解析这样的字符串</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>redis 数据结构一共有 string, list, set, zset, hash 这 5 种，可以通过<a href="https://www.redis.net.cn/order/" target="_blank" rel="noopener">redis命令手册</a>查看具体的命令。接下来我们来聊一下数据结构具体的命令，这里只聊比较常用的命令</p>
<h3 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串 string"></a>字符串 string</h3><p>字符串数据结构即 value 是字符串，命令我们大致分为下面几类</p>
<ul>
<li>设置命令<br><code>set key value [EX seconds] [PX milliseconds] [NX|XX]</code> 这里的 value 可以是 字符串(JSON、XML等)、数字(整型和浮点数)、二进制(图片、音频和视频) 最大不能超过 512 M<br><code>setnx key value</code> key不存在，设置成功返回1；失败返回0</li>
<li>获取命令<br><code>get key</code> 获取字符串</li>
<li>批量命令<br><code>mset key value [key value ...]</code> 批量设置 key-value<br><code>mget key [key ...]</code> 批量获取字符串</li>
<li>计数命令<br><code>incr key</code> 必须为整数，value自增1<br><code>decr key</code> 必须为整数，value自减1<br><code>incrby key increment</code> value 增加 increment 的数值<br><code>decrby key decrement</code> value 减去 decrement 的数值<br><code>incrbyfloat key increment</code> 浮点数增加 increment 的数值</li>
<li>字符串操作命令<br><code>append key value</code> 拼接字符串<br><code>strlen key</code> 计算字符串长度<br><code>getrange key start end</code> 截取字符串</li>
</ul>
<p>下面看两个例子</p>
<p><code>set age 23 ex 10</code>。这里 age 是 key，value 是 23，ex 指过期时间，这里 10 秒后过期<br><code>setnx name test</code>。不存在 name 这个 key 时，返回 1 设置成功；否则返回失败 0</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># 这个是字符串操作的例子</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">set</span> name hello</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; append name <span class="string">" world"</span></span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">11</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">get</span> name</span><br><span class="line"><span class="string">"hello world"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; strlen name</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">11</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; getrange name <span class="number">0</span> <span class="number">4</span></span><br><span class="line"><span class="string">"hello"</span></span><br></pre></td></tr></table></figure>
<h3 id="哈希-hash"><a href="#哈希-hash" class="headerlink" title="哈希 hash"></a>哈希 hash</h3><p>redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。redis 中每个 hash 可以存储 2^32 - 1 键值对（40多亿）。常用的命令如下</p>
<ul>
<li>设置、获取、删除<br><code>hset key field value</code> 设置值，一个 key 可以有多个 field，field 和 value 是隐射关系，就跟 java 的 map 一样<br><code>hget key field</code> 获取值<br><code>hdel key field [field ...]</code> 删除 field</li>
<li>计数<br><code>hlen key</code> 计算 key 下有多少对 field 和 value<br><code>hincrby key field increment</code> 对 field 映射的 value 增加 increment 的值<br><code>hincrbyfloat key field increment</code> 浮点数增加 increment 的值</li>
<li>批量操作<br><code>hmset key field value [field value ...]</code> 一次设置多个值<br><code>hmget key field [field ...]</code> 获取多个 field<br><code>hkeys key</code> 获取所有的 field<br><code>hvals key</code> 获取所有的 value<br><code>hgetall key</code> 获取所有的 field 和 value 的映射</li>
<li>判断 filed 是否存在<br><code>hexists key field</code></li>
</ul>
<p>我们保存一条数据库的记录，通常可以使用 hash 来保存，比如有一条 <code>id 123 name sealde age 19 city GuangZhou</code> 这样的记录可以这样保存</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hmset user:<span class="number">123</span> name sealde age <span class="number">19</span> city GuangZhou</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hgetall user:<span class="number">123</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"name"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"sealde"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"age"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"19"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"city"</span></span><br><span class="line"><span class="number">6</span>) <span class="string">"GuangZhou"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; hget user:<span class="number">123</span> name</span><br><span class="line"><span class="string">"sealde"</span></span><br></pre></td></tr></table></figure>
<h3 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h3><p>存储多个有序的字符串，一个列表最多可以存 2^32-1 个元素，元素可以重复。redis 的 list 支持双端操作，即左右两边都可以放入元素和去除元素，其实跟 java 的 Deque 比较像。常用的命令如下</p>
<ul>
<li>插入<br><code>rpush key value [value ...]</code> 右插元素，可以多个<br><code>lpush key value [value ...]</code> 左插元素，可以多个<br><code>linsert key BEFORE|AFTER pivot value</code> 在 pivot 之前或者之后插入 value</li>
<li>查找<br><code>lrange key start stop</code> 从左边范围查找<br><code>lindex key index</code> 根据下标查找元素</li>
<li>删除并返回(出队列)<br><code>lpop key</code> 队列左边弹出一个元素<br><code>rpop key</code> 队列右边弹出一个元素</li>
</ul>
<p>我们来看一个例子，lpush 插入数据其实就是进入队列</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush ltest a b c d</span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">lrange</span> ltest <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"d"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"c"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"b"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"a"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">lindex</span> ltest <span class="number">0</span></span><br><span class="line"><span class="string">"d"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="keyword">lindex</span> ltest <span class="number">-1</span></span><br><span class="line"><span class="string">"a"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpop ltest</span><br><span class="line"><span class="string">"d"</span></span><br></pre></td></tr></table></figure>
<h3 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 set"></a>集合 set</h3><p>可以保存多个元素，元素不能重复，元素是无序的。常用的命令如下</p>
<ul>
<li>添加、查询、删除<br><code>sadd key member [member ...]</code> 添加元素，一次可以添加多个元素<br><code>smembers key</code> 查询元素<br><code>srem key member [member ...]</code> 删除元素，一次可以删除多个元素</li>
<li>计数和判断是否存在<br><code>scard key</code> 统计元素个数<br><code>sismember key member</code> 判断元素是否存在集合中</li>
<li>集合操作<br><code>sinter key [key ...]</code> 求交集 <code>sinterstore destination key [key ...]</code> 求交集后存在 destination 中<br><code>sunion key [key ...]</code> 求并集 <code>sunionstore destination key [key ...]</code> 类似于上面<br><code>sdiff key [key ...]</code> 求差集 <code>sdiffstore destination key [key ...]</code> 类似于上面</li>
</ul>
<p>集合可以做一些有爱好交集这样的需求，或者不能重复操作的需求。下面是一个添加和查询的例子</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd stest a b c a d</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">4</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers stest</span><br><span class="line"><span class="number">1</span>) <span class="string">"d"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"c"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"b"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"a"</span></span><br></pre></td></tr></table></figure>
<h3 id="有序集合-zset"><a href="#有序集合-zset" class="headerlink" title="有序集合 zset"></a>有序集合 zset</h3><p>有序集合就是有序的集合 =。= 每个成员(member) 不能重复，每个成员对应一个分值(score)，常用于排行榜或点赞数等场景。我们先来对比一下 list、set、zset 使用上的区别</p>
<table>
<thead>
<tr>
<th style="text-align:center">数据结构</th>
<th style="text-align:center">是否允许元素重复</th>
<th style="text-align:center">是否有序</th>
<th style="text-align:center">有序的实现方式</th>
<th style="text-align:center">应用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">list</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
<td style="text-align:center">索引下标</td>
<td style="text-align:center">时间轴，队列</td>
</tr>
<tr>
<td style="text-align:center">set</td>
<td style="text-align:center">否</td>
<td style="text-align:center">否</td>
<td style="text-align:center">无</td>
<td style="text-align:center">标签，社交</td>
</tr>
<tr>
<td style="text-align:center">zset</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
<td style="text-align:center">分值</td>
<td style="text-align:center">排行榜，点赞数</td>
</tr>
</tbody>
</table>
<p>有序集合常用的命令</p>
<ul>
<li>插入、查询、删除<br><code>zadd key [NX|XX] [CH] [INCR] score member [score member ...]</code> 插入元素，nx 指不存在才能设置，xx 指存在时才能设置，ch 表示返回值为更新的数量，不加 ch 更新的个数是不会统计的，incr 自增1，score 分值，member 成员<br><code>zrem key member [member ...]</code> 删除成员<br><code>zrange key start stop [WITHSCORES]</code> 范围查询，withscores 指是否返回分值<br><code>zrevrange key start stop [WITHSCORES]</code> 在索引范围内 (start – stop) 倒叙排<br><code>zrangebyscore key min max [WITHSCORES] [LIMIT offset count]</code> 在分值范围内 (min – max) 排序返回<br><code>zrevrangebyscore key max min [WITHSCORES] [LIMIT offset count]</code> 在分值范围内 (max – min) 倒叙排<br><code>zrank key member</code> 排名<br><code>zrevrank key member</code> 倒叙的排名</li>
<li>计数<br><code>zcard key</code> 统计成员数量</li>
</ul>
<p>在排行榜场景中，zset 非常适合使用</p>
<h2 id="一些全局的命令"><a href="#一些全局的命令" class="headerlink" title="一些全局的命令"></a>一些全局的命令</h2><ul>
<li><code>keys pattern</code> 查找键，如 <code>keys user*</code>，特别的 <code>keys *</code> 列出所有的键</li>
<li><code>dbsize</code> 返回键的数量</li>
<li><code>exists key [key ...]</code> 查看键是否存在</li>
<li><code>del key [key ...]</code> 删除键</li>
<li><code>expire key seconds</code> 给键设置过期时间</li>
<li><code>ttl name</code> 查看键的过期时间，如果没有过期时间返回 -1</li>
<li><code>type key</code> 返回键的数据类型，如果键不存在返回 none</li>
</ul>
<p>数据库管理命令</p>
<ul>
<li><code>select index</code> 选择数据库，一共有16个数据库，0-15</li>
<li><code>flushdb</code> 删除当前 db 下的所有数据</li>
<li><code>flushall</code> 删除所有 db 下的数据</li>
</ul>
<p>基本上我们已经聊完了常用的 redis 操作，我们结合业务灵活地使用这五种数据结构，比如一个排行榜功能，使用 zset 存储分值，点赞或者分享等给它加分值，每条数据一个用只能点赞一次可以使用 set 进行记录，查询自己数据的排名使用 zrevrank，跟前一名相比差多少分 <code>zrangebyscore key score +inf withscores limit 1 2</code></p>
<p>今天就聊到这了，感觉没聊啥，当然 redis 还提供其他的功能，比如 发布订阅、HyperLogLog、bitmap、geo 地理位置、事务、lua脚本等，我们需要清楚这些都是提供什么样功能和适用的场景</p>
]]></content>
      <categories>
        <category>redis学习</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>【系统学习-redis】【二】工具和提供的功能</title>
    <url>/post/sys-learn-redis-02/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>最近晚霞特别好看，红成一片。今天我们聊一下 redis 提供的工具和功能，在我们使用 redis 过程中好有个什么时候可以借助工具帮住我们，所以今天我们聊一下</p>
<ul>
<li>redis-cli &amp; redis-server</li>
<li>慢查询</li>
<li>redis-benchmark 压测工具</li>
<li>pipeline 管道</li>
<li>弱事务</li>
<li>lua 原子操作</li>
<li>发布订阅</li>
<li>其他功能</li>
</ul>
<a id="more"></a>
<h2 id="redis-cli-amp-redis-server"><a href="#redis-cli-amp-redis-server" class="headerlink" title="redis-cli &amp; redis-server"></a>redis-cli &amp; redis-server</h2><p>redis-cli 是连接 redis 服务的客户端，redis-server 启动 redis 服务。这里我们聊一下常用的命令</p>
<ul>
<li>redis-cli<br><code>redis-cli -h 127.0.0.1 -p 6379</code> 连接 redis 数据库，-h 指 host 地址，-p 指端口，默认6379，另外 -a 是密码<br><code>redis-cli -r 10 -i 1 info |grep used_memory_human</code> 查看内存使用情况，每秒输出一次，一共输出 10 次。-r 指重复操作，-i 指在-r参数情况下间隔多长时间，info 查看 redis 信息  <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">~ redis-cli -r <span class="number">10</span> -i <span class="number">1</span> info |grep used_memory_human</span><br><span class="line">used_memory_human:<span class="number">821.46</span>K</span><br><span class="line">used_memory_human:<span class="number">821.46</span>K</span><br><span class="line">used_memory_human:<span class="number">821.46</span>K</span><br><span class="line">used_memory_human:<span class="number">821.46</span>K</span><br><span class="line">used_memory_human:<span class="number">821.46</span>K</span><br><span class="line">used_memory_human:<span class="number">821.46</span>K</span><br><span class="line">used_memory_human:<span class="number">821.46</span>K</span><br><span class="line">used_memory_human:<span class="number">821.46</span>K</span><br><span class="line">used_memory_human:<span class="number">821.46</span>K</span><br><span class="line">used_memory_human:<span class="number">821.46</span>K</span><br></pre></td></tr></table></figure>
<code>redis-cli keys &quot;user:*&quot; | xargs redis-cli del</code> 批量删除 user:* 匹配到的 key</li>
<li>redis-server<br><code>redis-server ./redis.conf &amp;</code> 指定配置文件启动，<code>&amp;</code> 表示后台运行<br><code>redis-server --test-memory 1024</code> 检测系统能否提供 1G 内存给 redis，用于快速占满机器内存的测试。如果机器不能提供，会发现测试的速度变的很慢</li>
</ul>
<p>更多的参数命令参考 <code>redis-cli --help</code> 和　<code>redis-server --help</code></p>
<h2 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h2><p>跟 mysql 一样，当执行时间超过一定的阈值，会将耗时的命令记录起来。由于 redis 是单线程的，所以一条命令如果很耗时，会阻塞住后面的所有命令，我们来看一下怎么设置慢查询的阈值</p>
<ul>
<li>动态设置，重启启动设置会丢失。直接在 redis-cli 连接上设置 <code>6379&gt; config set slowlog-log-slower-than 10000</code>，这里设置阈值为 10ms</li>
<li>配置文件设置。修改配置文件 redis.conf<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置为 10ms，特别地设置成 0 记录所有的记录，负数不记录</span></span><br><span class="line">slowlog-<span class="built_in">log</span>-slower-than <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置慢查询记录的条数，慢查询记录也是队列，有一定的条数限制</span></span><br><span class="line">slowlog-<span class="built_in">max</span>-<span class="built_in">len</span> <span class="number">128</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>慢查询使用</strong></p>
<p><code>slowlog len</code> 显示慢查询条数，<code>slowlog get</code> 获取慢查询命令</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; slowlog len</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; slowlog <span class="keyword">get</span></span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) (<span class="built_in">int</span>eger) <span class="number">0</span></span><br><span class="line">   <span class="number">2</span>) (<span class="built_in">int</span>eger) <span class="number">1572578366</span></span><br><span class="line">   <span class="number">3</span>) (<span class="built_in">int</span>eger) <span class="number">5</span></span><br><span class="line">   <span class="number">4</span>) <span class="number">1</span>) <span class="string">"get"</span></span><br><span class="line">      <span class="number">2</span>) <span class="string">"name"</span></span><br><span class="line">   <span class="number">5</span>) <span class="string">"127.0.0.1:55444"</span></span><br><span class="line">   <span class="number">6</span>) <span class="string">""</span></span><br></pre></td></tr></table></figure>
<p>一般生产上设置 slowlog-log-slower-than 为 10ms，如果并发要求高，可以设置 1ms。slowlog-max-len 可以设置上千条。慢查询日志最好写个脚本定期地存放起来，比如放到 mysql 里面</p>
<h2 id="redis-benchmark-压测工具"><a href="#redis-benchmark-压测工具" class="headerlink" title="redis-benchmark 压测工具"></a>redis-benchmark 压测工具</h2><p>我们通常需要使用压测工具对我们的服务做基准测试，需要知道达到什么阈值下性能会出现问题，测试 redis 有一个官方提供的工具 redis-benchmark。我们先来看看几个例子</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">➜</span>  <span class="string">~</span> <span class="string">redis-benchmark</span> <span class="string">-q</span></span><br><span class="line"><span class="attr">PING_INLINE:</span> <span class="number">143884.89</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br><span class="line"><span class="attr">PING_BULK:</span> <span class="number">143472.02</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br><span class="line"><span class="attr">SET:</span> <span class="number">141643.06</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br><span class="line"><span class="attr">GET:</span> <span class="number">145348.83</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br><span class="line"><span class="attr">INCR:</span> <span class="number">146627.56</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br><span class="line"><span class="attr">LPUSH:</span> <span class="number">146198.83</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br><span class="line"><span class="attr">RPUSH:</span> <span class="number">146412.88</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br><span class="line"><span class="attr">LPOP:</span> <span class="number">146198.83</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br><span class="line"><span class="attr">RPOP:</span> <span class="number">146412.88</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br><span class="line"><span class="attr">SADD:</span> <span class="number">146627.56</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br><span class="line"><span class="attr">HSET:</span> <span class="number">147058.83</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br><span class="line"><span class="attr">SPOP:</span> <span class="number">146198.83</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br><span class="line"><span class="string">LPUSH</span> <span class="string">(needed</span> <span class="string">to</span> <span class="string">benchmark</span> <span class="string">LRANGE):</span> <span class="number">147058.83</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br><span class="line"><span class="string">LRANGE_100</span> <span class="string">(first</span> <span class="number">100</span> <span class="string">elements):</span> <span class="number">89206.06</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br><span class="line"><span class="string">LRANGE_300</span> <span class="string">(first</span> <span class="number">300</span> <span class="string">elements):</span> <span class="number">35842.29</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br><span class="line"><span class="string">LRANGE_500</span> <span class="string">(first</span> <span class="number">450</span> <span class="string">elements):</span> <span class="number">24727.99</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br><span class="line"><span class="string">LRANGE_600</span> <span class="string">(first</span> <span class="number">600</span> <span class="string">elements):</span> <span class="number">18491.12</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br><span class="line"><span class="string">MSET</span> <span class="string">(10</span> <span class="string">keys):</span> <span class="number">112107.62</span> <span class="string">requests</span> <span class="string">per</span> <span class="string">second</span></span><br></pre></td></tr></table></figure>
<p>这里是我本机测试，注意生成压测的时候需要加上 host，port 和 pwd，<code>redis-benchmark -q</code> -q 是 quiet 的意思，只输出每秒查询的次数。还可以指定并发数进行测试</p>
<ul>
<li><code>redis-benchmark -q -c 1000 -n 100000</code> 1000 个并发连接，每个连接 10w次请求</li>
<li><code>redis-benchmark -q -d 1000</code> 测试 1000字节 大小数据包的 set/get 情况</li>
<li><code>redis-benchmark -q -t set,lpush --csv</code> 只测试 set,lpush 的性能，输出为 csv 格式</li>
<li><code>redis-benchmark -r 10000 -n 10000 eval &#39;return redis.call(&quot;ping&quot;)&#39;</code> 执行脚本语句</li>
</ul>
<h2 id="pipeline-管道"><a href="#pipeline-管道" class="headerlink" title="pipeline 管道"></a>pipeline 管道</h2><p>redis 客户端(比如 Jedis)执行一条命令，过程是 发送命令到服务端 -》命令进入队列 -》 服务端执行命令 -》 返回执行结果给客户端，客户端在每执行命令的时候都需要往返的网络开销。pipeline 的作用是一次可以执行多条命令，而不用多次地发送请求，pipeline 的出现就是为了节省网络请求的开销，网络开销的时间可能比服务端执行命令的时间还要长，特别客户端和服务端网络延迟大的情况更明显</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">    Pipeline pipeline = jedis.pipelined();</span><br><span class="line">    pipeline.set(<span class="string">"ptest1"</span>, <span class="string">"t"</span>);</span><br><span class="line">    pipeline.sadd(<span class="string">"pztest1"</span>, <span class="string">"p1"</span>, <span class="string">"p2"</span>, <span class="string">"p3"</span>);</span><br><span class="line">    Response&lt;Long&gt; res = pipeline.dbSize();</span><br><span class="line"></span><br><span class="line">    pipeline.sync();</span><br><span class="line">    System.out.println(res.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在客户端使用 pipeline 比如 Jedis，将一组命令组装起来，发送给 redis 服务端，完成批量操作，其实发送的就是根据 resp 协议组装出来的文本。其实原生命令也有批量操作的，比如 <code>mset</code>、<code>hmset</code> 等，他们的区别</p>
<ul>
<li>原生批命令是原子的，pipeline 不具有原子性</li>
<li>原生批命令只能单一的操作，pipeline 可以有多条不同的命令</li>
<li>原生批命令是服务端实现的，pipeline 是需要服务端和客户端共同完成的</li>
</ul>
<p>一般我们使用 pipeline 需要主要组装的命令不能太多，因为 redis 单线程的关系，有阻塞其他命令的风险。如果有大量的命令需要执行，可以拆分成多个小的 pipeline 去执行。pipeline 还可以结合 redis 的事务执行命令，即将命令放在 <code>multi</code> 和 <code>exec</code> 之间执行，<code>multi</code> 指事务开启，<code>exec</code> 指事务结束</p>
<h2 id="弱事务"><a href="#弱事务" class="headerlink" title="弱事务"></a>弱事务</h2><p>redis 提供的事务是弱事务性的，我们看一个例子，这里第二条语句出错了，但是第一条和第三条语句还是执行成功了，这个说明事务没有回滚，这就是弱事务性<br>什么样的情况会回滚呢，比如这里第二条语句是 <code>ssdfa</code> 这样的语法错误，那么事务直接失败，语句不执行了，或者 <code>discard</code> 显示停止提交事务</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; set multi:test ooo</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; zincrby multi:test q notexists</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; set multi:not ppp</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; exec</span><br><span class="line"><span class="number">1</span>) OK</span><br><span class="line"><span class="number">2</span>) (error) ERR value is not a valid float</span><br><span class="line"><span class="number">3</span>) OK</span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; get multi:test</span><br><span class="line"><span class="string">"ooo"</span></span><br></pre></td></tr></table></figure>
<h2 id="lua-原子操作"><a href="#lua-原子操作" class="headerlink" title="lua 原子操作"></a>lua 原子操作</h2><p>lua 是一门小巧的脚本语言，用 C 语言写的，速度很快。redis 可以将 lua 脚本加载到内存中，然后调用 lua 脚本。使用 lua 脚本有以下几个好处：</p>
<ul>
<li>减少网络开销</li>
<li>原子操作</li>
<li>复用性</li>
</ul>
<p>这里不对 lua 语言的语法进行讨论，我们先来看一个简单的例子。这里通过 <code>redis.call</code> 调用 redis 的命令，通过 <code>KEYS[1]</code> 获取到参数，1 表示第一个参数</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; set name sealde</span><br><span class="line">OK</span><br><span class="line">// eval + 脚本 + 键个数 + 键</span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; eval <span class="string">"return redis.call('get',KEYS[1])"</span> <span class="number">1</span> name</span><br><span class="line"><span class="string">"sealde"</span></span><br></pre></td></tr></table></figure>
<h3 id="redis-lua脚本管理"><a href="#redis-lua脚本管理" class="headerlink" title="redis lua脚本管理"></a>redis lua脚本管理</h3><ul>
<li><code>script load &quot;具体的脚本&quot;</code> 将脚本加载到 redis 中，会返回 sha 签名</li>
<li><code>evalsha sha1 numkeys key [key ...] arg [arg ...]</code> 执行 sha1 脚本，numkeys 指 key 的数量</li>
<li><code>script exists sha1</code> 判断脚本是否存在</li>
<li><code>script kill</code> 停止正在运行的脚本</li>
<li><code>script flush</code> 清空 redis 存储的脚本</li>
</ul>
<p>我们接下来看一个例子，这里我们写好一个 lua 脚本 <code>accesslimit.lua</code>，它的功能是限制同一个 ip 一定时间内访问次数，其中 KEYS[1] 指 ip 地址，KEYS[2] 指限制访问的次数，KEYS[3] 指过期时间。可以看到，<code>script load</code> 将脚本加载到 redis 并返回了 sha1，然后通过 <code>evalsha sha1 numkeys key ...</code> 执行该脚本<br>效果是，刚开始 2 次访问返回 1，接下来访问返回 0，查过 5 秒后又可以继续访问，是不是挺简单的呀</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">➜  lua cat accesslimit.lua </span><br><span class="line">-- KEYS[<span class="number">1</span>] ip</span><br><span class="line">local <span class="type">key</span> = <span class="string">"accesslimit:"</span>..KEYS[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">if (redis.call(<span class="string">"exists"</span>, <span class="type">key</span>) == <span class="number">1</span>)</span><br><span class="line">then</span><br><span class="line">    local times = redis.call(<span class="string">"incr"</span>, <span class="type">key</span>)</span><br><span class="line">    -- KEYS[<span class="number">2</span>] limit times</span><br><span class="line">    if (times &gt; tonumber(KEYS[<span class="number">2</span>])) then</span><br><span class="line"> 	return <span class="number">0</span></span><br><span class="line">    end</span><br><span class="line">else</span><br><span class="line">    -- KEYS[<span class="number">3</span>] expire time</span><br><span class="line">    redis.call(<span class="string">"set"</span>, <span class="type">key</span>, <span class="number">1</span>, <span class="string">"EX"</span>, tonumber(KEYS[<span class="number">3</span>]))</span><br><span class="line">end</span><br><span class="line">return <span class="number">1</span></span><br><span class="line">➜  lua redis-cli script load <span class="string">"$(cat $(pwd)/accesslimit.lua)"</span></span><br><span class="line"><span class="string">"ae251809e1e2f5c68bbf6b1196e3568920d5c34c"</span></span><br><span class="line">➜  lua redis-cli evalsha ae251809e1e2f5c68bbf6b1196e3568920d5c34c <span class="number">3</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line">➜  lua redis-cli evalsha ae251809e1e2f5c68bbf6b1196e3568920d5c34c <span class="number">3</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line">➜  lua redis-cli evalsha ae251809e1e2f5c68bbf6b1196e3568920d5c34c <span class="number">3</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line">➜  lua redis-cli evalsha ae251809e1e2f5c68bbf6b1196e3568920d5c34c <span class="number">3</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line">➜  lua redis-cli evalsha ae251809e1e2f5c68bbf6b1196e3568920d5c34c <span class="number">3</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line">➜  lua redis-cli evalsha ae251809e1e2f5c68bbf6b1196e3568920d5c34c <span class="number">3</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line">➜  lua redis-cli evalsha ae251809e1e2f5c68bbf6b1196e3568920d5c34c <span class="number">3</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line">➜  lua redis-cli evalsha ae251809e1e2f5c68bbf6b1196e3568920d5c34c <span class="number">3</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span></span><br><span class="line">➜  lua redis-cli evalsha ae251809e1e2f5c68bbf6b1196e3568920d5c34c <span class="number">3</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h2><p>发布订阅即发布一个消息到某个 channel，订阅了该 channel 就可以收到该消息。我们先来看一个例子，这里我们启动了两个 redis-cli 去连接</p>
<p>订阅者</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; subscribe channel:test</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">"subscribe"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"channel:test"</span></span><br><span class="line"><span class="number">3</span>) (<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"></span><br><span class="line">-- 当 channel:test 有消息的时候</span><br><span class="line"><span class="number">1</span>) <span class="string">"message"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"channel:test"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"hello world!"</span></span><br></pre></td></tr></table></figure>
<p>发布者</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; publish channel:test <span class="string">"hello world!"</span></span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>最主要的命令就是 <code>publish</code> 和 <code>subscribe</code>，另外还有不同模式的订阅，退订等</p>
<h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><p>redis 还提供其他功能，虽然今天不聊怎么具体使用或者原理，但是大概聊一下有什么作用，以后有相关的需求可以使用上来</p>
<ul>
<li>地理位置(geo)，将经纬度坐标数据存到 redis 中，可以查询坐标之间的距离，查询指定范围内的有序坐标。可以做附近的人，物流等功能</li>
<li>BitMap 通过二进制位存储状态信息，节省内存。根据偏移量进行设置状态，统计等。可以做活跃用户统计，用户行为统计等功能</li>
<li>HyperLogLog 通过概率算法统计数据，节省内存，可以统计很大数量级的数据。可以用做访问量，活跃用户等</li>
</ul>
<p>好啦，今天就聊到这了，还有很多可以慢慢探索的地方，这里只是浅显的聊一下，下次再聊点其他的</p>
]]></content>
      <categories>
        <category>redis学习</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>【系统学习-mysql】【四】索引和执行计划</title>
    <url>/post/sys-learn-mysql-04/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>来了，它来了。聊着聊着就聊到了要怎么优化sql的事情上了，sql优化我们很大程度上都是在分析sql执行计划和使用索引上搞事情，毕竟索引是专门用来提高查询效率的数据结构。正如大家常年举的新华字典例子，索引就想字典的目录一样，是用来帮助快速查找的</p>
<p>那么在真实生产环境中，我们优化查询的步骤是先找到慢查询，然后分析sql执行计划，最后在索引上搞文章。当然，一切的一切，表的设计要正确，只有表设计好了，才有sql优化发挥的空间，只是我们这里不聊表的设计。所以我们今天聊的有以下几点：</p>
<ul>
<li>慢查询</li>
<li>索引</li>
<li>执行计划</li>
<li>常见的索引优化</li>
</ul>
<a id="more"></a>
<h2 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h2><p>慢查询是指执行查过一定时间阈值的sql语句，一般情况下，我们分析慢查询就是指分析mysql中的慢查询日志，慢查询日志是我们找到需要做sql优化的基础。但是默认情况下慢查询日志是关闭的，如果我们不是使用云服务提供mysql数据库，那么我们需要先开启这个日志。在开启之前，我们先聊几个有关慢查询的参数配置</p>
<ul>
<li>slow_query_log 启动停止慢查询日志</li>
<li>slow_query_log_file 指定慢查询日志的存储路径及文件（默认和数据文件放一起）</li>
<li>long_query_time 指定记录慢查询日志SQL执行时间得阈值（单位：秒，默认10秒）</li>
<li>log_queries_not_using_indexes  是否记录未使用索引的SQL</li>
<li>log_output 日志存放的地方【TABLE】【FILE】【FILE,TABLE】<strong>生产环境使用默认的 FILE就好了</strong></li>
</ul>
<p>具体开启日志的方式，直接修改 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> 或者 <code>/etc/mysql/my.cnf</code> 文件(注意不同系统或者不同版本位置不一样)，添加以下几行</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 注意如果已经有 [mysqld] 了，就不需要添加 [mysqld] 了</span></span><br><span class="line">[mysqld]</span><br><span class="line">slow_query_log          = <span class="number">1</span></span><br><span class="line">slow_query_log_file     = /<span class="keyword">var</span>/log/mysql/mysql-slow.log</span><br><span class="line"><span class="meta"># 注意这个时间需要根据自己的需求进行修改</span></span><br><span class="line">long_query_time = <span class="number">2</span></span><br><span class="line">log-queries-not-<span class="keyword">using</span>-indexes</span><br></pre></td></tr></table></figure>
<p>当我们开启了慢查询日志的时候，符合慢查询条件的sql语句就会被记录到慢查询日志中，sql语句包括<code>查询语句、数据修改语句、已经回滚的Sql</code>。那么我们可以来看一下慢查询日志是什么亚子的，这里建议大家实际操作一下</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># Time: <span class="number">2019</span><span class="number">-10</span><span class="number">-19</span>T10:<span class="number">59</span>:<span class="number">25.885136</span>Z</span><br><span class="line"># <span class="symbol">User@</span>Host: root[root] @ localhost [<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>]  Id:     <span class="number">3</span></span><br><span class="line"># Query_time: <span class="number">0.000074</span>  Lock_time: <span class="number">0.000032</span> Rows_sent: <span class="number">1</span>  Rows_examined: <span class="number">1</span></span><br><span class="line">SET timestamp=<span class="number">1571482765</span>;</span><br><span class="line">SHOW INDEX FROM `test`.`innodbt`;</span><br></pre></td></tr></table></figure>
<p>没一条慢查询日志大概就跟上面这个一样，第一行是查询的时间，第二行是用户名、用户ip、线程id，第三行是查询花费的时间、获得锁的时间、查询的结果行数、扫描的行数，第四行是执行sql的具体时间，第五行是执行的sql语句</p>
<h3 id="分析慢查询的工具"><a href="#分析慢查询的工具" class="headerlink" title="分析慢查询的工具"></a>分析慢查询的工具</h3><p>通过查看慢查询日志，我们可以得到sql语句的执行时间，用户信息等等，但是直接看就太不方便了，所以我们需要借助工具来分析。这里有两个工具，一个是mysql官方自带的 <code>mysqldumpslow</code>，另外一个是 <code>pt-query-digest</code>。我们先来看一下这两个工具是怎么使用的，可以为我们获取到什么样的信息，由于我直接在我本地开启的，就没有什么慢查询的语句了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ sudo mysqldumpslow -s t -t 10 mysql-slow.log</span><br><span class="line"></span><br><span class="line">Reading mysql slow query log from mysql-slow.log</span><br><span class="line">Count: 6  Time=0.00s (0s)  <span class="keyword">Lock</span>=<span class="number">0.00</span>s (<span class="number">0</span>s)  <span class="keyword">Rows</span>=<span class="number">0.8</span> (<span class="number">5</span>), root[root]@localhost</span><br><span class="line">  <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'S'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Count</span>: <span class="number">11</span>  <span class="built_in">Time</span>=<span class="number">0.00</span>s (<span class="number">0</span>s)  <span class="keyword">Lock</span>=<span class="number">0.00</span>s (<span class="number">0</span>s)  <span class="keyword">Rows</span>=<span class="number">1.0</span> (<span class="number">11</span>), root[root]@localhost</span><br><span class="line">  <span class="keyword">SHOW</span> <span class="keyword">SESSION</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'S'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Count</span>: <span class="number">2</span>  <span class="built_in">Time</span>=<span class="number">0.00</span>s (<span class="number">0</span>s)  <span class="keyword">Lock</span>=<span class="number">0.00</span>s (<span class="number">0</span>s)  <span class="keyword">Rows</span>=<span class="number">2.0</span> (<span class="number">4</span>), root[root]@localhost</span><br><span class="line">  <span class="keyword">SHOW</span> <span class="keyword">COLUMNS</span> <span class="keyword">FROM</span> <span class="string">`test`</span>.<span class="string">`account`</span></span><br></pre></td></tr></table></figure>
<p>上面的是使用 mysqldumpslow 进行分析的，统计了语句具体语句执行的次数等相对较简单的信息。稍微介绍一下参数的意思，<code>-s</code>是指按什么排序的意思，<code>t</code>是按照总时间进行排序，<code>-t 10</code>是指取前10天作为输出结果。更多的参数可以 <code>man mysqldumpslow</code> 进行查看</p>
<p>接下来我们看一下 pt_query_digest，首先下载地址 <a href="https://www.percona.com/doc/percona-toolkit/LATEST/pt-query-digest.html#downloading" target="_blank" rel="noopener">pt-query-digest</a>，同样这个链接也是使用手册的地址。安装好后我们来试一下</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ sudo pt-query-digest --explain h=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>,u=root,p=<span class="number">123456</span> mysql-slow.log</span><br><span class="line"></span><br><span class="line"># <span class="number">140</span>ms user time, <span class="number">20</span>ms system time, <span class="number">39.86</span>M rss, <span class="number">121.93</span>M vsz</span><br><span class="line"># Current date: Sat Oct <span class="number">19</span> <span class="number">20</span>:<span class="number">32</span>:<span class="number">00</span> <span class="number">2019</span></span><br><span class="line"># Hostname: sealde-MS<span class="number">-7</span>B23</span><br><span class="line"># Files: mysql-slow.log</span><br><span class="line"># Overall: <span class="number">297</span> total, <span class="number">59</span> unique, <span class="number">0.04</span> QPS, <span class="number">0.00</span>x concurrency _____________</span><br><span class="line"># Time range: <span class="number">2019</span><span class="number">-10</span><span class="number">-19</span>T10:<span class="number">40</span>:<span class="number">42</span> to <span class="number">2019</span><span class="number">-10</span><span class="number">-19</span>T12:<span class="number">32</span>:<span class="number">00</span></span><br><span class="line"># Attribute          total     min     max     avg     <span class="number">95</span>%  stddev  median</span><br><span class="line"># ============     ======= ======= ======= ======= ======= ======= =======</span><br><span class="line"># Exec time           <span class="number">74</span>ms     <span class="number">1</span>us     <span class="number">6</span>ms   <span class="number">247</span>us   <span class="number">799</span>us   <span class="number">601</span>us    <span class="number">73</span>us</span><br><span class="line"># Lock time           <span class="number">13</span>ms       <span class="number">0</span>   <span class="number">362</span>us    <span class="number">42</span>us   <span class="number">144</span>us    <span class="number">62</span>us    <span class="number">17</span>us</span><br><span class="line"># Rows sent            <span class="number">943</span>       <span class="number">0</span>     <span class="number">499</span>    <span class="number">3.18</span>    <span class="number">2.90</span>   <span class="number">30.80</span>       <span class="number">0</span></span><br><span class="line"># Rows examine      <span class="number">25.31</span>k       <span class="number">0</span>   <span class="number">1.00</span>k   <span class="number">87.26</span> <span class="number">1012.63</span>  <span class="number">274.01</span>       <span class="number">0</span></span><br><span class="line"># Query size        <span class="number">14.67</span>k       <span class="number">0</span>     <span class="number">215</span>   <span class="number">50.56</span>  <span class="number">158.58</span>   <span class="number">43.94</span>   <span class="number">30.19</span></span><br><span class="line"></span><br><span class="line"># Profile</span><br><span class="line"># Rank Query ID                        Response time Calls R/Call V/M   It</span><br><span class="line"># ==== =============================== ============= ===== ====== ===== ==</span><br><span class="line">#    <span class="number">1</span> <span class="number">0xE77769C62EF669AA7DD5F6760F</span>...  <span class="number">0.0223</span> <span class="number">30.4</span>%    <span class="number">11</span> <span class="number">0.0020</span>  <span class="number">0.00</span> SHOW VARIABLES</span><br><span class="line">#    <span class="number">2</span> <span class="number">0x873D3AAF7C4528CF9439C8E2DE</span>...  <span class="number">0.0144</span> <span class="number">19.6</span>%    <span class="number">11</span> <span class="number">0.0013</span>  <span class="number">0.00</span> SHOW VARIABLES</span><br><span class="line">#    <span class="number">3</span> <span class="number">0x6B18859E0CFC8086C0F01DC5D4</span>...  <span class="number">0.0042</span>  <span class="number">5.7</span>%    <span class="number">17</span> <span class="number">0.0002</span>  <span class="number">0.00</span> SELECT performance_schema.events_statements_current performance_schema.threads</span><br><span class="line">#    <span class="number">4</span> <span class="number">0xE8390778DC20D4CC04FE01C5B3</span>...  <span class="number">0.0040</span>  <span class="number">5.5</span>%   <span class="number">100</span> <span class="number">0.0000</span>  <span class="number">0.00</span> ADMIN PING</span><br><span class="line">#    <span class="number">5</span> <span class="number">0x3FDBE6B6A9945C2923C20C3122</span>...  <span class="number">0.0029</span>  <span class="number">3.9</span>%     <span class="number">2</span> <span class="number">0.0014</span>  <span class="number">0.00</span> SHOW COLUMNS</span><br><span class="line">#    <span class="number">6</span> <span class="number">0x622EF34FA79B543FDC5AC4F51E</span>...  <span class="number">0.0027</span>  <span class="number">3.6</span>%     <span class="number">1</span> <span class="number">0.0027</span>  <span class="number">0.00</span> SHOW GLOBAL VARIABLES</span><br><span class="line">#    <span class="number">7</span> <span class="number">0xED814B5BEEF0BCD4445D653901</span>...  <span class="number">0.0021</span>  <span class="number">2.8</span>%    <span class="number">11</span> <span class="number">0.0002</span>  <span class="number">0.00</span> SELECT innodbt</span><br><span class="line">#    <span class="number">8</span> <span class="number">0xA12763007BC796F0F218D206B0</span>...  <span class="number">0.0018</span>  <span class="number">2.5</span>%    <span class="number">17</span> <span class="number">0.0001</span>  <span class="number">0.00</span> SELECT performance_schema.events_waits_history_long</span><br><span class="line">#    <span class="number">9</span> <span class="number">0x7E4FD8B840A40A1DF6AD3D55D5</span>...  <span class="number">0.0018</span>  <span class="number">2.4</span>%    <span class="number">17</span> <span class="number">0.0001</span>  <span class="number">0.00</span> SELECT performance_schema.events_stages_history_long</span><br><span class="line">#   <span class="number">10</span> <span class="number">0x54D305756DFCDBFA06EB5CA98D</span>...  <span class="number">0.0015</span>  <span class="number">2.0</span>%    <span class="number">12</span> <span class="number">0.0001</span>  <span class="number">0.00</span> SHOW INDEX</span><br><span class="line">#   <span class="number">11</span> <span class="number">0xCB35558F37B42E38A2750AF24E</span>...  <span class="number">0.0011</span>  <span class="number">1.4</span>%     <span class="number">1</span> <span class="number">0.0011</span>  <span class="number">0.00</span> SHOW COLLATION</span><br><span class="line">#   <span class="number">12</span> <span class="number">0xF4182D1E505F5242FBC250C228</span>...  <span class="number">0.0011</span>  <span class="number">1.4</span>%     <span class="number">6</span> <span class="number">0.0002</span>  <span class="number">0.00</span> SHOW TRIGGERS</span><br><span class="line">#   <span class="number">13</span> <span class="number">0xA39DD594FAE10E151F9C4ED1B9</span>...  <span class="number">0.0010</span>  <span class="number">1.3</span>%     <span class="number">1</span> <span class="number">0.0010</span>  <span class="number">0.00</span> SHOW FUNCTION STATUS</span><br><span class="line">#   <span class="number">14</span> <span class="number">0x507A8C3C929392C00CD32C60BE</span>...  <span class="number">0.0009</span>  <span class="number">1.2</span>%     <span class="number">1</span> <span class="number">0.0009</span>  <span class="number">0.00</span> SHOW PROCEDURE STATUS</span><br><span class="line">#   <span class="number">15</span> <span class="number">0x37C662AFC001EDCC242B6C923E</span>...  <span class="number">0.0007</span>  <span class="number">1.0</span>%     <span class="number">1</span> <span class="number">0.0007</span>  <span class="number">0.00</span> SHOW COLUMNS</span><br><span class="line">#   <span class="number">16</span> <span class="number">0x96B4D2F0736877374BAEF5D5D4</span>...  <span class="number">0.0007</span>  <span class="number">0.9</span>%     <span class="number">1</span> <span class="number">0.0007</span>  <span class="number">0.00</span> SHOW COLUMNS</span><br><span class="line">#   <span class="number">17</span> <span class="number">0x0C9C70920DA7300E0B14E77CA2</span>...  <span class="number">0.0007</span>  <span class="number">0.9</span>%     <span class="number">2</span> <span class="number">0.0003</span>  <span class="number">0.00</span> SHOW STATUS</span><br><span class="line">#   <span class="number">18</span> <span class="number">0x751417D45B8E80EE5CBA203445</span>...  <span class="number">0.0007</span>  <span class="number">0.9</span>%     <span class="number">2</span> <span class="number">0.0003</span>  <span class="number">0.00</span> SHOW DATABASES</span><br><span class="line">#   <span class="number">19</span> <span class="number">0x0C86A6D1EBA3C4420E346EA322</span>...  <span class="number">0.0007</span>  <span class="number">0.9</span>%     <span class="number">1</span> <span class="number">0.0007</span>  <span class="number">0.00</span> SHOW COLUMNS</span><br><span class="line">#   <span class="number">20</span> <span class="number">0x9BB432DAD869152599B703A34B</span>...  <span class="number">0.0007</span>  <span class="number">0.9</span>%     <span class="number">1</span> <span class="number">0.0007</span>  <span class="number">0.00</span> SHOW COLUMNS</span><br><span class="line"># MISC <span class="number">0</span>xMISC                           <span class="number">0.0078</span> <span class="number">10.6</span>%    <span class="number">81</span> <span class="number">0.0001</span>   <span class="number">0.0</span> &lt;<span class="number">39</span> ITEMS&gt;</span><br><span class="line"></span><br><span class="line"># Query <span class="number">1</span>: <span class="number">0.00</span> QPS, <span class="number">0.00</span>x concurrency, ID <span class="number">0xE77769C62EF669AA7DD5F6760F2D2EBB</span> at byte <span class="number">1256</span></span><br><span class="line"># This item <span class="keyword">is</span> included <span class="keyword">in</span> the report because it matches --limit.</span><br><span class="line"># Scores: V/M = <span class="number">0.00</span></span><br><span class="line"># Time range: <span class="number">2019</span><span class="number">-10</span><span class="number">-19</span>T10:<span class="number">41</span>:<span class="number">01</span> to <span class="number">2019</span><span class="number">-10</span><span class="number">-19</span>T12:<span class="number">32</span>:<span class="number">00</span></span><br><span class="line"># Attribute    pct   total     min     max     avg     <span class="number">95</span>%  stddev  median</span><br><span class="line"># ============ === ======= ======= ======= ======= ======= ======= =======</span><br><span class="line"># Count          <span class="number">3</span>      <span class="number">11</span></span><br><span class="line"># Exec time     <span class="number">30</span>    <span class="number">22</span>ms   <span class="number">754</span>us     <span class="number">6</span>ms     <span class="number">2</span>ms     <span class="number">5</span>ms     <span class="number">2</span>ms   <span class="number">761</span>us</span><br><span class="line"># Lock time     <span class="number">12</span>     <span class="number">2</span>ms    <span class="number">65</span>us   <span class="number">338</span>us   <span class="number">143</span>us   <span class="number">316</span>us    <span class="number">98</span>us    <span class="number">76</span>us</span><br><span class="line"># Rows sent      <span class="number">1</span>      <span class="number">10</span>       <span class="number">0</span>       <span class="number">1</span>    <span class="number">0.91</span>    <span class="number">0.99</span>    <span class="number">0.29</span>    <span class="number">0.99</span></span><br><span class="line"># Rows examine  <span class="number">43</span>  <span class="number">11.02</span>k   <span class="number">1.00</span>k   <span class="number">1.00</span>k   <span class="number">1.00</span>k   <span class="number">1.00</span>k       <span class="number">0</span>   <span class="number">1.00</span>k</span><br><span class="line"># Query size     <span class="number">2</span>     <span class="number">402</span>      <span class="number">35</span>      <span class="number">41</span>   <span class="number">36.55</span>   <span class="number">40.45</span>    <span class="number">2.11</span>   <span class="number">34.95</span></span><br><span class="line"># String:</span><br><span class="line"># Databases    test</span><br><span class="line"># Hosts        localhost</span><br><span class="line"># Users        root</span><br><span class="line"># Query_time distribution</span><br><span class="line">#   <span class="number">1</span>us</span><br><span class="line">#  <span class="number">10</span>us</span><br><span class="line"># <span class="number">100</span>us  ################################################################</span><br><span class="line">#   <span class="number">1</span>ms  #####################################################</span><br><span class="line">#  <span class="number">10</span>ms</span><br><span class="line"># <span class="number">100</span>ms</span><br><span class="line">#    <span class="number">1</span>s</span><br><span class="line">#  <span class="number">10</span>s+</span><br><span class="line">show variables like <span class="string">'slow_query_log'</span>\G</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">SELECT st.* FROM performance_schema.events_statements_current st JOIN performance_schema.threads thr ON thr.thread_id = st.thread_id WHERE thr.processlist_id = <span class="number">4</span>\G</span><br><span class="line"># *************************** <span class="number">1.</span> row ***************************</span><br><span class="line">#            id: <span class="number">1</span></span><br><span class="line">#   select_type: SIMPLE</span><br><span class="line">#         table: thr</span><br><span class="line">#    partitions: NULL</span><br><span class="line">#          type: ALL</span><br><span class="line"># possible_keys: NULL</span><br><span class="line">#           key: NULL</span><br><span class="line">#       key_len: NULL</span><br><span class="line">#           <span class="built_in">ref</span>: NULL</span><br><span class="line">#          rows: <span class="number">256</span></span><br><span class="line">#      filtered: <span class="number">10.00</span></span><br><span class="line">#         Extra: Using where</span><br><span class="line"># *************************** <span class="number">2.</span> row ***************************</span><br><span class="line">#            id: <span class="number">1</span></span><br><span class="line">#   select_type: SIMPLE</span><br><span class="line">#         table: st</span><br><span class="line">#    partitions: NULL</span><br><span class="line">#          type: ALL</span><br><span class="line"># possible_keys: NULL</span><br><span class="line">#           key: NULL</span><br><span class="line">#       key_len: NULL</span><br><span class="line">#           <span class="built_in">ref</span>: NULL</span><br><span class="line">#          rows: <span class="number">2560</span></span><br><span class="line">#      filtered: <span class="number">10.00</span></span><br><span class="line">#         Extra: Using where; Using join buffer (Block Nested Loop)</span><br></pre></td></tr></table></figure>
<p>可以看到上面有三段，第一段是汇总信息，包括执行时间、获取锁的时间、获取行数、扫描行数、查询大小；第二段根据执行的响应时间倒叙排列，包含的信息有响应时间、执行次数、平均响应时间(总响应时间/执行次数)、大致的查询语句；第三段就是具体的执行情况了，其实按正常的语句来说，是可以得到执行计划的，类似于第三段的最后一部分</p>
<p>总的来说两者都能分析慢查询，但功能和获得的信息来说 <code>pt-query-digest</code> 更加优秀。当然工具还有很多，这里也只是聊一下工具可以帮我们做些什么</p>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>在分析执行计划前，我们先来聊一下索引。首先索引是帮助 mysql 高效获取数据的数据结构，它的本质就是数据结构，mysql索引的数据结构有 <code>B-Tree</code>、<code>R-Tree</code>、<code>Hash</code>、<code>Fulltext</code>。我们最长用的索引就是 <code>B-Tree</code> 这种数据结构的索引，<code>R-Tree</code> 是空间索引，<code>Hash</code> 索引是只支持精确匹配的，而且没有排序，<code>Fulltext</code> 全文索引适用于全文检索</p>
<p>通过将主键和索引字段以及真实数据的地址，写入到索引数据结构中，利用数据结构的查询优势，来提高数据的查询效率。很显然，索引会影响数据的插入、更新和删除的速度，因为需要额外的开销去维护索引</p>
<h3 id="二叉树、B-Tree、B-Tree"><a href="#二叉树、B-Tree、B-Tree" class="headerlink" title="二叉树、B-Tree、B+Tree"></a>二叉树、B-Tree、B+Tree</h3><p>在这里大概聊一下这几个数据结构，首先二叉树数据结构，每个节点都可能有左节点和右节点。如下图是一张二叉树的图</p>
<img src="/post/sys-learn-mysql-04/binary-tree.png" class="">
<p>要使二叉树有序，只要左边子节点的数比当前节点的数小，右边子节点的数比当前节点的数大，当要查找一个数的时候，顺着节点查找，如果小于节点的数就往左边查找，大于节点的数就往右边查找，有效地减少了访问数据的次数。但是我们也发现，树可能会往一边倾斜，这样子查询的效率就会变低，极端情况时间复杂度是 O(n)。这时候，就出现了<strong>平衡二叉树</strong>，平衡二叉树会在每次插入或删除数据的时候，检查树是否倾斜，然后调整树的平衡。可以在<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank" rel="noopener">算法可视化</a>这个教学网站上找一个平衡二叉树感受一下</p>
<p>B-Tree 和 B+Tree 都是平衡树，我们先来看一下这两个树的结构</p>
<img src="/post/sys-learn-mysql-04/b-tree.jpeg" class="">
<p>B-Tree 也叫平衡多路查找树，跟上面的二叉树不同的是，它的一个节点可以有多个数据。由于计算机读取磁盘是整块读取的关系，这种数据结构就很适合数据库。我们再来看一下 B+Tree 有什么不一样</p>
<img src="/post/sys-learn-mysql-04/b+tree.jpeg" class="">
<p>可以看到，B+Tree 跟 B-Tree 唯一的不同就是所有数据都会落在叶子节点上(最下面一层的节点)。innodb 的 B-Tree 索引使用的就是 B+Tree，而且把叶子节点连起来了，并且非叶子节点只存key。由于计算机读取磁盘是按整块读的，innodb 自己也有最小的存储单位，默认是 16k，称为<strong>一页</strong>，可以通过执行 <code>show variables like &#39;innodb_page_size&#39;</code> 查看，结合以上我们可以得出，使用 B+Tree 有以下几点优势</p>
<ul>
<li>减少io读取次数，因为能更好地利用计算机读取磁盘的特性</li>
<li>比起 B-Tree 来说，更适合范围查找。因为将叶子节点连起来了，B-Tree 的话需要做更复杂的遍历</li>
<li>对比 B-Tree 来说，非叶子节点存储的数据大小更小，意味着io读取次数可能更少。因为 B+Tree 非叶子节点只存key值，数据大小可能可以一次读取，B-Tree的话可能会读取两次</li>
</ul>
<h3 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h3><p>索引按使用来分，可以分为以下几种：</p>
<ul>
<li>普通索引：即一个索引只包含单个列，一个表可以有多个单列索引</li>
<li>唯一索引：索引列的值必须唯一，但允许有空值</li>
<li>复合索引：即一个索引包含多个列</li>
</ul>
<p>索引还可以分为</p>
<ul>
<li>聚集索引(聚簇索引)：数据的物理顺序和索引列的顺序一致。可以更好地按页读取数据，减少io操作。一张表只有一个聚集索引，一般为主键。可以阅读 <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-index-types.html" target="_blank" rel="noopener">mysql5.7 Clustered and Secondary Indexes</a> 了解一下</li>
<li>非聚集索引：不是聚集索引的索引，所以一般我们创建的索引属于这一种</li>
</ul>
<h2 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h2><p>这个系列第一篇聊过，sql语句在经过语法解析后，会交给优化器进行优化，然后再执行。而执行计划是可以模拟优化器执行sql查询语句从而知道MySQL是如何处理你的SQL语句的，分析你的查询语句或是表结构的性能瓶颈。语法 <code>explain + sql语句</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> innodbt;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">select_type</th>
<th style="text-align:center">table</th>
<th style="text-align:center">partitions</th>
<th style="text-align:center">type</th>
<th style="text-align:center">possible_keys</th>
<th style="text-align:center">key</th>
<th style="text-align:center">key_len</th>
<th style="text-align:center">ref</th>
<th style="text-align:center">rows</th>
<th style="text-align:center">filtered</th>
<th style="text-align:center">Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">‘1’</td>
<td style="text-align:center">‘SIMPLE’</td>
<td style="text-align:center">‘innodbt’</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">‘ALL’</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">‘1’</td>
<td style="text-align:center">‘100.00’</td>
<td style="text-align:center">NULL</td>
</tr>
</tbody>
</table>
<p>接下来一起聊一下这些都代表什么意思</p>
<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>第一列是 id，表示查询中子句执行的顺序。顺序的原则是id相同，由上至下执行；id越大优先级越高，越先执行。比如下面的执行顺序会是 第三行 -》第一行 -》 第二行</p>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">select_type</th>
<th style="text-align:center">table</th>
<th style="text-align:center">partitions</th>
<th style="text-align:center">type</th>
<th style="text-align:center">possible_keys</th>
<th style="text-align:center">key</th>
<th style="text-align:center">key_len</th>
<th style="text-align:center">ref</th>
<th style="text-align:center">rows</th>
<th style="text-align:center">filtered</th>
<th style="text-align:center">Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">‘1’</td>
<td style="text-align:center">‘SIMPLE’</td>
<td style="text-align:center">‘i’</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">‘ALL’</td>
<td style="text-align:center">‘PRIMARY’</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">‘1’</td>
<td style="text-align:center">‘100.00’</td>
<td style="text-align:center">NULL</td>
</tr>
<tr>
<td style="text-align:center">‘1’</td>
<td style="text-align:center">‘SIMPLE’</td>
<td style="text-align:center">‘a’</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">‘eq_ref’</td>
<td style="text-align:center">‘PRIMARY’</td>
<td style="text-align:center">‘PRIMARY’</td>
<td style="text-align:center">‘4’</td>
<td style="text-align:center">‘test.i.id’</td>
<td style="text-align:center">‘1’</td>
<td style="text-align:center">‘33.33’</td>
<td style="text-align:center">‘Using where’</td>
</tr>
<tr>
<td style="text-align:center">‘2’</td>
<td style="text-align:center">‘SIMPLE’</td>
<td style="text-align:center">‘m’</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">‘eq_ref’</td>
<td style="text-align:center">‘PRIMARY’</td>
<td style="text-align:center">‘PRIMARY’</td>
<td style="text-align:center">‘4’</td>
<td style="text-align:center">‘test.i.id’</td>
<td style="text-align:center">‘1’</td>
<td style="text-align:center">‘100.00’</td>
<td style="text-align:center">‘Using index’</td>
</tr>
</tbody>
</table>
<h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><p>查询的类型，作用是用于区别普通查询、联合查询、子查询等的复杂查询。一共有以下几种类型</p>
<ul>
<li>SIMPLE 简单查询。查询中不包含子查询或者UNION</li>
<li>PRIMARY 最外层查询。查询中若包含任何复杂的子部分，最外层查询则被标记为</li>
<li>SUBQUERY 子查询。在SELECT或WHERE列表中包含了子查询</li>
<li>DERIVED 衍生查询。在FROM列表中包含的子查询被标记为DERIVED(衍生)MySQL会递归执行这些子查询, 把结果放在临时表里</li>
<li>UNION union的第二个select语句</li>
<li>UNION RESULT 从UNION表获取结果的SELECT</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> t1.*,(<span class="keyword">select</span> t2.id <span class="keyword">from</span> myisamt t2 <span class="keyword">where</span> t2.id = <span class="number">1</span>) <span class="keyword">from</span> innodbt t1;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">select_type</th>
<th style="text-align:center">table</th>
<th style="text-align:center">partitions</th>
<th style="text-align:center">type</th>
<th style="text-align:center">possible_keys</th>
<th style="text-align:center">key</th>
<th style="text-align:center">key_len</th>
<th style="text-align:center">ref</th>
<th style="text-align:center">rows</th>
<th style="text-align:center">filtered</th>
<th style="text-align:center">Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">‘1’</td>
<td style="text-align:center">‘PRIMARY’</td>
<td style="text-align:center">‘t1’</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">‘ALL’</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">‘1’</td>
<td style="text-align:center">‘100.00’</td>
<td style="text-align:center">NULL</td>
</tr>
<tr>
<td style="text-align:center">‘2’</td>
<td style="text-align:center">‘SUBQUERY’</td>
<td style="text-align:center">‘t2’</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">‘const’</td>
<td style="text-align:center">‘PRIMARY’</td>
<td style="text-align:center">‘PRIMARY’</td>
<td style="text-align:center">‘4’</td>
<td style="text-align:center">‘const’</td>
<td style="text-align:center">‘1’</td>
<td style="text-align:center">‘100.00’</td>
<td style="text-align:center">‘Using index’</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 衍生查询</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> t1.* <span class="keyword">from</span> innodbt t1, (<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">id</span>) <span class="keyword">as</span> s <span class="keyword">from</span> myisamt t2) s2 <span class="keyword">where</span> t1.id = s2.s;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">select_type</th>
<th style="text-align:center">table</th>
<th style="text-align:center">partitions</th>
<th style="text-align:center">type</th>
<th style="text-align:center">possible_keys</th>
<th style="text-align:center">key</th>
<th style="text-align:center">key_len</th>
<th style="text-align:center">ref</th>
<th style="text-align:center">rows</th>
<th style="text-align:center">filtered</th>
<th style="text-align:center">Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">‘1’</td>
<td style="text-align:center">‘PRIMARY’</td>
<td style="text-align:center">‘<derived2>‘</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">‘system’</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">‘1’</td>
<td style="text-align:center">‘100.00’</td>
<td style="text-align:center">NULL</td>
</tr>
<tr>
<td style="text-align:center">‘1’</td>
<td style="text-align:center">‘PRIMARY’</td>
<td style="text-align:center">‘t1’</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">‘const’</td>
<td style="text-align:center">‘PRIMARY’</td>
<td style="text-align:center">‘PRIMARY’</td>
<td style="text-align:center">‘4’</td>
<td style="text-align:center">‘const’</td>
<td style="text-align:center">‘1’</td>
<td style="text-align:center">‘100.00’</td>
<td style="text-align:center">NULL</td>
</tr>
<tr>
<td style="text-align:center">‘2’</td>
<td style="text-align:center">‘DERIVED’</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">‘Select tables optimized away’</td>
</tr>
</tbody>
</table>
<h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><p>显示这一行的数据是关于哪张表的</p>
<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p><strong>重要的参考数据</strong>，type表示访问类型，结果值从最好到最坏依次是 <code>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index&gt; ALL</code>。但我们真正需要记住的是这个顺序 <code>system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;ALL</code>，我们的目标是达到 range 和 ref</p>
<ul>
<li>system 表只有一行记录（等于系统表）</li>
<li>const 索引一次就找到了。比如主键或唯一索引</li>
<li>eq_ref 主键或唯一索引扫描。比如 <code>select * from t1, t2 where t1.id = t2.id</code></li>
<li>ref 意味着使用到了索引。非唯一性索引扫描，返回匹配某个单独值的所有行</li>
<li>range between、&lt;、&gt;、in 范围查询在索引上</li>
<li>index <strong>这个不是使用到索引</strong>。查询的结果全为索引列的时候，这种也是全表扫描索引文件</li>
<li>all 扫描全表</li>
</ul>
<h3 id="possible-key-amp-key"><a href="#possible-key-amp-key" class="headerlink" title="possible_key &amp; key"></a>possible_key &amp; key</h3><p><strong>possible_key 是指可能会使用的索引；key 是指实际上使用到的索引</strong></p>
<p>有时候由于 sql 语句问题，可能会使用索引，但实际上没有使用到索引，就会出现 possible_key 有值而 key 为 null；但也有时候，可能不会使用到索引，但实际上又使用到了索引，就会出现 possible_key 为 null，而 key 有值</p>
<h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h3><p>key_len 表示索引中使用的字节数，可通过该列计算查询中使用的索引长度</p>
<ul>
<li>在不损失精确性的情况下，长度越短越好。因为索引占用字节数短有助于节省空间和提高索引的搜索效率</li>
<li>在使用复合索引的时候，key_len 可以判断所有的索引字段是否都被查询用到。这个时候，长度越长越好，意味着使用到的索引越多，这个我们晚点再聊</li>
</ul>
<p>索引的长度跟索引字段的数据类型有关系，跟是否为 null 有关系，跟是否变长有关系，还跟字符的编码有关系，我们可以通过计算索引的长度(key_len)来分析使用索引的情况。我们先来看一下有哪些长度规则，然后再看几个例子</p>
<ul>
<li>字符类型的长度跟字符编码有关系，latin占1个字节，gbk占2个字节，utf-8占3个字节，utf8mb4占4个字节</li>
<li>变长数据类型需要 2 个字节维护</li>
<li>数据类型是否为 null 需要 1 个字节维护</li>
<li>复合类型的 key_len 等于使用到的索引长度之合</li>
</ul>
<p>接下来我们看一下例子，结合下面的例子，不难得出刚刚的结论</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`idx_test`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`created_at`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">char</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`c_1`</span> <span class="built_in">int</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`c_2`</span> <span class="built_in">char</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`c_3`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_name`</span> (<span class="string">`name`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_createdAt`</span> (<span class="string">`created_at`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_phone`</span> (<span class="string">`phone`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_desc`</span> (<span class="string">`desc`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_c123`</span> (<span class="string">`c_1`</span>,<span class="string">`c_2`</span>,<span class="string">`c_3`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- key_len 为 44；44 = 4 * 11。utf8mb4 一个字符占4个字节</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> idx_test <span class="keyword">where</span> phone = <span class="string">'a'</span>;</span><br><span class="line"><span class="comment">-- key_len 为 45；45 = 4 * 11 + 1。因为 name 不是 not null 的，所以需要多 1 个字节维护</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> idx_test <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'a'</span>;</span><br><span class="line"><span class="comment">-- key_len 为 47；47 = 4 * 11 + 1 + 2。因为 desc 不是 not null 需要多 1 个字节维护，并且是变长的需要再多 2 个字节维护</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> idx_test <span class="keyword">where</span> <span class="string">`desc`</span> = <span class="string">'a'</span>;</span><br><span class="line"><span class="comment">-- key_len 为 5；datetime 类型为 5 个字节</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> idx_test <span class="keyword">where</span> created_at = <span class="string">'2019-10-22'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- key_len 为 17;17 = 4 + 4*2 + 5。复合索引的索引长度为使用到索引的和</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> idx_test <span class="keyword">where</span> c_1 = <span class="string">'a'</span> <span class="keyword">and</span> c_2 = <span class="string">'b'</span> <span class="keyword">and</span> c_3 = <span class="string">'c'</span>;</span><br><span class="line"><span class="comment">-- key_len 为 12;12 = 4 + 4*2。这里使用到了 c_1 和 c_2 两个字段</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> idx_test <span class="keyword">where</span> c_1 = <span class="string">'a'</span> <span class="keyword">and</span> c_2 = <span class="string">'b'</span>;</span><br></pre></td></tr></table></figure>
<p>我们再聊一下复合索引，复合索引有一个原则，叫最左前缀原则，即建立索引的顺序(比如 c_1，c_2，c_3)，在使用到的索引字段没有最左边顺序的索引，这个复合索引会失效；并且复合索引中，使用范围查询，会让后面的索引字段失效，比如 c_1 使用范围查询，c_2、c_3 就利用不到索引。这不是很好解释，我们来看例子</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 这条 sql 没有使用到索引，因为没有使用到 c_1，后面的字段即使用到，索引也失效了</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> idx_test <span class="keyword">where</span> c_2 = <span class="string">'b'</span> <span class="keyword">and</span> c_3 = <span class="string">'c'</span>;</span><br><span class="line"><span class="comment">-- key_len 为 4，这说明只使用到 c_1 字段，c_3 并没有使用到，因为中间 c_2 断了</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> idx_test <span class="keyword">where</span> c_1 = <span class="string">'a'</span> <span class="keyword">and</span> c_3 = <span class="string">'c'</span>;</span><br><span class="line"><span class="comment">-- key_len 为 12，这说明字段的使用顺序没有什么影响，只要使用到的字段是从左往右的</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> idx_test <span class="keyword">where</span> c_2 = <span class="string">'b'</span> <span class="keyword">and</span> c_1 = <span class="string">'a'</span>;</span><br><span class="line"><span class="comment">-- key_len 为 4，这说明复合索引使用范围查询的时候，会使后面的索引字段失效</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> idx_test <span class="keyword">where</span> c_2 = <span class="string">'b'</span> <span class="keyword">and</span> c_3 = <span class="string">'2019-10-22'</span> <span class="keyword">and</span> c_1 &gt; <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>ref 显示索引的哪一列被使用了，有可能是一个常量值。下面执行 <code>explain select * from idx_test where c_1 = &#39;a&#39; and c_2 = &#39;b&#39;</code></p>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">select_type</th>
<th style="text-align:center">table</th>
<th style="text-align:center">partitions</th>
<th style="text-align:center">type</th>
<th style="text-align:center">possible_keys</th>
<th style="text-align:center">key</th>
<th style="text-align:center">key_len</th>
<th style="text-align:center">ref</th>
<th style="text-align:center">rows</th>
<th style="text-align:center">filtered</th>
<th style="text-align:center">Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">‘1’</td>
<td style="text-align:center">‘SIMPLE’</td>
<td style="text-align:center">‘idx_test’</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">‘ref’</td>
<td style="text-align:center">‘idx_c123’</td>
<td style="text-align:center">‘idx_c123’</td>
<td style="text-align:center">‘12’</td>
<td style="text-align:center">‘const,const’</td>
<td style="text-align:center">‘1’</td>
<td style="text-align:center">‘100.00’</td>
<td style="text-align:center">NULL</td>
</tr>
</tbody>
</table>
<h3 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h3><p>row 大致估算出找到所需的记录所需要读取的行数</p>
<h3 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h3><p>这也是<strong>重要参考参数</strong>，Extra 表示额外信息，常见的额外信息包括</p>
<ul>
<li>Using filesort：没有使用索引排序，而是按照外部排序</li>
<li>Using temporary：使用了临时表，常见于 order by 和 group by</li>
<li>Using index：是否用了覆盖索引</li>
<li>Using where：使用了 where 过滤</li>
<li>Using join buffer：使用了连接缓存</li>
<li>Impossible where：不能得到数据的条件</li>
</ul>
<p>其中 Using filesort 和 Using temporary 是可以做优化的，目标是不让这两个信息出现在 Extra 中。我们来看两个例子，这里有一个很关键的理解，<strong>覆盖索引是指数据可以直接从索引文件或索引的数据结构中获取，而不需要做再次查询获取额外数据</strong></p>
<p>第一个例子，当 order by 的时候，如果使用了索引字段意外的字段，Extra 则为 filesort；相反，则是使用了覆盖索引，覆盖索引的效率比 filesort 高，需要注意的是主键 id 也在索引数据结构中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Extra 为 Using filesort</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> idx_test i <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span>;</span><br><span class="line"><span class="comment">-- Extra 为 Using index</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">name</span>, <span class="keyword">id</span> <span class="keyword">from</span> idx_test i <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">name</span>;</span><br></pre></td></tr></table></figure>
<p>第二个例子，第二条语句跟第一条语句唯一的不同就是 group by 多了一个 c_1 字段，因为 c_1,c_2,c_3 组成了复合索引，由于最左前缀原则，第一条语句没有使用到索引。当然实际生产中需要结合业务进行这样的 sql 优化，比如调整一下索引的顺序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Extra 为 Using where; Using temporary; Using filesort</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> c_1, c_2, c_3, <span class="keyword">name</span> <span class="keyword">from</span> idx_test i <span class="keyword">where</span> c_2 <span class="keyword">in</span> (<span class="string">'a'</span>, <span class="string">'b'</span>) <span class="keyword">group</span> <span class="keyword">by</span> c_2;</span><br><span class="line"><span class="comment">-- Extra 为 Using where</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> c_1, c_2, c_3, <span class="keyword">name</span> <span class="keyword">from</span> idx_test i <span class="keyword">where</span> c_2 <span class="keyword">in</span> (<span class="string">'a'</span>, <span class="string">'b'</span>) <span class="keyword">group</span> <span class="keyword">by</span> c_1, c_2;</span><br></pre></td></tr></table></figure>
<h2 id="常见的sql优化"><a href="#常见的sql优化" class="headerlink" title="常见的sql优化"></a>常见的sql优化</h2><p>在了解了索引和执行计划信息之后，我们就可以来看看 sql 优化常用的策略</p>
<ul>
<li>尽量全值匹配。当使用复合索引的时候，尽量使用到全部字段(即 key_len 达到最大)</li>
<li>最佳左前缀匹配。复合索引中从最左边的列开始，并且不跳过中间的列</li>
<li>不在索引上做任何操作，比如计算，or，函数等会使索引失效。因为这样会使索引失效<ul>
<li><code>explain select * from idx_test i where left(phone, 1) = &#39;a&#39;</code> left 函数会让索引失效</li>
</ul>
</li>
<li>复合索引中，需要返回查询的列放在最后。因为范围查询会让后面的列失效，上面有例子</li>
<li>覆盖索引尽量使用，少用 select *<ul>
<li><code>explain select c_1, c_2, c_3, id from idx_test where c_1 = &#39;a&#39;</code> Extra 会使用 Using index，而 <code>explain select * from idx_test where c_1 = &#39;a&#39;</code> 则不会</li>
</ul>
</li>
<li>不等于要慎用<ul>
<li><code>explain select * from idx_test i where phone != &#39;a&#39;</code> 索引将失效</li>
<li>可以通过使用覆盖索引提高效率 <code>explain select phone from idx_test i where phone != &#39;a&#39;</code></li>
</ul>
</li>
<li>null/not null 会影响索引使用情况。当列是 not null 时(phone)，查询<code>where phone is null</code>，直接 impossible where；查询<code>select * from idx_test where phone is not null</code> 时，索引失效；当列是 null 时(name)，查询<code>where name is null</code>，会使用索引；查询<code>select * from idx_test where name is not null</code> 时，索引失效<ul>
<li>可以通过覆盖索引提高效率。<code>explain select name from idx_test i where name is null</code> 索引生效</li>
</ul>
</li>
<li>like 要注意。当使用左通配符或左右统配符时，索引失效。比如 <code>like &#39;%a&#39;</code> 或 <code>like &#39;%a%&#39;</code></li>
<li>字符类型加引号。不加引号，索引会失效，因为数据进行了转换</li>
<li>or 改 union 效率提高。or 会让索引失效，使用 union 的话可以让索引生效，只是这个不好操作</li>
</ul>
<h3 id="批量导入优化"><a href="#批量导入优化" class="headerlink" title="批量导入优化"></a>批量导入优化</h3><p>在批量导入数据的时候，也可以进行优化。如果是一条数据一条数据导入，速度会非常慢，我们可以优化的操作有</p>
<ul>
<li>提交前关闭自动提交。比如 <code>conn.setAutoCommitted(false)</code></li>
<li>尽量使用批量 sql 语句。即将 sql 拼成 <code>insert into table (xxx,xxx) values (yyy,yyy),(zzz,zzz)...;</code></li>
<li>使用 myisam 存储引擎导入，虽然我一般不这么干，太麻烦</li>
</ul>
<p>更快的方法是通过文件进行导入，速度会比执行 sql 语句快 10 几 20倍。load_data_file</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将数据到处到文件</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">into</span> <span class="keyword">OUTFILE</span> <span class="string">'xxx文件路径'</span> <span class="keyword">from</span> table_name</span><br><span class="line"><span class="comment">-- 将文件数据导入到表</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">INFILE</span> <span class="string">'xxx文件路径'</span> <span class="keyword">into</span> <span class="keyword">table</span> table_name</span><br></pre></td></tr></table></figure>
<p>那么我们 mysql 系列就聊到这里了，我们从 Mysql 的逻辑架构存储引擎聊到了锁，再聊到事务，最后以索引和 sql 优化结束，相信大家对 mysql 有了一个稍微全面一点的认识。我们还有很多没有聊到的，比如主从复制啦，存储引擎更多的特性啦，事务日志(重做redo和回滚undo)啦，主从一致性校验啦等等。这些大家有兴趣都可以慢慢去了解，好了，下次再聊了～</p>
]]></content>
      <categories>
        <category>mysql 学习</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>【系统学习-redis】【三】高可用和集群</title>
    <url>/post/sys-learn-redis-03/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>时间过的很快，今天我们来聊一下 redis 中的高可用和集群，如果我们是自己搭建服务，不局限于 redis，很多时候都要考虑服务的高可用，当服务出现性能问题，很多时候我们都要考虑做集群。那么怎么做可以实现 redis 的高可用呢，今天我们来聊一下以下几点：</p>
<ul>
<li>redis 持久化</li>
<li>redis 主从复制</li>
<li>redis 哨兵模式</li>
<li>redis cluster</li>
</ul>
<a id="more"></a>
<h2 id="redis-持久化"><a href="#redis-持久化" class="headerlink" title="redis 持久化"></a>redis 持久化</h2><p>我们先来聊一下 redis 的持久化，因为 redis 是基于内存的，如果没有持久化，那么重启 redis，所有数据都会丢失，并且 redis 主从复制也跟持久化有关系。那么持久化是什么，持久化就是将内存中的数据同步到磁盘来避免数据丢失</p>
<h3 id="持久化方式"><a href="#持久化方式" class="headerlink" title="持久化方式"></a>持久化方式</h3><p>redis 持久化方式有两种，一种是 rdb 持久化，也叫快照，另外一种是 aof 持久化。rdb 持久化是全量复制，aof 持久化是增量复制</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">sealde-MS-<span class="number">7B23</span># tree</span><br><span class="line">.</span><br><span class="line">├── appendonly.aof</span><br><span class="line">└── dump.rdb</span><br></pre></td></tr></table></figure>
<h3 id="rdb-持久化方式"><a href="#rdb-持久化方式" class="headerlink" title="rdb 持久化方式"></a>rdb 持久化方式</h3><p>rdb 持久化把数据生成 .rdb 文件，比如 <code>/var/lib/redis/dump.rdb</code>。rdb 持久化有手动触发和自动触发，自动触发我们就不聊了，来看一下手动触发，手动触发有 <code>save</code> 和 <code>bgsave</code> 两个命令</p>
<ul>
<li>save 命令，会阻塞 redis，直到 rdb 持久化过程完成，可能会造成查时间的阻塞，线上不建议使用</li>
<li>bgsave 命令，进程执行 fork 操作创建子线程，由子线程完成持久化，阻塞时间很短</li>
</ul>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; save</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; bgsave</span><br><span class="line">Background saving started</span><br></pre></td></tr></table></figure>
<p>因为 rdb 持久化是压缩后的二进制文件，而且是全量的，所以适用于备份、灾难恢复等。那么我们怎么备份和恢复呢，其实只要 <code>bgsave</code> 持久化到 dump.rdb，恢复的时候放到 redis.conf 中 <code>dir</code> 配置的路径下，然后重启，另外 <code>config set dir /xxx/xxx</code> 可以设置 rdb 文件保存的路径。<strong>这里需要注意的是如果同时开启 rdb 和 aof 持久化，恢复的时候需要特别注意，接下来会聊到这个</strong></p>
<h3 id="aof-持久化方式"><a href="#aof-持久化方式" class="headerlink" title="aof 持久化方式"></a>aof 持久化方式</h3><p>rdb 持久化不是实时的，而且是全量的，每次操作都会创建新线程，频繁操作成本较高。redis 提供的 aof 持久化来解决这个问题，开启持久化可以执行命令 <code>config set appendonly yes</code> 或者修改配置文件 <code>/etc/redis/redis.conf</code>，设置 <code>appendonly yes</code>。aof 持久化默认是不开启的</p>
<h4 id="aof-持久化流程"><a href="#aof-持久化流程" class="headerlink" title="aof 持久化流程"></a>aof 持久化流程</h4><ul>
<li>所有写入命令会 append 追加到 aof_buf 缓冲区中</li>
<li>aof_buf 缓冲区向硬盘做 sync 同步</li>
<li>随着AOF文件越来越大，需定期对 aof 文件 rewrite 重写，达到压缩</li>
<li>当 redis 服务重启，可 load 加载 aof 文件进行恢复</li>
</ul>
<h4 id="aof-持久化相关配置"><a href="#aof-持久化相关配置" class="headerlink" title="aof 持久化相关配置"></a>aof 持久化相关配置</h4><ul>
<li>appendonly yes 开启持久化</li>
<li>appendfsync always/everysec/no 推荐使用 everysec，即每秒持久化一次</li>
<li>no-appendfsync-on-rewrite no 正在 rdb 持久化，要不要停止 aof 持久化。考虑到是否 rdb 和 aof 同时进行会对磁盘有大量的 I/O 操作，aof 的 fsync 可能会阻塞很长时间，所以默认是 no 的，但有需要可以改成 yes</li>
<li>auto-aof-rewrite-percentage 100 // aof 文件增长率为 100% 时，rewrite</li>
<li>auto-aof-rewrite-min-size 64mb // aof 文件至少超过 64mb 时才开始 rewrite</li>
<li>aof-load-truncated yes 会不会加载可能被截断的 aof 文件，yes 表示会，比如 aof 正在持久化，因为一些问题，导致没有有些字节没有写到磁盘，yes 的时候会丢弃有问题的命令然后加载成功，no 会直接报错</li>
</ul>
<h3 id="rdb-amp-aof"><a href="#rdb-amp-aof" class="headerlink" title="rdb &amp; aof"></a>rdb &amp; aof</h3><p>由于 rdb 和 aof 的特性不一样，各有优势，所以一般是一起使用，但 redis 加载数据机制有个坑的地方，就是如果开启了 aof 或者同时开启了 rdb 和 aof，redis 都会加载 aof 文件，如果没有 aof 文件则会创建一个空的 aof 文件。<strong>如果刚开始使用的是 rdb方式，然后修改配置文件 appendonly yes，接着直接重启，这样 redis 会创建一个空的 aof 文件，会直接让你的数据丢失，所以千万不能这么干！！！</strong><br>我们可以通过动态配置来规避这个问题，即执行命令 <code>config set appendonly yes</code>，然后修改配置文件，接下来就可以随便重启了，因为动态配置之后，redis 会将 rdb 数据加载到 aof 文件中。所以我们做灾备恢复的思路同样如此，先在配置文件 appendonly no，然后拷贝 dump.rdb，接下来启动，动态配置 config set appendonly yes，再接下修改配置文件 appendonly yes，这样就完成了</p>
<h2 id="redis-主从复制"><a href="#redis-主从复制" class="headerlink" title="redis 主从复制"></a>redis 主从复制</h2><p>redis 配置主从的方式有两种</p>
<ul>
<li>通过修改配置(这里包括修改配置文件和动态配置)，在配置中添加 <code>slaveof xxxx.xxx.xx.xxx 6379</code>，xxxx.xxx.xx.xxx 为 ip 地址</li>
<li>启动的时候添加参数 <code>redis-server --slaveof xxxx.xxx.xx.xxx 6379</code></li>
</ul>
<p>动态建立主从和断开主从，执行命令 <code>6381:&gt; slaveof 192.169.0.1 6380</code> 和 <code>6381:&gt; slaveof no one</code>。这里有一个<a href="https://github.com/Deeeeeeeee/ops_demos/tree/master/redis/master-slave" target="_blank" rel="noopener">redis主从测试的例子</a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">├── <span class="selector-tag">docker-compose</span><span class="selector-class">.yml</span></span><br><span class="line">├── <span class="selector-tag">redis6380</span><span class="selector-class">.conf</span></span><br><span class="line">└── <span class="selector-tag">redis6381</span><span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure>
<p>redis6380 和 redis6381 配置几乎一样，只是 redis6381.conf 加了 <code>slaveof 192.169.0.1 6380</code>，作为 6380 的从节点，当 6380 数据改变时，会同步到 6381 从节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 6380 设置值 name</span></span><br><span class="line">127.0.0.1:6380&gt; dbsize</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6380&gt; set name test</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6381 当 6380 设置 name 值后，数据会同步过来</span></span><br><span class="line">127.0.0.1:6381&gt; dbsize</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6381&gt; get name</span><br><span class="line">"test"</span><br></pre></td></tr></table></figure>
<p>另外，还有一个还有一个参数 <code>repl-disable-tcp-delay yes</code>，默认是 no，当为 no 时 master 数据更新会立即同步到 slave 中；当为 yes 时 40 ms 才会发送一次。所以跨机房或者网络环境较差的情况下，建议为 <code>yes</code><br>最后我们再来聊聊同步的过程，当 slave 节点启动时</p>
<ul>
<li>保存 master 节点信息</li>
<li>主从建立 socket 连接</li>
<li>发送 ping 命令</li>
<li>权限验证</li>
<li>同步数据</li>
<li>持续同步数据</li>
</ul>
<h2 id="redis-哨兵模式"><a href="#redis-哨兵模式" class="headerlink" title="redis 哨兵模式"></a>redis 哨兵模式</h2><p>哨兵模式是 redis 迈向高可用的重要一步，高可用即当一个服务挂了，可以自动切换到另一个服务，提供不间断的服务。我们上面聊的主从复制，其实有一个很大的问题，就是如果 master 节点挂了，需要手工进行恢复，这样即麻烦又有服务较长时间的间断，哨兵模式就是为了解决这个问题</p>
<h3 id="哨兵模式机制"><a href="#哨兵模式机制" class="headerlink" title="哨兵模式机制"></a>哨兵模式机制</h3><img src="/post/sys-learn-redis-03/redis-sentinel.png" class="">
<p><a href="https://redis.io/topics/sentinel" target="_blank" rel="noopener">redis sentinel 官方文档</a> 哨兵模式的机制：哨兵不停地监控着 redis 实例，当一个哨兵发现 master 实例下线，会通知其他哨兵进行确认，当多个哨兵(达到 quorum即法定人数)监控到实例下线，则认为该实例下线，然后哨兵之间会投票出领导者，然后由领导者进行故障处理。如果刚好下线的实例是 master 节点，那么会让其他实例成为 master，这个过程等会再聊<br>那么<strong>哨兵监控的内容</strong>有哪一些:</p>
<ul>
<li>每隔 10s 会对所有 redis 实例发一次 info 请求，主要是连接情况，内存 CPU 使用情况</li>
<li>每隔 5s 利用 master 的 pulish/subscrib，发布自己的信息，比如 ip、port、runid、处理故障的能力等</li>
<li>每隔 1s 对所有 redis 实例和其他哨兵发一次 ping 请求</li>
</ul>
<p>哨兵监控实例，还有一个主观下线和客观下线的概念。这里有两个值需要注意，一个是 <code>is-master-down-after-milliseconds</code> 判断是否下线的时间，如果设置成30s，就算 ping 在前 28s 内没有响应，最后 1s 有响应都视为实例可以正常工作；另一个是 <code>is-master-down-by-addr &lt;ip&gt; &lt;port&gt;</code> 用来在哨兵直接确认 master 节点是否下线</p>
<ul>
<li>主观下线即哨兵发现 redis 实例下线了，但没有达到配置的 quorum</li>
<li>客观下线是针对 master 节点的，当达到了 quorum 的哨兵监控到 master 节点下线了，会认为客观下线了。所以 slave 节点和其他哨兵没有客观下线这个概念</li>
</ul>
<h3 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h3><p>哨兵模式的故障转移会有以下几个步骤</p>
<ul>
<li>确认 master 客观下线</li>
<li>选举 leader(领导者) ，leader 进行故障转移。其他哨兵称为 observers(观察着)</li>
<li>leader 选择一个 slave 节点成为 master 节点</li>
<li>晋升的 slave 节点执行 <code>slaveof no one</code></li>
<li>observers 看到晋升的 slave 节点成为 master 节点，明白故障转移开始了</li>
<li>其他 slave 节点通过 <code>slaveof &lt;host&gt; &lt;port&gt;</code> 改变他们的 master</li>
<li>当其他 slave 重新配置之后，leader 终止故障转移，将监控表(table of monitored)中移除旧 master 并用新 master 替代</li>
<li>observers 检测到所有 slave  重新配置后，同样从 table 中移除 old master 并用 new master 代替</li>
</ul>
<p>leader 的选举原理跟判断 master 节点客观下线是一样的，其中不能进行故障转移的哨兵，判断为主观下线、连接不上、ping 超过一定阈值并最迟响应的哨兵不能参与选举。leader 需要 ping 响应时间 5s 以内，runid 最小，并且在 Pub/Sub 的 channel 中表示有能力处理故障转移，最后不是 DISCONNECTED 状态。更多的条件判断请看 <a href="https://redis.io/topics/sentinel" target="_blank" rel="noopener">redis sentinel 官方文档</a><br><strong>另外 <code>replica-priority</code> 可以设置 slave 节点成为 master 的优先级</strong></p>
<h3 id="配置以及测试"><a href="#配置以及测试" class="headerlink" title="配置以及测试"></a>配置以及测试</h3><p><a href="http://download.redis.io/redis-stable/sentinel.conf" target="_blank" rel="noopener">官网 sentinel.conf</a>，官方的配置文件可以下载下来参考一下。在这里有个 <a href="https://github.com/Deeeeeeeee/ops_demos/tree/master/redis/sentinel/three-boxes" target="_blank" rel="noopener">redis-sentinel 三节点配置</a>，模型如下，即模拟三台机器，每台机器有一个 redis 实例和 redis sentinel</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">       +----+</span><br><span class="line">       |<span class="string"> M1 </span>|</span><br><span class="line">       |<span class="string"> S1 </span>|</span><br><span class="line">       +----+</span><br><span class="line">          |</span><br><span class="line"><span class="string">+----+    </span>|<span class="string">    +----+</span></span><br><span class="line">|<span class="string"> R2 </span>|<span class="string">----+----</span>|<span class="string"> R3 </span>|</span><br><span class="line">|<span class="string"> S2 </span>|<span class="string">         </span>|<span class="string"> S3 </span>|</span><br><span class="line">+----+         +----+</span><br><span class="line"></span><br><span class="line">Configuration: quorum = 2</span><br></pre></td></tr></table></figure>
<p>目录结构，这里有三个配置文件夹，代表三台机器的配置，每台配置通过 <code>docker-compose up -d</code> 启动，这里只是模拟，生产环境配置参考上面的 <code>官方 sentiel.conf</code> 和 <code>redis sentinel 官方文档</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">├── <span class="selector-tag">box1</span></span><br><span class="line">│   ├── <span class="selector-tag">docker-compose</span><span class="selector-class">.yml</span></span><br><span class="line">│   ├── <span class="selector-tag">redis6380</span><span class="selector-class">.conf</span></span><br><span class="line">│   └── <span class="selector-tag">sentinel26380</span><span class="selector-class">.conf</span></span><br><span class="line">├── <span class="selector-tag">box2</span></span><br><span class="line">│   ├── <span class="selector-tag">docker-compose</span><span class="selector-class">.yml</span></span><br><span class="line">│   ├── <span class="selector-tag">redis6381</span><span class="selector-class">.conf</span></span><br><span class="line">│   └── <span class="selector-tag">sentinel26381</span><span class="selector-class">.conf</span></span><br><span class="line">└── <span class="selector-tag">box3</span></span><br><span class="line">    ├── <span class="selector-tag">docker-compose</span><span class="selector-class">.yml</span></span><br><span class="line">    ├── <span class="selector-tag">redis6382</span><span class="selector-class">.conf</span></span><br><span class="line">    └── <span class="selector-tag">sentinel26382</span><span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure>
<p>sentinel 的配置文件如下，需要指明监控的 master 节点，如果有密码需要添加密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">port 26380</span><br><span class="line">daemonize no</span><br><span class="line">pidfile &quot;&#x2F;var&#x2F;run&#x2F;redis-sentinel.pid&quot;</span><br><span class="line">logfile &quot;&quot;</span><br><span class="line"># 监控的 master 节点和密码</span><br><span class="line">sentinel monitor mymaster 192.169.0.1 6380 2</span><br><span class="line">sentinel auth-pass mymaster 123456</span><br><span class="line"># 使用 docker 或者 nat 时，需要配置</span><br><span class="line">sentinel announce-ip &quot;192.169.0.1&quot;</span><br><span class="line">sentinel announce-port 26380</span><br></pre></td></tr></table></figure>
<p>另外 docker-compose.yml 的配置如下，这里启动了两个 docker 容器，分别启动 redis 实例和 redis-sentinel</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.0'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis-6380-boxes1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-6380-boxes1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"6380:6380"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis6380.conf:/etc/redis/redis.conf</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">sentinel-6380-boxes1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">sentinel-6380-boxes1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"26380:26380"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./sentinel26380.conf:/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/etc/redis/sentinel.conf</span> <span class="string">--sentinel</span></span><br></pre></td></tr></table></figure>
<p>sentinel 配置效果如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> redis sentinel 启动完后，生成自己的 ID，并开始监控</span></span><br><span class="line">sentinel-6380-boxes1    | 1:X 17 Nov 2019 16:29:03.025 * Running mode=sentinel, port=26380.</span><br><span class="line">sentinel-6380-boxes1    | 1:X 17 Nov 2019 16:29:03.025 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">sentinel-6380-boxes1    | 1:X 17 Nov 2019 16:29:03.028 # Sentinel ID is 631dbd0d112dc52dc10b03f037d1ed430c22f4c4</span><br><span class="line">sentinel-6380-boxes1    | 1:X 17 Nov 2019 16:29:03.028 # +monitor master mymaster 192.169.0.1 6380 quorum 2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当有其他 slave 节点加入，会同步数据给 slave 节点。slave 和 replica 是一样的</span></span><br><span class="line">redis-6380-boxes1       | 1:M 17 Nov 2019 16:29:12.606 * Replica 192.168.112.1:6381 asks for synchronization</span><br><span class="line">redis-6380-boxes1       | 1:M 17 Nov 2019 16:29:12.606 * Full resync requested by replica 192.168.112.1:6381</span><br><span class="line">redis-6380-boxes1       | 1:M 17 Nov 2019 16:29:12.606 * Starting BGSAVE for SYNC with target: disk</span><br><span class="line">redis-6380-boxes1       | 1:M 17 Nov 2019 16:29:12.606 * Background saving started by pid 18</span><br><span class="line">redis-6380-boxes1       | 18:C 17 Nov 2019 16:29:12.610 * DB saved on disk</span><br><span class="line">redis-6380-boxes1       | 18:C 17 Nov 2019 16:29:12.611 * RDB: 0 MB of memory used by copy-on-write</span><br><span class="line">redis-6380-boxes1       | 1:M 17 Nov 2019 16:29:12.702 * Background saving terminated with success</span><br><span class="line">redis-6380-boxes1       | 1:M 17 Nov 2019 16:29:12.703 * Synchronization with replica 192.168.112.1:6381 succeeded</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当有其他 sentinel 节点加入，会记录 sentinel 信息到 sentinel.conf 配置文件</span></span><br><span class="line">sentinel-6380-boxes1    | 1:X 17 Nov 2019 16:29:13.076 * +slave slave 192.168.112.1:6381 192.168.112.1 6381 @ mymaster 192.169.0.1 6380</span><br><span class="line">sentinel-6380-boxes1    | 1:X 17 Nov 2019 16:29:14.675 * +sentinel sentinel 6d06e814eb696333ba86771ee0d7d69ea10eec46 192.169.0.1 26381 @ mymaster 192.169.0.1 6380</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当 master 节点挂了的时候，sentinel 先会判断主动下线，然后判断客观下线，投票 leader，故障转移，重新调整 master</span></span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:19.644 # +sdown master mymaster 192.169.0.1 6380</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:19.706 # +odown master mymaster 192.169.0.1 6380 #quorum 3/2</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:19.706 # +new-epoch 1</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:19.706 # +try-failover master mymaster 192.169.0.1 6380</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:19.717 # +vote-for-leader 6d06e814eb696333ba86771ee0d7d69ea10eec46 1</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:19.724 # 631dbd0d112dc52dc10b03f037d1ed430c22f4c4 voted for 6d06e814eb696333ba86771ee0d7d69ea10eec46 1</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:19.724 # d26ff112e53779f599f317d424cd8d01ad3feae9 voted for 6d06e814eb696333ba86771ee0d7d69ea10eec46 1</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:19.817 # +elected-leader master mymaster 192.169.0.1 6380</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:19.817 # +failover-state-select-slave master mymaster 192.169.0.1 6380</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:19.889 # +selected-slave slave 192.168.112.1:6382 192.168.112.1 6382 @ mymaster 192.169.0.1 6380</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:19.889 * +failover-state-send-slaveof-noone slave 192.168.112.1:6382 192.168.112.1 6382 @ mymaster 192.169.0.1 6380</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:19.980 * +failover-state-wait-promotion slave 192.168.112.1:6382 192.168.112.1 6382 @ mymaster 192.169.0.1 6380</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:20.173 # +promoted-slave slave 192.168.112.1:6382 192.168.112.1 6382 @ mymaster 192.169.0.1 6380</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:20.173 # +failover-state-reconf-slaves master mymaster 192.169.0.1 6380</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:20.228 * +slave-reconf-sent slave 192.168.112.1:6381 192.168.112.1 6381 @ mymaster 192.169.0.1 6380</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:20.901 # -odown master mymaster 192.169.0.1 6380</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:21.204 * +slave-reconf-inprog slave 192.168.112.1:6381 192.168.112.1 6381 @ mymaster 192.169.0.1 6380</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:21.204 * +slave-reconf-done slave 192.168.112.1:6381 192.168.112.1 6381 @ mymaster 192.169.0.1 6380</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:21.274 # +failover-end master mymaster 192.169.0.1 6380</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:21.274 # +switch-master mymaster 192.169.0.1 6380 192.168.112.1 6382</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:21.274 * +slave slave 192.168.112.1:6381 192.168.112.1 6381 @ mymaster 192.168.112.1 6382</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:21.275 * +slave slave 192.169.0.1:6380 192.169.0.1 6380 @ mymaster 192.168.112.1 6382</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:21.915 * +slave slave 192.168.144.1:6381 192.168.144.1 6381 @ mymaster 192.168.112.1 6382</span><br><span class="line">sentinel-6381-boxes2    | 1:X 17 Nov 2019 16:49:51.281 # +sdown slave 192.169.0.1:6380 192.169.0.1 6380 @ mymaster 192.168.112.1 6382</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启原来的 mater 节点，已经变成 slave 节点了。这个需要自己手动重启</span></span><br><span class="line">sentinel-6380-boxes1    | 1:X 17 Nov 2019 16:54:44.079 # -sdown slave 192.169.0.1:6380 192.169.0.1 6380 @ mymaster 192.168.112.1 6382</span><br><span class="line">sentinel-6380-boxes1    | 1:X 17 Nov 2019 16:54:54.023 * +convert-to-slave slave 192.169.0.1:6380 192.169.0.1 6380 @ mymaster 192.168.112.1 6382</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:54.024 * Before turning into a replica, using my master parameters to synthesize a cached master: I may be able to synchronize with the new master with just a partial transfer.</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:54.024 * REPLICAOF 192.168.112.1:6382 enabled (user request from 'id=4 addr=192.168.112.1:37484 fd=10 name=sentinel-631dbd0d-cmd age=10 idle=0 flags=x db=0 sub=0 psub=0 multi=3 qbuf=153 qbuf-free=32615 obl=36 oll=0 omem=0 events=r cmd=exec')</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:54.026 # CONFIG REWRITE executed with success.</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:55.000 * Connecting to MASTER 192.168.112.1:6382</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:55.000 * MASTER &lt;-&gt; REPLICA sync started</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:55.000 * Non blocking connect for SYNC fired the event.</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:55.001 * Master replied to PING, replication can continue...</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:55.002 * Trying a partial resynchronization (request 2421560b4156a1f210937207d4a424888bbb6427:1).</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:55.004 * Full resync from master: 99e9776ff1f78c77e259087bf3fbf3a3628a1ae7:306747</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:55.004 * Discarding previously cached master state.</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:55.065 * MASTER &lt;-&gt; REPLICA sync: receiving 178 bytes from master</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:55.065 * MASTER &lt;-&gt; REPLICA sync: Flushing old data</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:55.066 * MASTER &lt;-&gt; REPLICA sync: Loading DB in memory</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:55.066 * MASTER &lt;-&gt; REPLICA sync: Finished with success</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:55.067 * Background append only file rewriting started by pid 18</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:55.093 * AOF rewrite child asks to stop sending diffs.</span><br><span class="line">redis-6380-boxes1       | 18:C 17 Nov 2019 16:54:55.093 * Parent agreed to stop sending diffs. Finalizing AOF...</span><br><span class="line">redis-6380-boxes1       | 18:C 17 Nov 2019 16:54:55.093 * Concatenating 0.00 MB of AOF diff received from parent.</span><br><span class="line">redis-6380-boxes1       | 18:C 17 Nov 2019 16:54:55.094 * SYNC append only file rewrite performed</span><br><span class="line">redis-6380-boxes1       | 18:C 17 Nov 2019 16:54:55.095 * AOF rewrite: 0 MB of memory used by copy-on-write</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:55.101 * Background AOF rewrite terminated with success</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:55.101 * Residual parent diff successfully flushed to the rewritten AOF (0.00 MB)</span><br><span class="line">redis-6380-boxes1       | 1:S 17 Nov 2019 16:54:55.102 * Background AOF rewrite finished successfully</span><br><span class="line">sentinel-6380-boxes1    | 1:X 17 Nov 2019 16:55:02.210 * +slave slave 192.168.144.1:6380 192.168.144.1 6380 @ mymaster 192.168.112.1 6382</span><br></pre></td></tr></table></figure>
<p>配置的时候需要注意的是</p>
<ul>
<li>当有配置密码的时候，master 节点也需要配置密码 <code>masterauth &lt;pwd&gt;</code>，因为如果故障恢复后，再启动这个旧的 master 节点需要密码</li>
<li>如果使用 docker 或者 nat 技术的话，需要配置 <code>sentinel announce-ip &quot;ip地址&quot;</code> 和 <code>sentinel announce-port 端口</code></li>
</ul>
<p>另外需要注意的是，高可用是会有数据丢失的，因为 master 挂了之后，需要一定的时间进行故障转移，这段时间写入到 old master 的数据将会丢弃。当然可以配置确认故障的时候，禁止写入数据到 old master，但也会有一段时间 redis 服务不可用的问题</p>
<h2 id="redis-cluster"><a href="#redis-cluster" class="headerlink" title="redis cluster"></a>redis cluster</h2>]]></content>
      <categories>
        <category>redis学习</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>【系统学习】【一】并发编程</title>
    <url>/post/sys-learn-thread-01/</url>
    <content><![CDATA[<p>有很长一段时间没有写博客，刚好最近对Java体系有系统学习的想法，有机会也可以总结一下这段时间以来的成长，虽然一直坚持写可能有更好的收获</p>
<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>并发编程分几个部分</p>
<ul>
<li>基础概念</li>
<li>Java 里的线程</li>
</ul>
<a id="more"></a>
<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="CPU-核心数和线程数"><a href="#CPU-核心数和线程数" class="headerlink" title="CPU 核心数和线程数"></a>CPU 核心数和线程数</h3><p>一直以来 CPU 核心数和线程数是 1 比 1 的关系，像 2006 年 Intel 发布的 Core2 双核处理器。2002 年 Intel 发布奔腾4处理器，推出其创新超线程(hyperthreading) 技术，使得核心数与线程数变成 1 比 2 的关系。像如今的 i9-9900 就是八核十六线程的</p>
<h3 id="CPU-时间片轮转机制"><a href="#CPU-时间片轮转机制" class="headerlink" title="CPU 时间片轮转机制"></a>CPU 时间片轮转机制</h3><p>时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法，又称RR调度。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。基本上可以理解为给队首分配一定的时间片，然后丢到队尾。</p>
<p>进程间的切换是需要一定时间的，保存和装入寄存器值及内存映像，更新各种表格和队列等，称为上下文切换</p>
<h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><p>进程是操作系统对一个正在运行的程序的一种抽象，也是程序运行进行资源分配的最小单位。进程之间资源是相互独立的</p>
<p>线程运行在进程的上下文中，同一进程下的多个线程共享同样的代码和全局数据，也是 CPU 调度的最小单位</p>
<h3 id="并行和并发"><a href="#并行和并发" class="headerlink" title="并行和并发"></a>并行和并发</h3><ul>
<li>并发指一定时间内处理多个事情的能力</li>
<li>并行指同一时间可以处理多个事情的能力</li>
</ul>
<p>一边打电话一边吃饭就是并行</p>
<p>打完电话，吃饭，洗碗，这段时间内做的事情就是并发能力</p>
<h3 id="并发编程需要解决的问题"><a href="#并发编程需要解决的问题" class="headerlink" title="并发编程需要解决的问题"></a>并发编程需要解决的问题</h3><ul>
<li>线程共享资源，存在冲突</li>
<li>死锁</li>
<li>线程数太多，导致资源消耗殆尽</li>
</ul>
<h2 id="JAVA-里的线程"><a href="#JAVA-里的线程" class="headerlink" title="JAVA 里的线程"></a>JAVA 里的线程</h2><h3 id="线程管理接口"><a href="#线程管理接口" class="headerlink" title="线程管理接口"></a>线程管理接口</h3><p>ThreadMXBean。Java 天生就是多线程，启动多个守护线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();</span><br><span class="line">    ThreadInfo[] threadInfos = threadMXBean.dumpAllThreads(<span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (ThreadInfo info : threadInfos) &#123;</span><br><span class="line">        System.out.println(info.getThreadName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面输出的结果</span></span><br><span class="line">Monitor Ctrl-Break</span><br><span class="line">Signal Dispatcher</span><br><span class="line">Finalizer</span><br><span class="line">Reference Handler</span><br><span class="line">main</span><br></pre></td></tr></table></figure>
<h3 id="启动线程的方式"><a href="#启动线程的方式" class="headerlink" title="启动线程的方式"></a>启动线程的方式</h3><ul>
<li>继承 Thread 类</li>
<li>实现 Runnable 接口</li>
<li>实现 Callable 接口</li>
</ul>
<p>但 new Thread() 不接收 Callbale 接口，所以需要 FutureTask 进行包装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableClazz</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Called."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CallResult."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    CallableClazz clazz = <span class="keyword">new</span> CallableClazz();</span><br><span class="line">    FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(clazz);</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(futureTask);</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(futureTask.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>稍微看一下 FutureTask</p>
<ul>
<li>FutureTask 实现 Runnable 接口</li>
</ul>
<img src="/post/sys-learn-thread-01/futureTask.png" class="">
<ul>
<li>FutureTask 的 run 方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以看到在 run 方法里面执行了 call 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Callable&lt;V&gt; c = callable;</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span> &amp;&amp; state == NEW) &#123;</span><br><span class="line">            V result;</span><br><span class="line">            <span class="keyword">boolean</span> ran;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result = c.call();</span><br><span class="line">                ran = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                result = <span class="keyword">null</span>;</span><br><span class="line">                ran = <span class="keyword">false</span>;</span><br><span class="line">                setException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ran)</span><br><span class="line">                set(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h3><ul>
<li>运行完毕</li>
<li>抛出异常</li>
<li>主动停止<ul>
<li>废弃方法：stop()、resume()、suspend()。因为不能保证资源的释放，容易造成程序不可知问题和死锁问题</li>
<li>新方法<ul>
<li>interrupt() 中断线程</li>
<li>isInterrupted() 判定当前线程是否中断状态</li>
<li>interrupted() static 方法，判定当前线程是否中断状态。会清除中断状态，即改为 false，这是最大的区别</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果连续调用这个方法，第二次会返回 false</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">interrupted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentThread().isInterrupted(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isInterrupted(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Tests if some Thread has been interrupted.  The interrupted state</span></span><br><span class="line"><span class="comment">    * is reset or not based on the value of ClearInterrupted that is</span></span><br><span class="line"><span class="comment">    * passed.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">(<span class="keyword">boolean</span> ClearInterrupted)</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="Java-线程是协作式线程，调用了-interrupt-不一定会中断线程"><a href="#Java-线程是协作式线程，调用了-interrupt-不一定会中断线程" class="headerlink" title="Java 线程是协作式线程，调用了 interrupt() 不一定会中断线程"></a>Java 线程是协作式线程，调用了 interrupt() 不一定会中断线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里调用了 interrupt 方法，但没有根据中断状态进行处理，是不会停止的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadClazz</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Running..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ThreadClazz clazz = <span class="keyword">new</span> ThreadClazz();</span><br><span class="line">    clazz.start();</span><br><span class="line">    clazz.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="当线程方法抛出-InterruptedException时，线程中断标志位会复位成-false"><a href="#当线程方法抛出-InterruptedException时，线程中断标志位会复位成-false" class="headerlink" title="当线程方法抛出 InterruptedException时，线程中断标志位会复位成 false"></a>当线程方法抛出 InterruptedException时，线程中断标志位会复位成 false</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  InterruptedException</span></span><br><span class="line"><span class="comment"> *          if any thread has interrupted the current thread. The</span></span><br><span class="line"><span class="comment"> *          &lt;i&gt;interrupted status&lt;/i&gt; of the current thread is</span></span><br><span class="line"><span class="comment"> *          cleared when this exception is thrown.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure>
<p>这时候如果在线程运行时，抛出 InterruptedException，而没有重新将中断标志为改为 true，是不会停止的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只要在 catch 里再调用一下 interrupt() 方法，中断标志位就会改为 true，从而退出循环</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadClazz</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"threadName:"</span> + Thread.currentThread().getName() + <span class="string">". state is "</span> +</span><br><span class="line">                        Thread.currentThread().isInterrupted());</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"Running..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"threadName:"</span> + Thread.currentThread().getName() + <span class="string">" interrupt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ThreadClazz clazz = <span class="keyword">new</span> ThreadClazz();</span><br><span class="line">    clazz.start();</span><br><span class="line">    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">    clazz.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Java-线程"><a href="#Java-线程" class="headerlink" title="Java 线程"></a>Java 线程</h3><h4 id="Java-线程状态"><a href="#Java-线程状态" class="headerlink" title="Java 线程状态"></a>Java 线程状态</h4><ul>
<li>NEW</li>
<li>RUNNABLE</li>
<li>BLOCKED</li>
<li>WAITING</li>
<li>TIMED-WAITING</li>
<li>TEMINATED</li>
</ul>
<img src="/post/sys-learn-thread-01/thread-lifecycle.jpeg" class="">
<h4 id="run-和-start-方法"><a href="#run-和-start-方法" class="headerlink" title="run 和 start 方法"></a>run 和 start 方法</h4><p>直接调用 run 方法跟调用一个对象的普通方法没有任何区别，不会让虚拟机创建线程</p>
<h4 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h4><ul>
<li>优先级分 1~10 个等级，默认等级为 5，越小越高，cpu分配时间片会越多</li>
<li>但是操作系统可能没有理会这个优先级，所以不一定会有效</li>
</ul>
<h4 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h4><ul>
<li>主线程死亡，守护线程也死亡。例如 GC 线程</li>
<li>注意 try finally 对守护线程无效</li>
</ul>
<h3 id="Java-线程间共享"><a href="#Java-线程间共享" class="headerlink" title="Java 线程间共享"></a>Java 线程间共享</h3><h4 id="synchronized-内置锁"><a href="#synchronized-内置锁" class="headerlink" title="synchronized 内置锁"></a>synchronized 内置锁</h4><p>Java 内置锁分为对象锁和类锁</p>
<ul>
<li>多个线程获取的锁是不同的对象，是可以同时运行的；多个线程获取的锁是同一个对象，是一个接着一个运行的</li>
<li>类锁锁的是 Class 对象</li>
<li>synchronized 修饰 static 方法是类锁</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    aInt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (SynchronizedEG<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        bInt++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    bInt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        bInt++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a>volatile 关键字</h4><ul>
<li>读取时从主内存读取；设置时刷新到主内存</li>
<li>没有使用锁，是最轻量级的同步机制，非线程安全</li>
<li>使用场景，只有一个线程写，多个线程读</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// volatile 不保证原子性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadClazz</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        aInt++;</span><br><span class="line">        System.out.println(<span class="string">"threadName:"</span> + Thread.currentThread().getName() + <span class="string">". aInt is "</span> + aInt);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">40</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        aInt++;</span><br><span class="line">        System.out.println(<span class="string">"threadName:"</span> + Thread.currentThread().getName() + <span class="string">". aInt is "</span> + aInt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ThreadClazz clazz0 = <span class="keyword">new</span> ThreadClazz();</span><br><span class="line">    ThreadClazz clazz1 = <span class="keyword">new</span> ThreadClazz();</span><br><span class="line">    ThreadClazz clazz2 = <span class="keyword">new</span> ThreadClazz();</span><br><span class="line">    ThreadClazz clazz3 = <span class="keyword">new</span> ThreadClazz();</span><br><span class="line"></span><br><span class="line">    clazz0.start();</span><br><span class="line">    clazz1.start();</span><br><span class="line">    clazz2.start();</span><br><span class="line">    clazz3.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">threadName:Thread-<span class="number">0</span>. aInt is <span class="number">1</span></span><br><span class="line">threadName:Thread-<span class="number">1</span>. aInt is <span class="number">1</span></span><br><span class="line">threadName:Thread-<span class="number">3</span>. aInt is <span class="number">3</span></span><br><span class="line">threadName:Thread-<span class="number">2</span>. aInt is <span class="number">3</span></span><br><span class="line">threadName:Thread-<span class="number">0</span>. aInt is <span class="number">4</span></span><br><span class="line">threadName:Thread-<span class="number">1</span>. aInt is <span class="number">5</span></span><br><span class="line">threadName:Thread-<span class="number">3</span>. aInt is <span class="number">6</span></span><br><span class="line">threadName:Thread-<span class="number">2</span>. aInt is <span class="number">7</span></span><br></pre></td></tr></table></figure>
<h4 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h4><ul>
<li>用空间换线程的安全性</li>
<li>线程级别变量隔离</li>
<li>主键为线程，值为需要存的值</li>
</ul>
<h3 id="线程协作"><a href="#线程协作" class="headerlink" title="线程协作"></a>线程协作</h3><h4 id="等待和通知"><a href="#等待和通知" class="headerlink" title="等待和通知"></a>等待和通知</h4><p>Java 线程协作中有一对方法 wait/notify/notifyAll，最典型的应用是生产和消费者模式</p>
<p>这里有一个标准的范式</p>
<ul>
<li>等待方<ul>
<li>获取对象的锁</li>
<li>循环里判断是否满足条件，不满足调用 wait</li>
<li>如果满足，执行业务逻辑</li>
</ul>
</li>
<li>通知方<ul>
<li>获取对象的锁</li>
<li>改变条件</li>
<li>通知所有等待的线程</li>
</ul>
</li>
</ul>
<p>具体到代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadClazz</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WaitClazz waitClazz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadClazz</span><span class="params">(WaitClazz clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.waitClazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程进入等待状态，等待被通知</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.waitClazz.waitSomething();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"thread is:"</span> + <span class="keyword">this</span>.getName() + <span class="string">". 结束线程"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitClazz</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 是否需要等待的条件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> waitFlag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">waitSomething</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (waitFlag) &#123;</span><br><span class="line">            wait();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"接收到通知，继续干活"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notifySomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        waitFlag = <span class="keyword">false</span>;</span><br><span class="line">        notify();</span><br><span class="line">        System.out.println(<span class="string">"发出通知信号"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    WaitClazz waitClazz = <span class="keyword">new</span> WaitClazz();</span><br><span class="line"></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadClazz(waitClazz));</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadClazz(waitClazz));</span><br><span class="line">    Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadClazz(waitClazz));</span><br><span class="line">    Thread t4 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadClazz(waitClazz));</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t3.start();</span><br><span class="line">    t4.start();</span><br><span class="line"></span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    waitClazz.notifySomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里要注意 notify 和 notifyAll 的区别，notify 会选取一个线程进行唤醒，有时候唤醒的线程并不是完成你工作的线程。所以尽量使用 notifyAll 进行唤醒</p>
</blockquote>
<h4 id="等待超时范式"><a href="#等待超时范式" class="headerlink" title="等待超时范式"></a>等待超时范式</h4><p>等待超时常用于连接池</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">long</span> overtime = now+T;</span><br><span class="line"><span class="keyword">long</span> remain = T;</span><br><span class="line"><span class="keyword">while</span> (result 不满足条件 &amp;&amp; remain &gt; <span class="number">0</span>) &#123;</span><br><span class="line">wait(remain);</span><br><span class="line">remain = overtime - now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>
<p>一个自定义数据库连接池的例子。当 wait 超时时，这里返回了 null，实际情况会抛出异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现 java.sql.Connection 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlConnection</span> <span class="keyword">implements</span> <span class="title">Connection</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Statement <span class="title">createStatement</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">70</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现连接池</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlConnectionPool</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数据库连接容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedList&lt;SqlConnection&gt; pool = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqlConnectionPool</span><span class="params">(<span class="keyword">int</span> initialSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; initialSize; i++) &#123;</span><br><span class="line">                pool.addLast(<span class="keyword">new</span> SqlConnection());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlConnection <span class="title">getConn</span><span class="params">(<span class="keyword">long</span> mills)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.pool) &#123;</span><br><span class="line">            <span class="comment">// 没有超时时间，一直等待通知</span></span><br><span class="line">            <span class="keyword">if</span> (mills &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">this</span>.pool.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.pool.wait();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.pool.removeFirst();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> overtime = System.currentTimeMillis() + mills;</span><br><span class="line">                <span class="keyword">long</span> remain = mills;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">this</span>.pool.isEmpty() &amp;&amp; remain &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.pool.wait(remain);</span><br><span class="line">                    remain = overtime - System.currentTimeMillis();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.pool.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.pool.removeFirst();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseConn</span><span class="params">(SqlConnection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.pool) &#123;</span><br><span class="line">            <span class="keyword">this</span>.pool.addLast(conn);</span><br><span class="line">            <span class="keyword">this</span>.pool.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 wait 超时</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlConnectionPoolTest</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREAD_COUNT = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试时，连接池大小应当小于启动的线程数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlConnectionPool POOL = <span class="keyword">new</span> SqlConnectionPool(<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger SUCCESS_COUNT = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger TIMEOUT_COUNT = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(THREAD_COUNT);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; <span class="number">20</span>) &#123;</span><br><span class="line">            SqlConnection conn = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn = POOL.getConn(<span class="number">100</span>);</span><br><span class="line">                <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    TIMEOUT_COUNT.incrementAndGet();</span><br><span class="line">                    System.out.println(String.format(<span class="string">"%s线程获取连接超时"</span>, <span class="keyword">this</span>.getName()));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    conn.createStatement();</span><br><span class="line">                    conn.commit();</span><br><span class="line">                    SUCCESS_COUNT.incrementAndGet();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"获取数据库连接失败"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"数据库语句执行有问题"</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    POOL.releaseConn(conn);</span><br><span class="line">                &#125;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        latch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREAD_COUNT; i++) &#123;</span><br><span class="line">            SqlConnectionPoolTest thread = <span class="keyword">new</span> SqlConnectionPoolTest();</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        latch.await();</span><br><span class="line">        System.out.println(<span class="string">"成功获取连接数："</span> + SUCCESS_COUNT);</span><br><span class="line">        System.out.println(<span class="string">"获取连接超时数："</span> + TIMEOUT_COUNT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">...</span><br><span class="line">Thread<span class="number">-22</span>线程获取连接超时</span><br><span class="line">Thread<span class="number">-8</span>线程获取连接超时</span><br><span class="line">Thread<span class="number">-18</span>线程获取连接超时</span><br><span class="line">成功获取连接数：<span class="number">701</span></span><br><span class="line">获取连接超时数：<span class="number">299</span></span><br></pre></td></tr></table></figure>
<h4 id="join-方法"><a href="#join-方法" class="headerlink" title="join 方法"></a>join 方法</h4><p>线程A调用了线程B的 join 方法，需要等待线程B执行完，才能继续完成工作</p>
<p>类似于邀请其他人插队一样的感觉，然后其他人还可以邀请人进行插队。。。</p>
<h4 id="几个方法对锁的影响"><a href="#几个方法对锁的影响" class="headerlink" title="几个方法对锁的影响"></a>几个方法对锁的影响</h4><ul>
<li>yeild()、sleep() 调用之后，持有的锁是不会释放的</li>
<li>调用 wait() 方法之前必须持有锁，调用之后会释放锁，wait() 方法返回后会继续持有锁</li>
<li>调用 notify() 方法之前必须持有锁，调用之后本身不会释放锁，执行完代码块时才释放。所以notify一般写在代码块的最后面</li>
</ul>
]]></content>
      <categories>
        <category>java 学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>【系统学习】【二】并发编程-常用并发工具类</title>
    <url>/post/sys-learn-thread-02/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>最近天气开始转凉，所以今天来浅聊一下常用的几个并发工具类，然后请记住 <em>Doug Lea</em>  这个名字，当有人问起这个名字，就说我经常看他写的代码。并发工具类经常用的到，面试也经常会问，平时看源码时不时会蹦出来。所以今天<em>浅聊</em>的有：</p>
<ul>
<li>Fork-Join</li>
<li>CountDownLatch 和 CyclicBarrier</li>
<li>Semaphore</li>
<li>Exchanger</li>
<li>Callable/Future/FutureTask</li>
</ul>
<a id="more"></a>
<h2 id="Fork-Join"><a href="#Fork-Join" class="headerlink" title="Fork-Join"></a>Fork-Join</h2><p>ForkJoin 框架包括 ForkJoinPool、ForkTask、RecursiveTask 和 RecursiveAction，后面两个是 ForkTask 的抽象子类。作为浅聊，我们就来了解一下它们的基本思想，怎么使用和使用的场景</p>
<h3 id="Fork-Join-基本思想"><a href="#Fork-Join-基本思想" class="headerlink" title="Fork-Join 基本思想"></a>Fork-Join 基本思想</h3><p>Fork-Join 基本思想是分而治之，是不是很熟悉的名词，快排、归并，Hadoop 的 map/reduce 中都有这种思想。其实是很常见的一种思想，一句话来说，就是分成小任务，然后再合并起来</p>
<img src="/post/sys-learn-thread-02/fork-join.png" class="">
<p>规模为N的问题，当N&lt;阈值直接解决；当N&gt;阈值，将问题分解为K个小规模问题，这些问题相互独立，与原问题形式相同，最后将子问题的解合并得到原问题的解</p>
<h3 id="Fork-Join-工作密取"><a href="#Fork-Join-工作密取" class="headerlink" title="Fork-Join 工作密取"></a>Fork-Join 工作密取</h3><p>先来看一段 jdk 里面 ForkJoinPool 的描述</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A &#123;<span class="doctag">@code</span> ForkJoinPool&#125; differs from other kinds of &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * ExecutorService&#125; mainly by virtue of employing</span></span><br><span class="line"><span class="comment"> * &lt;em&gt;work-stealing&lt;/em&gt;: all threads in the pool attempt to find and</span></span><br><span class="line"><span class="comment"> * execute tasks submitted to the pool and/or created by other active</span></span><br><span class="line"><span class="comment"> * tasks (eventually blocking waiting for work if none exist). This</span></span><br><span class="line"><span class="comment"> * enables efficient processing when most tasks spawn other subtasks</span></span><br><span class="line"><span class="comment"> * (as do most &#123;<span class="doctag">@code</span> ForkJoinTask&#125;s), as well as when many small</span></span><br><span class="line"><span class="comment"> * tasks are submitted to the pool from external clients.  Especially</span></span><br><span class="line"><span class="comment"> * when setting &lt;em&gt;asyncMode&lt;/em&gt; to true in constructors, &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * ForkJoinPool&#125;s may also be appropriate for use with event-style</span></span><br><span class="line"><span class="comment"> * tasks that are never joined.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>意思是 ForkJoinPool 跟其他 ExecutorService 不同的是它采用了工作密取 work-stealing。工作密取是分而治之分割了每个任务之后，某个线程提前完成了任务，就会去其他线程偷取任务来完成，加快执行效率。同时，第一个分配的线程是从队列中的头部拿任务，当完成任务的线程去其他队列拿任务的时候是从尾部拿任务，所以这样就避免了竞争</p>
<h3 id="Fork-Join-使用"><a href="#Fork-Join-使用" class="headerlink" title="Fork-Join 使用"></a>Fork-Join 使用</h3><p>标准范式，就是主流的使用套路</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 ForkJoinPool</span></span><br><span class="line">pool = <span class="keyword">new</span> ForkJoinPool()</span><br><span class="line">MyTask task = <span class="keyword">new</span> ForkJoinTask()</span><br><span class="line">pool.submit(task) <span class="comment">// submit、execute 是非阻塞方法。pool.invoke(task) 是阻塞的</span></span><br><span class="line">result = task.join()</span><br><span class="line"></span><br><span class="line"><span class="comment">// MyTask 实现 compute 方法</span></span><br><span class="line"><span class="keyword">if</span> (满足条件) &#123;</span><br><span class="line">  直接计算</span><br><span class="line">  将结果提交</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  拆分MyTask为两个或多个任务</span><br><span class="line">  任务fork</span><br><span class="line">  将结果提交</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里有两个 demo</p>
<ul>
<li><a href="https://github.com/Deeeeeeeee/demos/blob/master/src/main/java/com/sealde/thread/forkjoin/CalSumDemo.java" target="_blank" rel="noopener">计算数组的和</a></li>
<li><a href="https://github.com/Deeeeeeeee/demos/blob/master/src/main/java/com/sealde/thread/forkjoin/ShowFileDemo.java" target="_blank" rel="noopener">列出文件夹下的所有 java 文件</a></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THRESHOLD = ARRAY_SIZE / <span class="number">10</span>;  <span class="comment">// 阈值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] source;                       <span class="comment">// 需要求和的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> left;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(<span class="keyword">int</span>[] source, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.source = source;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ((right - left) &lt; THRESHOLD) &#123;</span><br><span class="line"><span class="comment">//                SleepTool.sleep(1);</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">                sum += source[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            MyTask leftTask = <span class="keyword">new</span> MyTask(source, left, mid);</span><br><span class="line">            MyTask rightTask = <span class="keyword">new</span> MyTask(source, mid + <span class="number">1</span>, right);</span><br><span class="line">            leftTask.fork();</span><br><span class="line">            rightTask.fork();</span><br><span class="line">            sum = leftTask.join() + rightTask.join();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CountDownLatch-和-CyclicBarrier"><a href="#CountDownLatch-和-CyclicBarrier" class="headerlink" title="CountDownLatch 和 CyclicBarrier"></a>CountDownLatch 和 CyclicBarrier</h2><p>我们先来看看这两个工具可以干一些什么事情</p>
<ul>
<li>CountDownLatch 是一个计数器，一组线程等待其他线程执行，然后再开始执行就可以使用 CountDownLatch。比如应用启动需要几个线程做完初始化工作，才开始运行</li>
<li>CyclicBarrier 是一个栅栏，线程到达栅栏被阻塞，所有线程需要都到达栅栏位置，栅栏才打开，线程继续执行</li>
</ul>
<p>这两个工具都可以协调线程，经常拿来比较，他们之间不同的是</p>
<ul>
<li>CountDownLatch 由第三方线程控制，放行条件 &gt;= 线程数</li>
<li>CyclicBarrier 由线程本身控制，放行条件 = 线程数</li>
<li>另外 CyclicBarrier(int parties, Runnable barrierAction) 栅栏开放，barrierAction 会执行</li>
</ul>
<p>这里有两个demo</p>
<ul>
<li><a href="https://github.com/Deeeeeeeee/demos/blob/master/src/main/java/com/sealde/thread/tool/CountDownLatchDemo.java" target="_blank" rel="noopener">CountDownLatch 等待初始化线程完成</a></li>
<li><a href="https://github.com/Deeeeeeeee/demos/blob/master/src/main/java/com/sealde/thread/tool/CyclicBarrierDemo.java" target="_blank" rel="noopener">CyclicBarrier 等待计算线程计算完毕</a></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CountDownLatch startSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                startSignal.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"init thread "</span> + <span class="keyword">this</span>.getName() + <span class="string">" do init work"</span>);</span><br><span class="line">            SleepTool.sleep(<span class="number">500</span>);</span><br><span class="line">            latch.countDown();</span><br><span class="line">            System.out.println(<span class="string">"init thread"</span> + <span class="keyword">this</span>.getName() + <span class="string">" continue work"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            MyTread myTread = <span class="keyword">new</span> MyTread();</span><br><span class="line">            myTread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"main thread let init thread work"</span>);</span><br><span class="line">        <span class="comment">// 开始信号</span></span><br><span class="line">        startSignal.countDown();</span><br><span class="line">        System.out.println(<span class="string">"main thread wait init work finished"</span>);</span><br><span class="line">        <span class="comment">// 等待初始化完成</span></span><br><span class="line">        latch.await();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"main thread continue work"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Semaphore-信号量"><a href="#Semaphore-信号量" class="headerlink" title="Semaphore 信号量"></a>Semaphore 信号量</h2><p>信号量：控制同时访问某个特定资源的线程数量，保证资源合理使用，用于流量控制</p>
<p><a href="https://github.com/Deeeeeeeee/demos/blob/master/src/main/java/com/sealde/thread/tool/semaphore/DBPool.java" target="_blank" rel="noopener">这里模拟一个数据库连接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBPool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedList&lt;SqlConnection&gt; pool = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 可以使用连接</span></span><br><span class="line">    <span class="keyword">private</span> Semaphore canUsed = <span class="keyword">new</span> Semaphore(<span class="number">20</span>);</span><br><span class="line">    <span class="comment">// 已经使用连接</span></span><br><span class="line">    <span class="keyword">private</span> Semaphore hasUsed = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            pool.addLast(<span class="keyword">new</span> SqlConnection());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlConnection <span class="title">takeConn</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        canUsed.acquire();</span><br><span class="line">        SqlConnection conn;</span><br><span class="line">        <span class="keyword">synchronized</span> (pool) &#123;</span><br><span class="line">            conn = pool.removeFirst();</span><br><span class="line">        &#125;</span><br><span class="line">        hasUsed.release();</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseConn</span><span class="params">(SqlConnection conn)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        hasUsed.acquire();</span><br><span class="line">        <span class="keyword">synchronized</span> (pool) &#123;</span><br><span class="line">            pool.addLast(conn);</span><br><span class="line">        &#125;</span><br><span class="line">        canUsed.release();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DBPool pool = <span class="keyword">new</span> DBPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    SqlConnection connect = pool.takeConn();</span><br><span class="line">                    System.out.println(<span class="string">"Thread_"</span>+Thread.currentThread().getId()</span><br><span class="line">                            +<span class="string">"_获取数据库连接共耗时【"</span>+(System.currentTimeMillis()-start)+<span class="string">"】ms."</span>);</span><br><span class="line">                    connect.createStatement();</span><br><span class="line">                    connect.commit();</span><br><span class="line">                    System.out.println(<span class="string">"查询数据完成，归还连接！"</span>);</span><br><span class="line">                    pool.releaseConn(connect);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Exchanger"><a href="#Exchanger" class="headerlink" title="Exchanger"></a>Exchanger</h2><p>交换线程数据的工具。两个线程间的数据交换，使用场景，只有一个生产者和一个消费者</p>
<p>由于这个只运行两个线程间进行交换，使用受到了不少限制，不是很实用，这里就不写 demo 了</p>
<h2 id="Callable-Future-FutureTask"><a href="#Callable-Future-FutureTask" class="headerlink" title="Callable/Future/FutureTask"></a>Callable/Future/FutureTask</h2><p>FutureTask 包装 Callable 常用来启动线程，跟 Runnable 不同的是，它可以有返回值。在线程池中经常可以看到</p>
<p>我们先来看看 FutureTask，可以看到 FutureTask 其实实现了 Runnable 接口</p>
<img src="/post/sys-learn-thread-02/futuretask.png" class="">
<p>再来看看 FutureTask 实现的 run 方法，可以看到执行了 Callable 的 call 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以看到在 run 方法里面执行了 call 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Callable&lt;V&gt; c = callable;</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span> &amp;&amp; state == NEW) &#123;</span><br><span class="line">            V result;</span><br><span class="line">            <span class="keyword">boolean</span> ran;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result = c.call();</span><br><span class="line">                ran = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                result = <span class="keyword">null</span>;</span><br><span class="line">                ran = <span class="keyword">false</span>;</span><br><span class="line">                setException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ran)</span><br><span class="line">                set(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Future 的几个方法平时也需要注意一下</p>
<ul>
<li>isDone 正常结束、异常结束、正常取消，都返回 true</li>
<li>isCancelled 任务完成前被取消，返回 true</li>
<li>cancel(boolean) 尝试终止任务。注意中断是协作式的<ul>
<li>任务还未开始，返回 false</li>
<li>任务开始，cancel(true)，会尝试中断在运行的任务。中断成功返回 true</li>
<li>任务已经开始，cancel(false)，不会尝试中断在运行的任务</li>
<li>任务已经结束，返回 false</li>
</ul>
</li>
</ul>
<p>好了，今天就聊到这里了，其实已经聊了一天了…</p>
]]></content>
      <categories>
        <category>java 学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>【系统学习】【三】并发编程-原子操作</title>
    <url>/post/sys-learn-thread-03/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>今晚要去打球了，就简单聊一下原子操作吧，这天气打球不怎么出汗，还是挺舒服的。并发编程很重要的是要解决共享数据带来的冲突问题，而 Java 自带的 synchronized 是阻塞的锁，有时候线程数上来的时候，简单的操作就不适合 synchronized 加锁了。有一个很重要的概念叫 CAS，这个是非阻塞的，在很多地方都有利用这个概念提高效率。不过一般情况下，都推荐使用 synchronized，因为 jvm 做了很多的优化，而且不容易出错。所以今天就聊聊以下几个方面</p>
<ul>
<li>synchronized 可能带来的问题</li>
<li>CAS 原理</li>
<li>CAS 可能带来的问题</li>
<li>JDK 中的 CAS 原子操作</li>
</ul>
<a id="more"></a>
<h2 id="synchronized-可能带来的问题"><a href="#synchronized-可能带来的问题" class="headerlink" title="synchronized 可能带来的问题"></a>synchronized 可能带来的问题</h2><p>因为是阻塞的并且是互斥的，则需要考虑以下几个问题</p>
<ul>
<li>出现饥饿<ul>
<li>永远阻塞在同步代码块中，因为有一个线程要花很长时间去执行同步代码块</li>
<li>高优先级的线程完全占用了低优先级线程的CPU时间片</li>
<li>wait 其他线程但永远不被唤醒，因为一直在唤醒其他线程</li>
</ul>
</li>
<li>拿到锁的线程一直不释放锁，其他线程一直被阻塞</li>
<li>大量竞争的时候会消耗很多CPU资源，会带来死锁或其他安全性问题</li>
</ul>
<p>还有一个活锁的概念：两个线程没有阻塞，但一直在让对方先执行，进入了死循环。可以理解为互相谦让，然后一直互相谦让</p>
<p><a href="https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java" target="_blank" rel="noopener">这里有一篇介绍死锁、活锁和饥饿的文章</a></p>
<h2 id="CAS-原理"><a href="#CAS-原理" class="headerlink" title="CAS 原理"></a>CAS 原理</h2><p>现代计算机有一个指令 cmpxchg(Compare and Exchange)，这个是原子性操作，Java 的 CAS(Compare and Swap 或者 Compare and Set) 利用的就是这个特性</p>
<p>CAS 的概念其实也很简单，但是很重要，是构成 jdk 并发包的基石。<strong>一个内存地址的值V ，期望值A，新值B。当V==A时，赋值为B，否则不做操作</strong></p>
<h2 id="CAS-可能带来的问题"><a href="#CAS-可能带来的问题" class="headerlink" title="CAS 可能带来的问题"></a>CAS 可能带来的问题</h2><ul>
<li>ABA 问题<ul>
<li>产生的原因：如果有两个线程给一个账户扣减5万元，但实际希望只操作一次，正常来说 CAS 可以保证只操作一次。但是在第一个线程执行完时，有第三个线程加了 5 万元，这时候第二个线程再执行，又扣了5万元，这就多扣了</li>
<li>解决：使用版本号解决这个问题。AtomicMarkableReference、AtomicStampedReference 就是带版本戳的</li>
</ul>
</li>
<li>开销问题<ul>
<li>产生的原因：一般情况下，CAS 操作都会配合自旋使用，自旋就是无限循环(for(;;))，这样会带来 CPU 的消耗</li>
<li>解决：限制自旋的次数</li>
</ul>
</li>
<li>只能保证一个共享变量原子操作<ul>
<li>解决：多个变量合并成一个变量来解决这个问题，或者使用 synchronized 或显示锁</li>
</ul>
</li>
</ul>
<h2 id="JDK-中的-CAS-原子操作"><a href="#JDK-中的-CAS-原子操作" class="headerlink" title="JDK 中的 CAS 原子操作"></a>JDK 中的 CAS 原子操作</h2><p>JDK 提供了很多原子操作的类，JDK 中 CAS 可以分为以下几类</p>
<ul>
<li>更新基本类型类：AtomicBoolean、AtomicInteger、AtomicLong</li>
<li>更新数组类：AtomicIntegerArray、AtomicLongArray、AtomicReferenceArray</li>
<li>更新引用类型类：AtomicReference、AtomicMarkableReference、AtomicStampedReference</li>
<li>更新字段类：AtomicReferenceFieldUpdater、AtomicIntegerFieldUpdater、AtomicLongFieldUpdater</li>
</ul>
<p>常用的 AtomicBoolean、AtomicInteger、AtomicLong、AtomicReference、AtomicMarkableReference、AtomicStampedReference</p>
<p>这里 AtomicMarkableReference、AtomicStampedReference 带版本戳，解决 ABA 问题的类。他们的区别是</p>
<ul>
<li>AtomicMarkableReference，boolean 关心是否动过</li>
<li>AtomicStampedReference，integer 动过几次。通过比较 stamp 实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jdk 里面 Excecutors 通过 AtomichInteger 记录 poolNumber 和 threadNumber</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger poolNumber = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadGroup group;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger threadNumber = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String namePrefix;</span><br><span class="line"></span><br><span class="line">    DefaultThreadFactory() &#123;</span><br><span class="line">        SecurityManager s = System.getSecurityManager();</span><br><span class="line">        group = (s != <span class="keyword">null</span>) ? s.getThreadGroup() :</span><br><span class="line">                              Thread.currentThread().getThreadGroup();</span><br><span class="line">        namePrefix = <span class="string">"pool-"</span> +</span><br><span class="line">                      poolNumber.getAndIncrement() +</span><br><span class="line">                      <span class="string">"-thread-"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(group, r,</span><br><span class="line">                              namePrefix + threadNumber.getAndIncrement(),</span><br><span class="line">                              <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.isDaemon())</span><br><span class="line">            t.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY)</span><br><span class="line">            t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一篇说的比较简单，其实 java 的 CAS 实现都是 sun.misc.Unsafe 里面的本地方法实现的。主要还是要理解这个 CAS 概念，其实概念也很容易理解。。。平时开发的时候，如果用 synchronized 或显示锁遇到有效率问题时，可以考虑使用 CAS，毕竟非阻塞</p>
]]></content>
      <categories>
        <category>java 学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>【系统学习】【四】并发编程-显示锁和AQS</title>
    <url>/post/sys-learn-thread-04/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>我们除了可以使用 synchronized 内置锁外，jdk 还提供了 ReentrantLock 等显示锁，synchronized 方便使用，显示锁在某些方面更灵活。而显示锁的基础是 AQS，其实前几篇提到的几个工具类也是由 AQS 实现的，比如 CountDownLatch，CyclicBarrier 等，可以说 AQS 占有 jdk 并发包的半壁江山。所以今天我们就聊聊以下几个方面，并且看一点源码</p>
<ul>
<li>Lock 接口</li>
<li>ReentrantLock 可重入锁</li>
<li>ReadWriteLock接口 读写锁</li>
<li>Condition 接口</li>
<li>LockSupport 工具</li>
<li>AQS(AbstractQueuedSynchronizer)<ul>
<li>模板方法设计模式</li>
<li>数据结构：节点和同步队列</li>
<li>独占式和共享式同步状态获取和释放</li>
<li>Condition 实现</li>
<li>回看ReentrantLock、ReentrantReadWriteLock实现</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="Lock-接口"><a href="#Lock-接口" class="headerlink" title="Lock 接口"></a>Lock 接口</h2><img src="/post/sys-learn-thread-04/lock.png" class="">
<p>Lock 接口是显示锁的接口，包括以下几个方法</p>
<ul>
<li>lock/unlock 获取锁/释放锁</li>
<li>tryLock 获取锁成功返回true，否则返回false。一般实现为非阻塞</li>
<li>lockInterruptibly 可中断获取锁，即线程获取锁的过程中，收到中断信号，直接抛出 InterruptedException。而 lock 不能中断</li>
<li>newCondition 创建一个条件，是用来实现 wait/notify 效果的</li>
</ul>
<p><a href="https://github.com/Deeeeeeeee/demos/blob/master/src/main/java/com/sealde/thread/lock/ReentrantLockTestDemo.java" target="_blank" rel="noopener">lock 不会中断，lockInterruptibly 会中断获取锁的过程</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LockThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          lock.lock();</span><br><span class="line">          System.out.println(<span class="string">"continue"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LockLockInterruptiblyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              lock.lockInterruptibly();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      <span class="comment">// 主线先拿到锁</span></span><br><span class="line">      lock.lock();</span><br><span class="line">      Thread.sleep(<span class="number">100</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 测试线程再拿锁的时候就被阻塞住了</span></span><br><span class="line"><span class="comment">//        LockThread thread = new LockThread();</span></span><br><span class="line">      LockLockInterruptiblyThread thread = <span class="keyword">new</span> LockLockInterruptiblyThread();</span><br><span class="line">      thread.start();</span><br><span class="line">      Thread.sleep(<span class="number">100</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 中断测试线程，LockThread 一直阻塞，而 LockLockInterruptiblyThread 中断了获取锁的过程</span></span><br><span class="line">      thread.interrupt();</span><br><span class="line">      System.out.println(<span class="string">"finished"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>我们再拿 Lock 和 synchronized 比较</p>
<ul>
<li>synchronized 代码比较简洁，而且不容易出错</li>
<li>有以下几种情况可以使用 Lock<ul>
<li>获取锁可以被中断</li>
<li>超时获取锁</li>
<li>尝试获取锁(非阻塞)</li>
<li>读多写少</li>
</ul>
</li>
</ul>
<h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><h3 id="可重入"><a href="#可重入" class="headerlink" title="可重入"></a>可重入</h3><p>ReentrantLock 是可重入锁，即可以多次获取同一个锁，并且内部会计数。另外 synchronized 也是可重入锁</p>
<p>重入例子</p>
<ul>
<li>比如线程调用了方法A拿了一次锁，在方法A里面调用了方法B拿了一次同一个锁。这时候线程拿了两次锁，当释放的时候，也需要释放两次</li>
<li>递归调用时拿了锁</li>
</ul>
<h3 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h3><p>我们先来看一下 ReentrantLock 的一个构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates an instance of &#123;<span class="doctag">@code</span> ReentrantLock&#125; with the</span></span><br><span class="line"><span class="comment"> * given fairness policy.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fair &#123;<span class="doctag">@code</span> true&#125; if this lock should use a fair ordering policy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>他们的区别</p>
<ul>
<li>公平锁：如果在时间上，先对锁进行获取的请求，一定先被满足。非公平锁则不能满足，但效率更高</li>
<li>公平锁慢是因为挂起的线程解除挂起需要一定的时间，如果这时候让新来的线程先去拿锁，就节约了这一部分时间</li>
</ul>
<p>这个说起来有点绕，等会看看源码就知道怎么回事了</p>
<h2 id="ReadWriteLock接口-读写锁"><a href="#ReadWriteLock接口-读写锁" class="headerlink" title="ReadWriteLock接口 读写锁"></a>ReadWriteLock接口 读写锁</h2><p>ReentrantLock、synchronized 是排他锁，即同一时刻只有一个锁。有时候不需要很严格的限制，希望可以有多个线程同时拥有一个锁，这时候就可以使用 ReadWriteLock。它的特点是<strong>读写锁，同一时刻允许多个读线程访问，但只有一个写线程访问，写的时候其他读和写都阻塞</strong>，适合读多写少的情况使用</p>
<p><a href="https://github.com/Deeeeeeeee/demos/blob/master/src/main/java/com/sealde/thread/lock/rw" target="_blank" rel="noopener">这个例子中使用读写锁跟synchronized相比耗时差不多是十分之一</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsRwOps</span> <span class="keyword">implements</span> <span class="title">GoodsOps</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="keyword">private</span> Goods goods;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GoodsRwOps</span><span class="params">(Goods goods)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.goods = goods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取价格</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SleepTool.sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.goods.getPrice();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置价格</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPrice</span><span class="params">(<span class="keyword">double</span> newPrice)</span> </span>&#123;</span><br><span class="line">        lock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SleepTool.sleep(<span class="number">5</span>);</span><br><span class="line">            <span class="keyword">this</span>.goods.setPrice(<span class="keyword">this</span>.goods.getPrice() + newPrice);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Condition-接口"><a href="#Condition-接口" class="headerlink" title="Condition 接口"></a>Condition 接口</h2><p>我们都知道 synchronized 有一个等待通知功能，Condition 就是为显示锁打造的等待通知，而且更灵活一点</p>
<img src="/post/sys-learn-thread-04/condition-interface.png" class="">
<p>跟之前聊的 wait/notify 一样，通过 Condition 也可以实现等待通知功能。不一样的是，一个显示锁可以创建多个 Condition，而且推荐使用 signal 方法，而不是 signalAll 方法，因为 Condition 可以精准唤醒该条件的等待线程。而 wait/notify 由于不能确定唤醒的线程是否目标等待线程，所以推荐使用 notifyAll 方法进行唤醒</p>
<p>这里还有一个地方要注意的<strong>跟wait一样，在condition.await之前需要拿锁，执行await之后，会自动释放这个锁，await执行完后又会自动获取到锁</strong></p>
<p><a href="https://github.com/Deeeeeeeee/demos/blob/master/src/main/java/com/sealde/thread/lock/ConditionDemo.java" target="_blank" rel="noopener">完整例子</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitClazz</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 是否需要等待的条件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> waitFlag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition startCd = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition endCd = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waitSomething</span><span class="params">(<span class="keyword">boolean</span> isStartSignal)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Condition condition = isStartSignal ? startCd : endCd;</span><br><span class="line">            <span class="keyword">while</span> (waitFlag) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(String.format(<span class="string">"接收到【%s】通知，继续干活"</span>, isStartSignal ? <span class="string">"开始"</span> : <span class="string">"结束"</span>));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifySomething</span><span class="params">(<span class="keyword">boolean</span> isStartSignal)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            waitFlag = <span class="keyword">false</span>;</span><br><span class="line">            Condition condition = isStartSignal ? startCd : endCd;</span><br><span class="line">            condition.signal();</span><br><span class="line">            System.out.println(String.format(<span class="string">"发出【%s】通知信号"</span>, isStartSignal ? <span class="string">"开始"</span> : <span class="string">"结束"</span>));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="LockSupport-工具"><a href="#LockSupport-工具" class="headerlink" title="LockSupport 工具"></a>LockSupport 工具</h2><p>LockSupport 是通过本地(native)方法，将线程阻塞和唤醒的工具，这个工具在 AQS，线程等多个并发工具类都有使用到，是构建同步组件的基础工具</p>
<img src="/post/sys-learn-thread-04/lockSupport.png" class="">
<ul>
<li>park 是阻塞线程</li>
<li>unpark 是唤醒线程</li>
</ul>
<h2 id="AQS-AbstractQueuedSynchronizer"><a href="#AQS-AbstractQueuedSynchronizer" class="headerlink" title="AQS(AbstractQueuedSynchronizer)"></a>AQS(AbstractQueuedSynchronizer)</h2><p>AQS 是 AbstractQueuedSynchronizer 的缩写，即抽象的同步器(队列实现的)，是很多同步组件的基础，所谓占据并发工具的半壁江山。我们先来看看它有什么功能，然后使用 AQS 实现一个自己的显示锁，然后再进一步分析 ReentrantLock 是怎么实现的，最后在看看一下其他并发工具类是如何通过 AQS 实现的。我们将会阅读不少代码</p>
<h3 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h3><p>ReentrantLock 是通过 AQS 实现的，在我们实现之前，我们得先了解一下，我们需要实现方法。而 AQS 使用了模板方法设计模式，简单的说父类给定了一个流程，子类只需要实现各自不同的部分流程，本篇就不详细说这个模式了，装不下这么多的内容 =。=</p>
<p>AQS 的方法大致可以分为以下几类</p>
<ul>
<li>模板方法<ul>
<li>独占式获取锁：accquire/accquireInterruptibly/tryAcquireNanos</li>
<li>共享式获取锁：acquireShared/acquireSharedInterruptibly/tryAcquireSharedNanos</li>
<li>独占式释放锁：release</li>
<li>共享式释放锁：releaseShared</li>
</ul>
</li>
<li>需要子类实现的方法<ul>
<li>独占式： tryAcquire/tryRelease</li>
<li>共享式： tryAcquireShared/tryReleaseShared</li>
<li>这个同步器是否独占式的：isHeldExclusively</li>
</ul>
</li>
<li>同步状态 state 相关的方法：getState/setState/compareAndSetState</li>
</ul>
<p>所谓的独占式，就是排它的意思，一个时刻只有一个线程可以拥有这个锁；共享式就是读写锁中的读锁</p>
<p>至于需要子类实现的方法，是因为 AQS 把这些方法留给子类来实现，然后在模板方法中会调用，比如 acquire 方法会调用 tryAcquire 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里 acquire 调用了 tryAcquire 方法，只是 AQS 本身没有实现 tryAcquire 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好了，我们接下来实现一个独占式的显示锁，所以我们需要实现 tryAcquire/tryRelease/isHeldExclusively 这几个方法。稍微看一下 ReentrantLock，发现 AQS 的实现是交给 Sync 这个内部类去实现的，我们也这么干</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以看到，AQS 的实现交给了 Sync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7373984872572414699L</span>;</span><br><span class="line">    <span class="comment">/** Synchronizer providing all implementation mechanics */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base of synchronization control for this lock. Subclassed</span></span><br><span class="line"><span class="comment">     * into fair and nonfair versions below. Uses AQS state to</span></span><br><span class="line"><span class="comment">     * represent the number of holds on the lock.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">      ...</span><br></pre></td></tr></table></figure>
<p>然后再观察一下发现 ReentrantLock 是根据 state 状态进行判断的，我们就也这么干，state == 1 表示拿到了锁，state == 0 表示没有拿到锁，先简单的实现一下。然后还有一个 Condition，这个直接调用 new ConditionObject() 就好了，所以最后，我们的实现如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (getState()== <span class="number">1</span>) &#123;</span><br><span class="line">                setState(<span class="number">0</span>);</span><br><span class="line">                setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> ConditionObject <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConditionObject();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Deserializes properly</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">            s.defaultReadObject();</span><br><span class="line">            setState(<span class="number">0</span>);    <span class="comment">// reset to unlocked state</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(time));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasQueuedThreads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.hasQueuedThreads();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBlocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isHeldExclusively();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们的显示锁实现还不到100行，是不是觉得挺容易的，其实真的也没有那么复杂，获取锁的时候，用 CAS 把 state 设置成 1，并且 setExclusiveOwnerThread 把当前线程设置为独占锁的线程，释放锁的时候刚好相反。这里还有个地方需要注意，释放锁的时候，因为只有一个线程进行释放锁，就不需要 CAS 了</p>
<p><a href="https://github.com/Deeeeeeeee/demos/blob/master/src/main/java/com/sealde/thread/lock/selflock/SelfLockTestDemo.java" target="_blank" rel="noopener">测试可以在这里测试</a>，或者将之前 Condition 例子中的 ReentrantLock 改成我们的 SelfLock</p>
<p><a href="https://github.com/Deeeeeeeee/demos/blob/master/src/main/java/com/sealde/thread/lock/selflock/BooleanLatch.java" target="_blank" rel="noopener">这里还有一个类似于CountDownLatch的实现</a> 这个是共享式的</p>
<h3 id="数据结构：节点和同步队列"><a href="#数据结构：节点和同步队列" class="headerlink" title="数据结构：节点和同步队列"></a>数据结构：节点和同步队列</h3><p>我们实现了一把显示锁，觉得有点兴奋，觉得有点简单，但肯定有点迷惑，AQS 到底是怎么做到的呢。我们接下来看看它是怎么实现的，一般我们做需求，首先要知道这个需求的目标是什么，然后再思考实现的思路，最后开始实现其中的细节。我们也按照这样的思路来看 AQS 的源码</p>
<ul>
<li>AQS 的功能<ul>
<li>我希望 AQS 可以解决线程竞争问题</li>
<li>我希望线程拿锁的时候如果失败就阻塞，等到有机会的时候可以自动拿到锁，然后继续干活</li>
<li>我希望释放锁的时候，可以自动通知到阻塞的线程去拿锁</li>
<li>我还希望有超时功能</li>
</ul>
</li>
<li>实现思路<ul>
<li>解决竞争问题可以利用 CAS 来解决，如果 CAS 失败，就表明竞争失败。我们需要引入 state，用来 CAS</li>
<li>如果竞争失败，我们要把线程包装起来，包装成 Node，放到 FIFO(先进先出)队列当中，然后开始自旋，当 Node 前一个节点为 head 节点并且 CAS 成功，则退出自旋，将当前 Node 设置为 head 节点，继续干活</li>
<li>改变 state 状态，使 head 节点下一个自旋中的线程 CAS 可以成功</li>
<li>超时的实现在原来的实现上使用之前聊的 <a href="https://deeeeeeeee.github.io/post/sys-learn-thread-01">等待超时范式</a> 实现</li>
</ul>
</li>
</ul>
<p>带着这个思路我们可以得到下面这幅图，这个只是大概的一个流程，还有一些 waitState 和一些细节没有在这里体现，因为我们总是希望从简单或简洁开始</p>
<img src="/post/sys-learn-thread-04/AQS-state.png" class="">
<p>然后我们先来看看内部类 Node 的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 标记共享式和独占式节点</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** watiStatus 状态 */</span></span><br><span class="line">    <span class="comment">// 表示线程因为等待超时或中断而取消，需要从同步队列中移除</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 表示后续的线程需要 unparking(唤醒)，即当前线程释放锁或取消的时候去唤醒下一个线程</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 表示线程正在等待 condition 通知，处于等待队列中</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 表示共享式释放锁时，无条件地向下传播状态</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通的节点默认是 0，condition 节点默认是 CONDITION(-2)，非负就不需要 signal</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前驱节点</span></span><br><span class="line">    <span class="keyword">volatile</span> Node prev;</span><br><span class="line">    <span class="comment">// 后续节点</span></span><br><span class="line">    <span class="keyword">volatile</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被包装的线程</span></span><br><span class="line">    <span class="keyword">volatile</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// condition 中下一个等待中的节点，或者是标记共享式节点的 SHARED</span></span><br><span class="line">    Node nextWaiter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待的节点是否共享式的</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取前驱节点</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">        Node p = prev;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node() &#123;    <span class="comment">// Used to establish initial head or SHARED marker</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node(Thread thread, Node mode) &#123;     <span class="comment">// Used by addWaiter</span></span><br><span class="line">        <span class="keyword">this</span>.nextWaiter = mode;</span><br><span class="line">        <span class="keyword">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node(Thread thread, <span class="keyword">int</span> waitStatus) &#123; <span class="comment">// Used by Condition</span></span><br><span class="line">        <span class="keyword">this</span>.waitStatus = waitStatus;</span><br><span class="line">        <span class="keyword">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>容易观察到 Node 有几个状态 waitStatus</p>
<ul>
<li>CANCELLED 表示线程因为等待超时或中断而取消，需要从同步队列中移除</li>
<li>SIGNAL 表示后续的线程需要 unparking(唤醒)，即当前线程释放锁或取消的时候去唤醒下一个线程</li>
<li>CONDITION 表示线程正在等待 condition 通知，处于等待队列中</li>
<li>PROPAGATE 表示共享式释放锁时，无条件地向下传播状态</li>
<li>0 为普通节点的默认值，waitStatus 非负就不需要 signal</li>
</ul>
<p>然后看看 AQS 的字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractQueuedSynchronizer</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractOwnableSynchronizer</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 首尾节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node head;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node tail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AQS 状态，由子类定义 state 状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// static 字段，用来支持 CAS 操作。offset 表示字段在对象中的偏移量，这个跟底层的内存地址排列有关</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> stateOffset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> headOffset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> tailOffset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> waitStatusOffset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> nextOffset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到这里，我们可以确定 AQS 使用的是<strong>双向队列</strong>数据结构，这个大家都知道原理是什么样的，就不解释了。然后节点包装了线程，同步队列先进先出(FIFO)，当线程去拿锁拿不到的时候，就需要进入同步队列</p>
<h3 id="独占式和共享式同步状态获取和释放"><a href="#独占式和共享式同步状态获取和释放" class="headerlink" title="独占式和共享式同步状态获取和释放"></a>独占式和共享式同步状态获取和释放</h3><p>接下来我们该看多一点源码了。我们先来看独占式锁的获取和释放，方法有以下几个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先尝试获取锁，如果失败则加入同步队列，并开始自旋获取锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果线程是中断状态，抛出 InterruptedException；否则尝试获取锁，如果失败，则加入同步队列，并开始自旋获取锁</span></span><br><span class="line"><span class="comment">// 当收到中断信号，抛出 InterruptedException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg))</span><br><span class="line">        doAcquireInterruptibly(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果线程是中断状态，抛出 InterruptedException；否则尝试获取锁，如果失败，则加入同步队列，并开始自旋获取锁</span></span><br><span class="line"><span class="comment">// 当收到中断信号，抛出 InterruptedException</span></span><br><span class="line"><span class="comment">// 当等待超时的时候，返回 false</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquireNanos</span><span class="params">(<span class="keyword">int</span> arg, <span class="keyword">long</span> nanosTimeout)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">    <span class="keyword">return</span> tryAcquire(arg) ||</span><br><span class="line">        doAcquireNanos(arg, nanosTimeout);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试释放锁，如果释放成功，waitStatus 不是 0 则唤醒后驱节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以了解到，三个获取锁的实现其实都是差不多的，其中 tryAcquire 调用的是子类的方法，子类方法需要使用 CAS 操作，保证原子性。然后我们再看一下 addWaiter 和 acquireQueued 是怎么包装线程为 Node，接着怎么开始自旋的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将当前线程包装成 Node，然后用 CAS 将节点添加到队列尾部</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">    <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">    Node pred = tail;</span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自旋将 Node 添加进队列</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Node t = tail;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">                tail = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.prev = t;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                t.next = node;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自旋检查前驱节点是否释放锁，如果是设置 head 节点</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                failed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span> interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                <span class="comment">// 线程如果收到了中断信息号，则返回 true. 这个体现的是 java 的中断是协作式的</span></span><br><span class="line">                interrupted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到这里，是不是觉得豁然开朗了，只要前驱节点释放了锁，当前节点就可以拿到锁了。其实这时候就可以看看 CLH 锁了，可以看看 CLH 为了解决什么问题，这是 93 年的那篇<a href="ftp://ftp.cs.washington.edu/tr/1993/02/UW-CSE-93-02-02.pdf">论文</a></p>
<img src="/post/sys-learn-thread-04/AQS-node.png" class="">
<p>我们继续看一下可中断的获取锁和超时获取锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node node = addWaiter(Node.EXCLUSIVE);</span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                failed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                <span class="comment">// 只有这一句不同，抛出了异常，直接退出自旋，交给原来的线程处理</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果了解等待超时范式的话，就很容易知道这是怎么实现的了</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">doAcquireNanos</span><span class="params">(<span class="keyword">int</span> arg, <span class="keyword">long</span> nanosTimeout)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nanosTimeout &lt;= <span class="number">0L</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 超时时间</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> deadline = System.nanoTime() + nanosTimeout;</span><br><span class="line">    <span class="keyword">final</span> Node node = addWaiter(Node.EXCLUSIVE);</span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                failed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 更新超时时间</span></span><br><span class="line">            nanosTimeout = deadline - System.nanoTime();</span><br><span class="line">            <span class="comment">// 判断超时</span></span><br><span class="line">            <span class="keyword">if</span> (nanosTimeout &lt;= <span class="number">0L</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                nanosTimeout &gt; spinForTimeoutThreshold)</span><br><span class="line">                LockSupport.parkNanos(<span class="keyword">this</span>, nanosTimeout);</span><br><span class="line">            <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到这里，基本上就看完了，我们就知道了，子类在 tryAcquire 和 tryRelease 管理好 state 就能实现好锁了</p>
<h3 id="Condition-实现"><a href="#Condition-实现" class="headerlink" title="Condition 实现"></a>Condition 实现</h3><p>AQS 除了 Node 内部类，还有一个 ConditionObject 内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionObject</span> <span class="keyword">implements</span> <span class="title">Condition</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** First node of condition queue. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Node firstWaiter;</span><br><span class="line">    <span class="comment">/** Last node of condition queue. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Node lastWaiter;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个也是一个队列，我们称为等待队列跟 AQS 共用 Node 数据结构。同样的我们通过思考实现思路，不难得出下面这个流程</p>
<img src="/post/sys-learn-thread-04/condition.png" class="">
<p>我们来看看怎么进入等待队列，怎么移入同步队列的。最主要的两个方法 await 和 signal。先开 await</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等待唤醒并且不能中断</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">awaitUninterruptibly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 进入等待队列</span></span><br><span class="line">    Node node = addConditionWaiter();</span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    <span class="keyword">int</span> savedState = fullyRelease(node);</span><br><span class="line">    <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 如果节点不在同步队列中，循环</span></span><br><span class="line">    <span class="keyword">while</span> (!isOnSyncQueue(node)) &#123;</span><br><span class="line">        <span class="comment">// 挂起，等待被唤醒</span></span><br><span class="line">        LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">            interrupted = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自旋竞争锁</span></span><br><span class="line">    <span class="keyword">if</span> (acquireQueued(node, savedState) || interrupted)</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以中断的等待</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">    Node node = addConditionWaiter();</span><br><span class="line">    <span class="keyword">int</span> savedState = fullyRelease(node);</span><br><span class="line">    <span class="keyword">int</span> interruptMode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!isOnSyncQueue(node)) &#123;</span><br><span class="line">        <span class="comment">// 当有其他线程调用unpark、该线程被中断、park方法异常返回，都会被唤醒</span></span><br><span class="line">        LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 如果线程被中断，退出循环，进入同步队列</span></span><br><span class="line">        <span class="keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)</span><br><span class="line">        interruptMode = REINTERRUPT;</span><br><span class="line">    <span class="keyword">if</span> (node.nextWaiter != <span class="keyword">null</span>) <span class="comment">// clean up if cancelled</span></span><br><span class="line">        unlinkCancelledWaiters();</span><br><span class="line">    <span class="keyword">if</span> (interruptMode != <span class="number">0</span>)</span><br><span class="line">        reportInterruptAfterWait(interruptMode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将节点加入等待队列中</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addConditionWaiter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node t = lastWaiter;</span><br><span class="line">    <span class="comment">// If lastWaiter is cancelled, clean out.</span></span><br><span class="line">    <span class="keyword">if</span> (t != <span class="keyword">null</span> &amp;&amp; t.waitStatus != Node.CONDITION) &#123;</span><br><span class="line">        unlinkCancelledWaiters();</span><br><span class="line">        t = lastWaiter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// waitStatus 为 CONDITION</span></span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), Node.CONDITION);</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="keyword">null</span>)</span><br><span class="line">        firstWaiter = node;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        t.nextWaiter = node;</span><br><span class="line">    lastWaiter = node;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们发现有判断 node 是否在同步队列中，但是怎么移入到同步队列中的呢。我们再看看 signal</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取第一个等待节点进行操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">signal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isHeldExclusively())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    Node first = firstWaiter;</span><br><span class="line">    <span class="keyword">if</span> (first != <span class="keyword">null</span>)</span><br><span class="line">        doSignal(first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移出等待队列，firstWaiter 设置成下一个，由于节点可能取消了，所以需要循环</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSignal</span><span class="params">(Node first)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (firstWaiter = first.nextWaiter) == <span class="keyword">null</span>)</span><br><span class="line">            lastWaiter = <span class="keyword">null</span>;</span><br><span class="line">        first.nextWaiter = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (!transferForSignal(first) &amp;&amp;</span><br><span class="line">                (first = firstWaiter) != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 node 转换成同步队列的节点</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">transferForSignal</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * If cannot change waitStatus, the node has been cancelled.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">if</span> (!compareAndSetWaitStatus(node, Node.CONDITION, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 node 放入同步队列</span></span><br><span class="line">    Node p = enq(node);</span><br><span class="line">    <span class="keyword">int</span> ws = p.waitStatus;</span><br><span class="line">    <span class="keyword">if</span> (ws &gt; <span class="number">0</span> || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))</span><br><span class="line">        LockSupport.unpark(node.thread);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，signal 将节点移除了等待队列，并把它放到了同步队列当中，这样等待的 node 就可以开始自旋拿锁了。这样就实现了等待通知的功能</p>
<h3 id="回看ReentrantLock、ReentrantReadWriteLock实现"><a href="#回看ReentrantLock、ReentrantReadWriteLock实现" class="headerlink" title="回看ReentrantLock、ReentrantReadWriteLock实现"></a>回看ReentrantLock、ReentrantReadWriteLock实现</h3><p>我们已经知道了 AQS 的原理和它的实现了，那么我们可以回头看看 ReentrantLock 是怎么实现的。我们上面实现的 SelfLock 跟 ReentrantLock 相比，其实是不可重入的，而且也是非公平的。我们同样可以思考一下怎么实现这两个功能</p>
<ul>
<li>由于最关键的 state 管理是交给我们的，所以我们判断是同一个线程来拿锁的时候，就让它能拿成功，并且用 state 计数</li>
<li>公平锁的拿锁的时候，要判断当前线程是否是 head 的下一个节点，如果不是，就不能拿锁</li>
</ul>
<p>我们来看看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7316153563782823691L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非公平锁先尝试一次占有锁，这是一种贪婪的策略，也是比公平锁快的原因</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">            setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3000897897090466540L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">        <span class="keyword">int</span> c = getState();</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 公平锁比非公平锁多了一个限制，要先判断是否是 head 的下一个节点。hasQueuedPredecessors 是专门拿来实现公平机制的方法</span></span><br><span class="line">            <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">                compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">                setExclusiveOwnerThread(current);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">            <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">            <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">            setState(nextc);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// CAS 拿锁</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断当前线程是否独占线程</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="comment">// 将 state 计数增加</span></span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这么一看，如果同一线程多次拿锁，state 增加就好了，只要在释放的时候，再将 state 减去就行。释放锁的代码就不贴出来了</p>
<p>我们再来看一下 ReentrantReadWriteLock，先来看一下它的字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantReadWriteLock</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">ReadWriteLock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Inner class providing readlock */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.ReadLock readerLock;</span><br><span class="line">    <span class="comment">/** Inner class providing writelock */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.WriteLock writerLock;</span><br><span class="line">    <span class="comment">/** Performs all synchronization mechanics */</span></span><br><span class="line">    <span class="keyword">final</span> Sync sync;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到有两个锁，读锁和写锁，读锁使用的是共享式的，写锁是独占式的。其实实现跟独占式的差不多，只是 state 计数上不同，它将 state 分为两部分，低 16 位给独占式计数，高 16 位给共享式计数。但是共享式计数只是记线程数，具体的重入次数给到 ThreadLocal 去维护</p>
<p>由于时间关系，本篇就先到这里了，其实还有很多可以聊的。我们还没聊 AQS 共享式是怎么实现的，Latch 门闩，栅栏是怎么通过 AQS 实现的，这些就让大家去仔细探索了</p>
]]></content>
      <categories>
        <category>java 学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>【系统学习】【六】并发编程-线程池</title>
    <url>/post/sys-learn-thread-06/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>线程池其实之前已经发过一篇了，之前那篇聊的比较细节，这次就泛泛地聊一下。目前我多线程开发，基本都不直接创建 Thread 进行操作，而是使用线程池去完成任务，因为线程池有几大好处。所以几天就聊一下以下几个方面</p>
<ul>
<li>线程池的优势</li>
<li>线程池的实现原理</li>
<li>ThreadPoolExecutor</li>
<li>jdk 中预定义的线程池</li>
<li>合理配置线程池</li>
</ul>
<a id="more"></a>
<h2 id="线程池的优势"><a href="#线程池的优势" class="headerlink" title="线程池的优势"></a>线程池的优势</h2><p>由于线程的创建和销毁是比较消耗资源的，如果可以重复利用创建的线程，那么就可以提高程序的性能。那么我认为线程池的优势有以下几点</p>
<ul>
<li>降低线程创建销毁的资源消耗，因为重复利用已创建好的线程</li>
<li>提高响应速度，节约了线程创建和销毁的时间。因为创建和销毁线程也是需要不少时间的，如果直接 new Thread() 的话，这两部分时间就节省不了</li>
<li>提高线程的可管理性</li>
</ul>
<h2 id="线程池的实现原理"><a href="#线程池的实现原理" class="headerlink" title="线程池的实现原理"></a>线程池的实现原理</h2><p>先聊一下线程池有哪些功能，这里主要说 ThreadPoolExecutor，因为大多数都是使用这个线程池</p>
<ul>
<li>线程创建好，由容器保持</li>
<li>线程接收外部任务，并完成任务</li>
<li>如果任务较多，由队列容器保持</li>
<li>如果任务太多，有饱和策略进行处理</li>
<li>任务较少，减少线程</li>
<li>取消任务，关闭线程池等管理能力</li>
</ul>
<img src="/post/sys-learn-thread-06/thread-pool.png" class="">
<p>这里解释一下 ThreadPoolExecutor 提交任务后的流程</p>
<p>1 corePool 没满，则创建线程去完成任务<br>2 corePool 满了，则将任务放到阻塞队列中，等待线程获取(take/poll)任务然后执行<br>3 corePool 满了，阻塞队列也满了，但是 maximumPool 没满，创建线程去完成任务<br>4 maximumPool 也满了，交给饱和处理器进行处理</p>
<h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><p>我们来看点源码，ThreadPoolExecutor 的构造方法，提交任务，取消任务，停止线程池，饱和策略</p>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>构造方法有很多个，我们直接看最全的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 看起来就是一系列的赋值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">            <span class="keyword">null</span> :</span><br><span class="line">            AccessController.getContext();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们看看这些参数有什么作用</p>
<ul>
<li>corePoolSize 核心线程数。小于 corePoolSize，创建线程；等于 corePoolSize，任务保存到阻塞队列中</li>
<li>maximumPoolSize 允许最大线程数。= corePoolSize &amp;&amp; &lt;= maximumPoolSize &amp;&amp; 阻塞队列也满了，创建线程</li>
<li>keepAliveTime 和 TimeUnit 线程空闲下来后，存活的时间；默认情况下，这个参数只在 &gt; corePoolSize 的时候才有用</li>
<li>workQueue 保存任务的阻塞队列</li>
<li>threadFactory 创建线程的工厂。最主要给线程起名字</li>
<li>RejectedExecutionHandler<ul>
<li>AbortPolicy 直接抛出异常，默认的策略</li>
<li>CallerRunsPolicy 用调用者所在的线程执行任务</li>
<li>DiscardOldestPolicy 丢弃阻塞队列最老的任务</li>
<li>DiscardPolicy 当前任务直接丢弃</li>
</ul>
</li>
</ul>
<h3 id="提交任务"><a href="#提交任务" class="headerlink" title="提交任务"></a>提交任务</h3><p>提交任务分几种情况处理</p>
<ul>
<li>线程数小于 corePoolSize，添加线程</li>
<li>如果大于等于 corePoolSize 则将任务放进队列</li>
<li>如果队列满了，放进 maximunPoolSize</li>
<li>放失败了使用饱和策略处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">    <span class="comment">// 线程数小于 corePoolSize，添加线程</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果大于等于 corePoolSize 则将任务放进队列</span></span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果队列满了，放进 maximunPoolSize</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">        <span class="comment">// 放失败了使用饱和策略处理</span></span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="取消任务"><a href="#取消任务" class="headerlink" title="取消任务"></a>取消任务</h3><p>我们先来看 ThreadPoolExecutor 的几个变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存任务的阻塞队列</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;</span><br><span class="line"><span class="comment">// 显示锁，当添加线程，中断线程，统计线程数等的时候使用这个锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="comment">// 保持线程的容器，数据结构为 HashSet</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashSet&lt;Worker&gt; workers = <span class="keyword">new</span> HashSet&lt;Worker&gt;();</span><br><span class="line"><span class="comment">// 给 awaitTermination 功能使用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition termination = mainLock.newCondition();</span><br></pre></td></tr></table></figure>
<p>线面再来看看取消任务的方法，可以看到正在运行的任务这里不能取消</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从阻塞队列中移除任务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> removed = workQueue.remove(task);</span><br><span class="line">    tryTerminate(); <span class="comment">// In case SHUTDOWN and now empty</span></span><br><span class="line">    <span class="keyword">return</span> removed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除所有已经取消的任务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">purge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; q = workQueue;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Iterator&lt;Runnable&gt; it = q.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Runnable r = it.next();</span><br><span class="line">            <span class="keyword">if</span> (r <span class="keyword">instanceof</span> Future&lt;?&gt; &amp;&amp; ((Future&lt;?&gt;)r).isCancelled())</span><br><span class="line">                it.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ConcurrentModificationException fallThrough) &#123;</span><br><span class="line">        <span class="comment">// Take slow path if we encounter interference during traversal.</span></span><br><span class="line">        <span class="comment">// Make copy for traversal and call remove for cancelled entries.</span></span><br><span class="line">        <span class="comment">// The slow path is more likely to be O(N*N).</span></span><br><span class="line">        <span class="keyword">for</span> (Object r : q.toArray())</span><br><span class="line">            <span class="keyword">if</span> (r <span class="keyword">instanceof</span> Future&lt;?&gt; &amp;&amp; ((Future&lt;?&gt;)r).isCancelled())</span><br><span class="line">                q.remove(r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tryTerminate(); <span class="comment">// In case SHUTDOWN and now empty</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="停止线程池"><a href="#停止线程池" class="headerlink" title="停止线程池"></a>停止线程池</h3><p>这里有两个方法</p>
<ul>
<li>shutdown 设置线程状态外，只会停止所有没有执行任务的线程</li>
<li>shutdownNow 除了设置线程状态外，还会尝试停止正在运行或者暂时的任务</li>
</ul>
<p>其实主要的区别是 shutdownNow 设置线程池状态为 STOP，shutdown 设置线程池状态为 SHUTDOWN。shutdown 是可以获取到队列里面任务的，所以线程会继续执行；而 shutdownNow 获取不到任务，空闲下来，就会被销毁掉。这也就是 shutdown 会执行完队列里面任务的原因</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当状态为 STOP 状态，或者 SHUTDOWN 状态且队列为空，获取不到任务</span></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class="line">            decrementWorkerCount();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="饱和策略（拒绝策略）"><a href="#饱和策略（拒绝策略）" class="headerlink" title="饱和策略（拒绝策略）"></a>饱和策略（拒绝策略）</h3><p>当线程池关闭了或在关闭状态中，或者任务太多的时候，线程池会拒绝任务提交，这时候为了程序的健壮性，把这种情况交给 RejectedExecutionHandler 处理。我们就看其中一种处理器，CallerRunsPolicy(交给原线程执行)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CallerRunsPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CallerRunsPolicy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!e.isShutdown()) &#123;</span><br><span class="line">            <span class="comment">// 这里让原线程直接调用 run 方法，就是让原线程执行</span></span><br><span class="line">            r.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="jdk-中预定义的线程池"><a href="#jdk-中预定义的线程池" class="headerlink" title="jdk 中预定义的线程池"></a>jdk 中预定义的线程池</h2><p>jdk 中预定义了一些线程池供开发者使用，通过调用 Executors 的 static 方法创建预定义的线程池</p>
<ul>
<li>FixedThreadPool 固定线程数，适用于负载较重的服务器，使用了无界队列</li>
<li>SingleThreadExecutor 单线程，适用于顺序的执行任务，使用了无界队列</li>
<li>CachedThreadPool 会根据需要创建新线程，适用很多短期的任务，使用 SynchronousQueue</li>
<li>WorkStealingPool 基于 ForkJoinPool</li>
<li>ScheduledThreadPoolExecutor</li>
</ul>
<p>我们稍微看一下它是怎么创建，可以发现，大部分都是使用 ThreadPoolExecutor 这个线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newWorkStealingPool</span><span class="params">(<span class="keyword">int</span> parallelism)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ForkJoinPool</span><br><span class="line">        (parallelism,</span><br><span class="line">         ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class="line">         <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newWorkStealingPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ForkJoinPool</span><br><span class="line">        (Runtime.getRuntime().availableProcessors(),</span><br><span class="line">         ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class="line">         <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">                                  threadFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ScheduledThreadPoolExecutor"><a href="#ScheduledThreadPoolExecutor" class="headerlink" title="ScheduledThreadPoolExecutor"></a>ScheduledThreadPoolExecutor</h3><p>ScheduledThreadPoolExecutor 继承了 ThreadPoolExecutor，还实现了 ScheduledExecutorService 接口</p>
<p>这个线程池适用定期执行任务。执行的线程建议捕捉异常，防止中断了定期执行。 ScheduledThreadPoolExecutor 具有 execute 和 sumbit 以外的方法</p>
<ul>
<li>schedule 可以延时执行</li>
<li>scheduleAtFixedRate 提交固定时间间隔任务。两个开始的头之间是固定的</li>
<li>scheduleWithFixedDelay 提交固定延时间隔任务。结束的尾巴和开始的头之间是固定的</li>
</ul>
<h2 id="合理配置线程池"><a href="#合理配置线程池" class="headerlink" title="合理配置线程池"></a>合理配置线程池</h2><p>多线程任务可以分为 计算密集型(CPU)、IO密集型，混合型 这几种类型。我们需要合理配置线程池，如果计算密集型的任务开启太多的线程，会让 CPU 上下文切换花费很多时间；如果 IO 密集型任务，配置太少的线程，IO 阻塞的时候线程被挂起，CPU 使用率就变低。所以需要考虑任务的类型来配置线程的多少</p>
<ul>
<li>计算密集型<ul>
<li>例子：加密、正则、大数分解</li>
<li>线程数应当适当的小，CPU 核心数+1。为什么+1，因为数据有可能要从磁盘加载到内存，这个称为页缺失</li>
</ul>
</li>
<li>IO 密集型<ul>
<li>例子：读取文件、数据库操作、网络资源</li>
<li>线程数适当的大，CPU核心数*2</li>
</ul>
</li>
</ul>
<p>同时对阻塞队列选择有界队列，防止 OOM</p>
<p>总的来说线程池就聊到这里啦，一般建议用线程池的时候，自己指定线程池的参数，而不使用 Executors 去创建，因为开发人员需要明确的去定义自己的需求，还有另外一个原因是，Executors 创建的线程池是无界的，这有一定的风险。至于线程池底层是通过什么实现的呢，这里就不贴代码了，有兴趣可以翻翻代码，毕竟有了多线程基础后去看这些代码就会容易很多。底层实现还是绕不开 CAS，显示锁，AQS，代码中也经常可以看到通过位(bit)来做控制，这样的设计也可以多了解一下～</p>
]]></content>
      <categories>
        <category>java 学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>【系统学习】【五】并发编程-并发容器</title>
    <url>/post/sys-learn-thread-05/</url>
    <content><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>容器，这个概念在我刚开始接触的时候，其实很模糊，到处都可以看到容器这个概念。到现在我的理解起来就很简单了，就是一个装载空间，每个容器有它一定的功能，可进可出，就是 container。像并发容器，就像 ConcurrentHashMap，ConcurrentSkipArrayList，LinkedBlockingQueue 等，可以装载 java 对象，提供线程安全的一些功能。由于目前我常用的 jdk 是 8 的版本，所以这一次就聊 jdk8 里面的一些并发容器，至于网上经常拿 jdk7 和 jdk8 的并发容器进行比较，而且面试也可能问，但是官网上已经下载不到了，我也就懒得去找 jdk7 来对比了</p>
<p>所以我们这次要聊的有</p>
<ul>
<li>Hash 和 hashMap</li>
<li>ConcurrentHashMap</li>
<li>ConcurrentSkipListMap和ConcurrentSkipListSet</li>
<li>ConcurrentLinkedQueue</li>
<li>写时复制容器</li>
<li>阻塞队列</li>
</ul>
<a id="more"></a>
<h2 id="Hash-和-hashMap"><a href="#Hash-和-hashMap" class="headerlink" title="Hash 和 hashMap"></a>Hash 和 hashMap</h2><p>我们先来聊一下哈希这个技术，因为接下来会使用到</p>
<ul>
<li>概念：把任意一个输入通过一种算法（散列），变换成固定长度的输出，这个输出就是散列值</li>
<li>常用算法：<ul>
<li>直接取余数</li>
<li>md4,md5,sha 等摘要算法</li>
</ul>
</li>
</ul>
<h3 id="位运算实现取模"><a href="#位运算实现取模" class="headerlink" title="位运算实现取模"></a>位运算实现取模</h3><p>这里插一个小知识，因为下面会使用到</p>
<p>当 b = 2^n 时，a &amp; (b - 1) 想当于 a % b。比如 7 % 4 = 3 和 111 &amp; 011 = 011。注意这里 b 只能是 2 的 n 次方数</p>
<h3 id="hashMap-中使用哈希算法"><a href="#hashMap-中使用哈希算法" class="headerlink" title="hashMap 中使用哈希算法"></a>hashMap 中使用哈希算法</h3><p>hashmap 的实现概念如下图，将 key 进行 hash，根据 hash 值分配到桶(bucket)</p>
<img src="/post/sys-learn-thread-05/hashmap.png" class="">
<ul>
<li>放进(put) hashmap 的时候，根据 key 的 hash 值找到桶，封装 key, value 成 Node，添加进桶里（同一个桶里的 hash 值都是一样的）</li>
<li>查询(get) hashmap 的时候，根据 key 的 hash 值找到桶，在桶里查找 key.equals(k) 的 Node，返回 value</li>
<li>遍历 hashmap 的时候，遍历每一个桶和桶里面的 Node</li>
</ul>
<p>jdk8 中的 hash 算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 key 的 hashCode 和它本身高 16 位进行异或</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后 hash 取模 桶的个数，定位到桶的下标</span></span><br><span class="line">tab[(n - <span class="number">1</span>) &amp; hash]</span><br></pre></td></tr></table></figure>
<p>hashmap 的主要实现思路其实就是上面说的那样，把 hash 值作为标识，然后根据标识把元素分散开来，就跟分库分表一样</p>
<h3 id="hashMap-非线程安全"><a href="#hashMap-非线程安全" class="headerlink" title="hashMap 非线程安全"></a>hashMap 非线程安全</h3><p>并发情况下，可能会出现的情况。<a href="https://github.com/Deeeeeeeee/demos/blob/master/src/main/java/com/sealde/thread/container/HashMapTestDemo.java" target="_blank" rel="noopener">简单的测试代码</a></p>
<ul>
<li>多个线程同时 put，元素可能会丢失</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 线程1 =&gt; t1</span></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">999</span>; i++) &#123;</span><br><span class="line">                map.put(<span class="string">"thread1_key"</span> + i, <span class="string">"thread1_value"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 线程2 =&gt; t2</span></span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">999</span>; i++) &#123;</span><br><span class="line">                map.put(<span class="string">"thread2_key"</span> + i, <span class="string">"thread2_value"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    System.out.println(map.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果 1938</span></span><br></pre></td></tr></table></figure>
<p>形成的原因也很简单，多个线程同时往一个桶里面添加 Node 的时候，会出现覆盖的现象。比如下面这一段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 两个线程都进入到这里，然后先后执行了这一句，p.next 就会被覆盖</span></span><br><span class="line">        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">            treeifyBin(tab, hash);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>多个线程同时 put，get 获取的值可能为 null</li>
</ul>
<p>这里就不贴代码了，可以看 <a href="https://github.com/Deeeeeeeee/demos/blob/master/src/main/java/com/sealde/thread/container/HashMapTestDemo.java" target="_blank" rel="noopener">简单的测试代码</a></p>
<p>原因 resize 的时候，tab = newTable，此时还没有元素，get 得到了 null。其实还有其他原因</p>
<ul>
<li>jdk7 Entry链表可能形成环形数据结构，一旦形成环形数据结构，Entry的next节点永远不为空，就会产生死循环获取Entry</li>
</ul>
<p>这个网上有一大堆分析，这里就不分析了。简单的说就是因为 jdk7 是头部新增数据的，即 bucket -&gt; newOne -&gt; oldOne，java8 解决了这个问题，即 bucket -&gt; oldOne -&gt; newOne。两个线程同时做扩容操作，因为头插法很可能直接将链表反转(jdk7 的 bucket 是链表)，当一个线程刚确认好 当前节点和一个节点时，另一个线程将链表反转了，这个线程继续执行，就会出现环，即 k1 -&gt; k2，k2 -&gt; k1。形成环之后，map.get(K) 时会遍历链表，由于链表形成环了，遍历就死循环了</p>
<h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>ConcurrentHashMap 和 HashMap 的思路差不多，只是在 put，remove，扩容等操作的时候，加了锁或者使用 CAS 操作，保证在并发情况下的安全性</p>
<h3 id="ConcurrentHashMap-jdk7-和-jdk8-的区别"><a href="#ConcurrentHashMap-jdk7-和-jdk8-的区别" class="headerlink" title="ConcurrentHashMap jdk7 和 jdk8 的区别"></a>ConcurrentHashMap jdk7 和 jdk8 的区别</h3><p>这里聊一下主要区别</p>
<ul>
<li>取消了 segment，直接使用一个 node 数组，锁的粒度更小，减少并发冲突的概率</li>
<li>链表+红黑树，纯链表O(n)，红黑树O(logn)，性能提升很大</li>
</ul>
<p><a href="https://www.jianshu.com/p/933289f27270" target="_blank" rel="noopener">这里有一篇讲它们之间区别的</a></p>
<h3 id="ConcurrentHashMap-数据结构和关键变量"><a href="#ConcurrentHashMap-数据结构和关键变量" class="headerlink" title="ConcurrentHashMap 数据结构和关键变量"></a>ConcurrentHashMap 数据结构和关键变量</h3><p>ConcurrentHashMap 使用到的几个数据结构，Node, TreeNode, TreeBin。java8 桶(bucket) 可以是链表，也可以是红黑树，用来装载 key-value，当链表元素个数超过阈值 8，将转换成红黑树；当红黑树元素个数少于阈值 6，将转换成链表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 链表使用的 Node 存储 key,value。 val 和 next 是 volatile 的，保证可见性</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="keyword">volatile</span> V val;</span><br><span class="line">    <span class="keyword">volatile</span> Node&lt;K,V&gt; next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红黑树使用 TreeNode 数据结构，注意继承了 Node</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">    TreeNode&lt;K,V&gt; left;</span><br><span class="line">    TreeNode&lt;K,V&gt; right;</span><br><span class="line">    TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">    <span class="keyword">boolean</span> red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红黑树使用 TreeBin 代表树的 root</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeBin</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; root;</span><br><span class="line">    <span class="keyword">volatile</span> TreeNode&lt;K,V&gt; first;</span><br><span class="line">    <span class="keyword">volatile</span> Thread waiter;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> lockState;</span><br><span class="line">    <span class="comment">// values for lockState</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WRITER = <span class="number">1</span>; <span class="comment">// set while holding write lock</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WAITER = <span class="number">2</span>; <span class="comment">// set when waiting for write lock</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> READER = <span class="number">4</span>; <span class="comment">// increment value for setting read lock</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实还有两个数据结构 <code>ForwardingNode</code> 和 <code>ReservationNode</code>。以下是几个常量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 桶数组的最大个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">// 默认桶的个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">16</span>;</span><br><span class="line"><span class="comment">// 负载因子，当元素个数达到容量的 0.75 倍时，进行扩容。实际没有使用这个常量，而是通过 n-(n&gt;&gt;&gt;2) 这样的位运算得出 0.75 倍的</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 树化阈值，链表上的 Node 达到 8 时，链表转换成红黑树</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"><span class="comment">// 非树化阈值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"><span class="comment">//  最小树形化容量阈值：即 当哈希表中的容量 &gt; 该值时，才允许树形化链表 （即 将链表 转换成红黑树）</span></span><br><span class="line"><span class="comment">// 否则，若桶内元素太多时，则直接扩容，而不是树形化</span></span><br><span class="line"><span class="comment">// 为了避免进行扩容、树形化选择的冲突，这个值不能小于 4 * TREEIFY_THRESHOLD</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并发度，默认是 16。这个跟 CPU cache 命令率有关</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TRANSFER_STRIDE = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> RESIZE_STAMP_BITS = <span class="number">16</span>;</span><br><span class="line"><span class="comment">// help resize 最大线程数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RESIZERS = (<span class="number">1</span> &lt;&lt; (<span class="number">32</span> - RESIZE_STAMP_BITS)) - <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 记录 sizeCtl 中的偏移量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESIZE_STAMP_SHIFT = <span class="number">32</span> - RESIZE_STAMP_BITS;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Node 里面 hash 字段的值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVED     = -<span class="number">1</span>; <span class="comment">// 表示正在扩容的节点</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEBIN   = -<span class="number">2</span>; <span class="comment">// 表示红黑树</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESERVED  = -<span class="number">3</span>; <span class="comment">// 表示 ReservationNode，貌似是一种临时的节点</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_BITS = <span class="number">0x7fffffff</span>; <span class="comment">// 正常节点的 hash</span></span><br></pre></td></tr></table></figure>
<p>变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组容器，就是桶。java8 是懒初始化的</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"><span class="comment">// 下一个要使用的 table，只有 resize 的时候为 null</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line"><span class="comment">// 统计元素数量，CAS 操作这个字段</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">long</span> baseCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 容器初始化和扩容控制单位。负数时，表示在初始化或者扩容。-1表示正在初始化，-n表示有n-1个线程正在进行扩容</span></span><br><span class="line"><span class="comment">// 0表示还未初始化</span></span><br><span class="line"><span class="comment">// 大于0表示初始化或者下一次扩容的阈值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> sizeCtl;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> transferIndex;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> cellsBusy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// baseCount CAS 失败会使用该字段</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> CounterCell[] counterCells;</span><br></pre></td></tr></table></figure>
<h3 id="ConcurrentHashMap-构造方法"><a href="#ConcurrentHashMap-构造方法" class="headerlink" title="ConcurrentHashMap 构造方法"></a>ConcurrentHashMap 构造方法</h3><p>跟 jdk1.7 不同，jdk1.8 的构造方法是懒初始化的，等具体使用到某个桶的时候才做初始化工作。而 jdk1.7 有 segment 概念，构造方法会初始化好 segment 数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认容量16</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 sizeCtl 变量，表示下次扩容到多大</span></span><br><span class="line"><span class="comment">// tableSizeFor 保证容量为 2^n</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">                MAXIMUM_CAPACITY :</span><br><span class="line">                tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = DEFAULT_CAPACITY;</span><br><span class="line">    putAll(m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, loadFactor, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以看出，构造方法没有对 table 进行初始化，只是赋值了 sizeCtl 变量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">float</span> loadFactor, <span class="keyword">int</span> concurrencyLevel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0.0f</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; concurrencyLevel)   <span class="comment">// Use at least as many bins</span></span><br><span class="line">        initialCapacity = concurrencyLevel;   <span class="comment">// as estimated threads</span></span><br><span class="line">    <span class="keyword">long</span> size = (<span class="keyword">long</span>)(<span class="number">1.0</span> + (<span class="keyword">long</span>)initialCapacity / loadFactor);</span><br><span class="line">    <span class="keyword">int</span> cap = (size &gt;= (<span class="keyword">long</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">        MAXIMUM_CAPACITY : tableSizeFor((<span class="keyword">int</span>)size);</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ConcurrentHashMap-put"><a href="#ConcurrentHashMap-put" class="headerlink" title="ConcurrentHashMap put"></a>ConcurrentHashMap put</h3><p>put，如果 key 已经存在，覆盖并返回原来的值；如果 key 不存在，填上并返回 null</p>
<p><strong>这里桶称之为 bin，容器的意思</strong></p>
<p>通过 CAS 操作和 对首节点 synchronized 加锁，保证添加元素的时候，该 bin 下的操作是线程安全的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">// 将对象的hashCode再hash一遍</span></span><br><span class="line">    <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            tab = initTable();</span><br><span class="line">        <span class="comment">// 如果不对应的桶不存在，CAS 添加新 Node。这里是懒初始化要初始化的时候</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                            <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 该桶正在扩容，帮忙扩容</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            V oldVal = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 对首节点加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    <span class="comment">// 链表添加元素</span></span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key ||</span><br><span class="line">                                    (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                            value, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 红黑树添加元素</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                        value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果 bin 数量大于树化阈值，进行树化操作</span></span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计数加 1</span></span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ConcurrentHashMap-get"><a href="#ConcurrentHashMap-get" class="headerlink" title="ConcurrentHashMap get"></a>ConcurrentHashMap get</h3><p>get 方法是没有加锁的，但是跟 HashMap 不同的是，在扩容完成的时候才会 table = nextTable，所以不会出现获取到的值为 null 的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="keyword">int</span> n, eh; K ek;</span><br><span class="line">    <span class="comment">// 对 key 再 hash</span></span><br><span class="line">    <span class="keyword">int</span> h = spread(key.hashCode());</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// hash 值相同，并且 key.equals(ek) 返回对应的值</span></span><br><span class="line">        <span class="keyword">if</span> ((eh = e.hash) == h) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 首节点的 hash 值小于 0，表示非链表，比如红黑树</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> (p = e.find(h, key)) != <span class="keyword">null</span> ? p.val : <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 如果是链表，循环查找</span></span><br><span class="line">        <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek))))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ConcurrentHashMap-扩容和-size"><a href="#ConcurrentHashMap-扩容和-size" class="headerlink" title="ConcurrentHashMap 扩容和 size"></a>ConcurrentHashMap 扩容和 size</h3><p>putVal 的时候有一个 addCount 方法，里面判断元素个数是否达到 sizeCtl 阈值，如果达到阈值，则进行扩容操作。扩容操作是翻倍扩容，容量为原来的 2 倍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">int</span> check)</span> </span>&#123;</span><br><span class="line">    CounterCell[] as; <span class="keyword">long</span> b, s;</span><br><span class="line">    <span class="comment">// 如果 baseCount CAS 失败，则会使用 CounterCell 统计</span></span><br><span class="line">    <span class="keyword">if</span> ((as = counterCells) != <span class="keyword">null</span> ||</span><br><span class="line">        !U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class="line">        CounterCell a; <span class="keyword">long</span> v; <span class="keyword">int</span> m;</span><br><span class="line">        <span class="keyword">boolean</span> uncontended = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (as == <span class="keyword">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class="keyword">null</span> ||</span><br><span class="line">            !(uncontended =</span><br><span class="line">            <span class="comment">// CounterCell CAS 统计</span></span><br><span class="line">                U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class="line">            <span class="comment">// 自旋 CAS 统计</span></span><br><span class="line">            fullAddCount(x, uncontended);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (check &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        s = sumCount();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (check &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab, nt; <span class="keyword">int</span> n, sc;</span><br><span class="line">        <span class="comment">// 判断是否达到阈值 sizeCtl，如果达到阈值，进行扩容</span></span><br><span class="line">        <span class="keyword">while</span> (s &gt;= (<span class="keyword">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            <span class="keyword">int</span> rs = resizeStamp(n);</span><br><span class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</span><br><span class="line">                    transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                    transfer(tab, nt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</span><br><span class="line">                                            (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                <span class="comment">// 具体的扩容操作</span></span><br><span class="line">                transfer(tab, <span class="keyword">null</span>);</span><br><span class="line">            s = sumCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>size 方法里面主要是 sumCount 方法，这里是没有加锁的。在并发情况下，size 方法得出的结果不一定是精确的，是一个估值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> n = sumCount();</span><br><span class="line">    <span class="keyword">return</span> ((n &lt; <span class="number">0L</span>) ? <span class="number">0</span> :</span><br><span class="line">            (n &gt; (<span class="keyword">long</span>)Integer.MAX_VALUE) ? Integer.MAX_VALUE :</span><br><span class="line">            (<span class="keyword">int</span>)n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">sumCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CounterCell[] as = counterCells; CounterCell a;</span><br><span class="line">    <span class="keyword">long</span> sum = baseCount;</span><br><span class="line">    <span class="comment">// 统计 baseCount 的数据和 CounterCell 里面的数据</span></span><br><span class="line">    <span class="keyword">if</span> (as != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((a = as[i]) != <span class="keyword">null</span>)</span><br><span class="line">                sum += a.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>弱一致性，get、size 等方法没有加锁，会出现线程读取数据到一半，其他修改线程操作完毕，然后读取数据的线程继续执行，得到了旧的数据</p>
<h3 id="ConcurrentHashMap-面试常见问题"><a href="#ConcurrentHashMap-面试常见问题" class="headerlink" title="ConcurrentHashMap 面试常见问题"></a>ConcurrentHashMap 面试常见问题</h3><ul>
<li>ConcurrentHashMap实现原理是怎么样的或者问ConcurrentHashMap如何在保证高并发下线程安全的同时实现了性能提升？<ul>
<li>ConcurrentHashMap允许多个修改操作并发进行，其关键在于使用了锁分离技术。它使用了多个锁来控制对hash表的不同部分进行的修改。内部使用段(1.7 Segment 1.8 Node)来表示这些不同的部分，每个段其实就是一个小的<br>hash table，只要多个修改操作发生在不同的段上，它们就可以并发进行</li>
</ul>
</li>
<li>在高并发下的情况下如何保证取得的元素是最新的？<ul>
<li>用于存储键值对数据的HashEntry，在设计上它的成员变量value等都是volatile类型的，这样就保证别的线程对value值的修改，get方法可以马上看到</li>
</ul>
</li>
<li>如何在很短的时间内将大量数据插入到ConcurrentHashMap<ul>
<li>将大批量数据保存到map中有两个地方的消耗将会是比较大的：第一个是扩容操作，第二个是锁资源的争夺。第一个扩容的问题，主要还是要通过配置合理的容量大小和扩容因子，尽可能减少扩容事件的发生；第二个锁资源的争夺，在put方法中会使用synchonized对头节点进行加锁，而锁本身也是分等级的，因此我们的主要思路就是尽可能的避免锁等级。所以，针对第二点，我们可以将数据通过通过ConcurrentHashMap的spread方法进行预处理，这样我们可以将存在hash冲突的数据放在一个组里面，每个组都使用单线程进行put操作，这样的话可以保证锁仅停留在偏向锁这个级别，不会升级，从而提升效率</li>
</ul>
</li>
</ul>
<p>更多面试题会补充上来</p>
<h2 id="ConcurrentSkipListMap和ConcurrentSkipListSet"><a href="#ConcurrentSkipListMap和ConcurrentSkipListSet" class="headerlink" title="ConcurrentSkipListMap和ConcurrentSkipListSet"></a>ConcurrentSkipListMap和ConcurrentSkipListSet</h2><ul>
<li>是TreeMap、TreeSet 的并发版本</li>
<li>通过 CAS 保证线程安全性</li>
<li>使用的技术是跳表<ul>
<li>典型的空间换时间技术</li>
<li>随机将元素作为索引，查询的时候使用索引会快很多</li>
<li>这里有一篇描述 <a href="https://zhuanlan.zhihu.com/p/23370124" target="_blank" rel="noopener">redis 中使用跳表的</a></li>
<li>时间复杂度快赶上红黑树</li>
</ul>
</li>
</ul>
<h2 id="ConcurrentLinkedQueue"><a href="#ConcurrentLinkedQueue" class="headerlink" title="ConcurrentLinkedQueue"></a>ConcurrentLinkedQueue</h2><ul>
<li>LinkedList 的并发版本</li>
<li>通过 CAS 保证线程安全性</li>
<li>无界非阻塞队列，底层是个链表</li>
<li>add,offer 从尾部添加数据。peek(拿数据不移除)，poll(拿数据要移除)，从头部移除数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 典型的自旋 CAS</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    checkNotNull(e);</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;E&gt;(e);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Node&lt;E&gt; t = tail, p = t;;) &#123;</span><br><span class="line">        Node&lt;E&gt; q = p.next;</span><br><span class="line">        <span class="keyword">if</span> (q == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// p is last node</span></span><br><span class="line">            <span class="keyword">if</span> (p.casNext(<span class="keyword">null</span>, newNode)) &#123;</span><br><span class="line">                <span class="comment">// Successful CAS is the linearization point</span></span><br><span class="line">                <span class="comment">// for e to become an element of this queue,</span></span><br><span class="line">                <span class="comment">// and for newNode to become "live".</span></span><br><span class="line">                <span class="keyword">if</span> (p != t) <span class="comment">// hop two nodes at a time</span></span><br><span class="line">                    casTail(t, newNode);  <span class="comment">// Failure is OK.</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Lost CAS race to another thread; re-read next</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == q)</span><br><span class="line">            <span class="comment">// We have fallen off list.  If tail is unchanged, it</span></span><br><span class="line">            <span class="comment">// will also be off-list, in which case we need to</span></span><br><span class="line">            <span class="comment">// jump to head, from which all live nodes are always</span></span><br><span class="line">            <span class="comment">// reachable.  Else the new tail is a better bet.</span></span><br><span class="line">            p = (t != (t = tail)) ? t : head;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">// Check for tail updates after two hops.</span></span><br><span class="line">            p = (p != t &amp;&amp; t != (t = tail)) ? t : q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="写时复制容器"><a href="#写时复制容器" class="headerlink" title="写时复制容器"></a>写时复制容器</h2><ul>
<li>CopyOnWriteArrayList、CopyOnWriteArraySet</li>
<li>思路是要修改的时候，将数据拷贝一份进行修改，然后修改引用</li>
<li>只能保证最终一致性，因为读取的时候可能读取到旧的数组</li>
<li>适用读多写少，白名单、黑名单、商品类目的更新</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写的时候使用显示锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line">        <span class="comment">// 拷贝数组</span></span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改引用</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setArray</span><span class="params">(Object[] a)</span> </span>&#123;</span><br><span class="line">    array = a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><ul>
<li>核心思想：当队列满的时候，插入元素线程被阻塞，直到队列不满；当队列空的时候，获取元素线程被阻塞，直到队列不空</li>
<li>使用场景：生产者消费者模式。使用容器降低生产者和消费者之间的耦合</li>
<li>常用方法(插入/移除/检查)<ul>
<li>抛出异常类型：add/remove/element</li>
<li>返回值类型：offer/poll/peek</li>
<li>一直阻塞类型：put/take</li>
<li>超时退出类型：offer(time)/poll(time)</li>
</ul>
</li>
</ul>
<h3 id="具体的阻塞队列"><a href="#具体的阻塞队列" class="headerlink" title="具体的阻塞队列"></a>具体的阻塞队列</h3><ul>
<li>ArrayBlockingQueue <ul>
<li>底层实现为数组、有界</li>
<li>先进先出，需要设置初始大小</li>
</ul>
</li>
<li>LinkedBlockingQueue<ul>
<li>底层实现为链表、有界</li>
<li>先进先出，可以不设置初始大小，默认 Integer.MAX_VALUE</li>
<li>与 ArrayBlockingQueue 区别<ul>
<li>锁：ArryaBlockingQueue 只使用一个锁，LiknedBlockingQueue 使用两个锁</li>
<li>数据结构上：ABQ 直接插入，LBQ 需要先转换成节点</li>
</ul>
</li>
</ul>
</li>
<li><p>LinkedBlockingDeque</p>
<ul>
<li>链表、有界、双向</li>
<li>双向获取和移除，工作密取有使用</li>
</ul>
</li>
<li><p>PriorityBlockingQueue</p>
<ul>
<li>优先级、无界</li>
<li>默认情况下，按照自然顺序；实现 compareTo; 构造 Comparetor</li>
</ul>
</li>
<li><p>DelayQueue</p>
<ul>
<li>优先级队列、无界</li>
<li>支持延时获取元素的阻塞队列，元素必需实现 Delayed 接口</li>
<li>使用场景：缓存系统、订单到期、限时支付</li>
</ul>
</li>
<li><p>SynchronousQueue</p>
<ul>
<li>不存储元素</li>
<li>每一个 put 等待 take</li>
</ul>
</li>
<li><p>LinkedTransferQueue</p>
<ul>
<li>链表、无界</li>
<li>跟 LinkedBlockingQueue 区别<ul>
<li>多了 transfer()、tryTransfer()。先不进入队列，先查看有没有消费者，如果有，直接交给消费者</li>
<li>transfer 需要等待消费者消费才返回，tryTransfer 无论是否消费，直接返回</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>他们的底层实现都差不多，是通过显示锁和 Condition 实现的。我们来看其中的一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The capacity bound, or Integer.MAX_VALUE if none */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Current number of elements */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Head of linked list.</span></span><br><span class="line"><span class="comment">     * Invariant: head.item == null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tail of linked list.</span></span><br><span class="line"><span class="comment">     * Invariant: last.next == null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Lock held by take, poll, etc */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Wait queue for waiting takes */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty = takeLock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Lock held by put, offer, etc */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Wait queue for waiting puts */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull = putLock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">final</span> AtomicInteger count = <span class="keyword">this</span>.count;</span><br><span class="line">        <span class="keyword">if</span> (count.get() == capacity)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> c = -<span class="number">1</span>;</span><br><span class="line">        Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;E&gt;(e);</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">this</span>.putLock;</span><br><span class="line">        <span class="comment">// 加锁</span></span><br><span class="line">        putLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (count.get() &lt; capacity) &#123;</span><br><span class="line">                <span class="comment">// 添加元素</span></span><br><span class="line">                enqueue(node);</span><br><span class="line">                <span class="comment">// 计数加一</span></span><br><span class="line">                c = count.getAndIncrement();</span><br><span class="line">                <span class="keyword">if</span> (c + <span class="number">1</span> &lt; capacity)</span><br><span class="line">                    <span class="comment">// 通知</span></span><br><span class="line">                    notFull.signal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            putLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">            signalNotEmpty();</span><br><span class="line">        <span class="keyword">return</span> c &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert putLock.isHeldByCurrentThread();</span></span><br><span class="line">        <span class="comment">// assert last.next == null;</span></span><br><span class="line">        last = last.next = node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java 学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>算法系列--写在最前</title>
    <url>/post/algorithm-preface/</url>
    <content><![CDATA[<p>算法系列是根据普林斯顿教授 Robert Sedgewick 和 Kevin Wayne 著的《算法》第四版<a href="https://book.douban.com/subject/19952400/" target="_blank" rel="noopener"><em>《算法》第四版</em></a> ，以及<a href="https://www.coursera.org/learn/algorithms-part1" target="_blank" rel="noopener"><em>普林斯顿大学算法公开课</em></a> ，所学习的和探索的总结。</p>
<a id="more"></a>
<p>强烈建议看算法公开课，这个公开课实在是太有趣了，简洁清晰地介绍各种算法，对比分析算法之间的差异，让你清楚地认识到算法上所做的一层一层的改进。<br>而且拥有富有挑战性的编程作业，当你将编程作业分数拿到满分，甚至完成隐藏的 bonus 时，你一定会非常兴奋。</p>
<p><strong>对我而言，有另外一层收获。就是变得更愿意去探究和摸索那些比较困难的问题！</strong></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>【go】安装和配置</title>
    <url>/post/go-install/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>安装 </li>
<li>vim配置</li>
<li>goncurses安装</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>下载 <a href="https://golang.org/dl/" target="_blank" rel="noopener">https://golang.org/dl/</a></li>
<li>tar -zxvf goxxx.tar.gz 到 /usr/local/lib/go</li>
<li>环境变量 ~/.bash_profile<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOROOT</span>=/usr/local/lib/go             # go安装路径</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOPATH</span>=<span class="variable">$HOME</span>/.go                     # 工作目录. go <span class="builtin-name">get</span> 和 go install 会使用的目录</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$GOPATH/bin:$GOROOT/bin   # 添加到path</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOPROXY</span>=https://goproxy.cn,direct    # 代理加速</span><br></pre></td></tr></table></figure></li>
<li>go version 检测配置结果</li>
</ul>
<a id="more"></a>
<h2 id="vim配置"><a href="#vim配置" class="headerlink" title="vim配置"></a>vim配置</h2><p>前置需要配置vim插件管理等，可以参考 <a href="https://gitee.com/sealde/dotfile" target="_blank" rel="noopener">https://gitee.com/sealde/dotfile</a></p>
<ul>
<li>一个是使用 coc-go，<a href="https://github.com/josa42/coc-go" target="_blank" rel="noopener">https://github.com/josa42/coc-go</a></li>
<li>另一个是使用 vim-go,<ul>
<li><code>Plug &#39;fatih/vim-go&#39;, { &#39;tag&#39;: &#39;*&#39; }</code>   # go 主要插件 <a href="https://github.com/fatih/vim-go" target="_blank" rel="noopener">地址</a></li>
</ul>
</li>
</ul>
<p>我这里使用 vim-go 先安装 gopls<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">go</span> lsp(<span class="keyword">language</span> server protocol)</span><br><span class="line"><span class="keyword">go</span> install golang.org/<span class="keyword">x</span>/tools/gopls@latest</span><br><span class="line"># 打开<span class="keyword">vim</span>执行命令. <span class="keyword">vim</span>-<span class="keyword">go</span>依赖的工具自动安装。参考链接 http<span class="variable">s:</span>//zhuanlan.zhihu.<span class="keyword">com</span>/<span class="keyword">p</span>/<span class="number">51656877</span></span><br><span class="line">:GoInstallBinaries</span><br><span class="line"># 在 .vimrc 里加上. 参考 http<span class="variable">s:</span>//github.<span class="keyword">com</span>/golang/tools/blob/master/gopls/doc/<span class="keyword">vim</span>.md</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:go_def_mode</span>=<span class="string">'gopls'</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:go_info_mode</span>=<span class="string">'gopls'</span></span><br></pre></td></tr></table></figure></p>
<p>自动补全<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># coc-<span class="keyword">go</span>. 在 .vimrc 加上 coc-<span class="keyword">go</span> 插件</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:coc_global_extensions</span> = [</span><br><span class="line">    \ <span class="string">"coc-go"</span>]</span><br><span class="line"># :ConConfig 加上lsp配置. 参考 http<span class="variable">s:</span>//github.<span class="keyword">com</span>/golang/tools/blob/master/gopls/doc/<span class="keyword">vim</span>.md</span><br><span class="line"><span class="string">"languageserver"</span>: &#123;</span><br><span class="line">    <span class="string">"golang"</span>: &#123;</span><br><span class="line">        <span class="string">"command"</span>: <span class="string">"gopls"</span>,</span><br><span class="line">        <span class="string">"rootPatterns"</span>: [<span class="string">"go.mod"</span>, <span class="string">".vim/"</span>, <span class="string">".git/"</span>, <span class="string">".hg/"</span>],</span><br><span class="line">        <span class="string">"filetypes"</span>: [<span class="string">"go"</span>],</span><br><span class="line">        <span class="string">"initializationOptions"</span>: &#123;</span><br><span class="line">            <span class="string">"usePlaceholders"</span>: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="goncurses安装"><a href="#goncurses安装" class="headerlink" title="goncurses安装"></a>goncurses安装</h2><p>这个用来开发命令行ui的，不开发不需要安装</p>
<p><a href="https://github.com/rthornton128/goncurses" target="_blank" rel="noopener">https://github.com/rthornton128/goncurses</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先安装ncurses库和pkg-config</span></span><br><span class="line">sudo apt <span class="keyword">install</span> libncurses5-dev</span><br><span class="line">sudo apt <span class="keyword">install</span> pkg-config</span><br><span class="line"><span class="comment"># 安装goncurses</span></span><br><span class="line"><span class="keyword">go</span> <span class="keyword">get</span> github.com/rthornton128/goncurses</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>wsl2-proxy</title>
    <url>/post/wsl2-proxy/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>获取主机ip和打开wsl防火墙</li>
<li>一键代理</li>
</ul>
<h2 id="获取主机ip和打开wsl防火墙"><a href="#获取主机ip和打开wsl防火墙" class="headerlink" title="获取主机ip和打开wsl防火墙"></a>获取主机ip和打开wsl防火墙</h2><p>获取主机ip命令</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ip<span class="built_in"> route </span>| grep<span class="built_in"> default </span>| awk <span class="string">'&#123;print $3&#125;'</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">cat /etc/resolv.conf | grep nameserver | awk <span class="string">'&#123; print $2 &#125;'</span></span><br></pre></td></tr></table></figure>
<p>v2rayN 运行局域网的连接</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">参数设置 -&gt; v2rayN设置 -&gt; 勾选 来自局域网的连接 -&gt; 确定</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>代理工具设置正确，仍访问不了，要打开wsl防火墙。参考 <a href="https://github.com/microsoft/WSL/issues/4585" target="_blank" rel="noopener">https://github.com/microsoft/WSL/issues/4585</a></p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"># 放开 `vEthernet (WSL)` 的防火墙</span><br><span class="line"><span class="keyword">New</span>-NetFirewallRule -DisplayName <span class="string">"WSL"</span> -Direction Inbound -InterfaceAlias <span class="string">"vEthernet (WSL)"</span> -Action Allow</span><br></pre></td></tr></table></figure>
<h2 id="一键代理"><a href="#一键代理" class="headerlink" title="一键代理"></a>一键代理</h2><p>参考 <a href="https://lengthmin.me/posts/wsl2-network-tricks/#%E4%B8%80%E9%94%AE%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86" target="_blank" rel="noopener">https://lengthmin.me/posts/wsl2-network-tricks/#一键设置代理</a></p>
<p>在 .zshrc 中配置如下，然后执行 proxy 命令设置代理，unpro 命令取消代理设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Proxy configuration</span></span><br><span class="line"><span class="function"><span class="title">getIp</span></span>() &#123;</span><br><span class="line">    <span class="built_in">export</span> winip=$(ip route | grep default | awk <span class="string">'&#123;print $3&#125;'</span>)</span><br><span class="line">    <span class="built_in">export</span> wslip=$(hostname -I | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">    <span class="built_in">export</span> PROXY_SOCKS5=<span class="string">"socks5://<span class="variable">$&#123;winip&#125;</span>:1080"</span></span><br><span class="line">    <span class="built_in">export</span> PROXY_HTTP=<span class="string">"http://<span class="variable">$&#123;winip&#125;</span>:1081"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">proxy_git</span></span>() &#123;</span><br><span class="line">    ssh_proxy=<span class="string">"<span class="variable">$&#123;winip&#125;</span>:1080"</span></span><br><span class="line">    git config --global http.https://github.com.proxy <span class="variable">$&#123;PROXY_SOCKS5&#125;</span></span><br><span class="line">    <span class="keyword">if</span> ! grep -qF <span class="string">"Host github.com"</span> ~/.ssh/config ; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Host github.com"</span> &gt;&gt; ~/.ssh/config</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"    User git"</span> &gt;&gt; ~/.ssh/config</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"    ProxyCommand nc -X 5 -x <span class="variable">$&#123;ssh_proxy&#125;</span> %h %p"</span> &gt;&gt; ~/.ssh/config</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        lino=$(($(awk <span class="string">'/Host github.com/&#123;print NR&#125;'</span>  ~/.ssh/config)+2))</span><br><span class="line">        sed -i <span class="string">"<span class="variable">$&#123;lino&#125;</span>c\    ProxyCommand nc -X 5 -x <span class="variable">$&#123;ssh_proxy&#125;</span> %h %p"</span> ~/.ssh/config</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">winip_</span></span>() &#123;</span><br><span class="line">    getIp</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;winip&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">wslip_</span></span>() &#123;</span><br><span class="line">    getIp</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;wslip&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">ip_</span></span>() &#123;</span><br><span class="line">    getIp</span><br><span class="line">    https --follow -b https://api.ip.sb/geoip/<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"WIN ip: <span class="variable">$&#123;winip&#125;</span>"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"WSL ip: <span class="variable">$&#123;wslip&#125;</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">proxy</span></span>() &#123;</span><br><span class="line">    getIp</span><br><span class="line">    <span class="comment"># pip can read http_proxy &amp; https_proxy</span></span><br><span class="line">    <span class="built_in">export</span> http_proxy=<span class="string">"<span class="variable">$&#123;PROXY_HTTP&#125;</span>"</span></span><br><span class="line">    <span class="built_in">export</span> HTTP_PROXY=<span class="string">"<span class="variable">$&#123;PROXY_HTTP&#125;</span>"</span></span><br><span class="line">    <span class="built_in">export</span> https_proxy=<span class="string">"<span class="variable">$&#123;PROXY_HTTP&#125;</span>"</span></span><br><span class="line">    <span class="built_in">export</span> HTTPS_PROXY=<span class="string">"<span class="variable">$&#123;PROXY_HTTP&#125;</span>"</span></span><br><span class="line">    <span class="built_in">export</span> ftp_proxy=<span class="string">"<span class="variable">$&#123;PROXY_HTTP&#125;</span>"</span></span><br><span class="line">    <span class="built_in">export</span> FTP_PROXY=<span class="string">"<span class="variable">$&#123;PROXY_HTTP&#125;</span>"</span></span><br><span class="line">    <span class="built_in">export</span> rsync_proxy=<span class="string">"<span class="variable">$&#123;PROXY_HTTP&#125;</span>"</span></span><br><span class="line">    <span class="built_in">export</span> RSYNC_PROXY=<span class="string">"<span class="variable">$&#123;PROXY_HTTP&#125;</span>"</span></span><br><span class="line">    <span class="built_in">export</span> ALL_PROXY=<span class="string">"<span class="variable">$&#123;PROXY_SOCKS5&#125;</span>"</span></span><br><span class="line">    <span class="built_in">export</span> all_proxy=<span class="string">"<span class="variable">$&#123;PROXY_SOCKS5&#125;</span>"</span></span><br><span class="line">    proxy_git</span><br><span class="line">    <span class="keyword">if</span> [ ! <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line">        ip_</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Acquire::http::Proxy \"<span class="variable">$&#123;PROXY_HTTP&#125;</span>\";"</span> | sudo tee /etc/apt/apt.conf.d/proxy.conf &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Acquire::https::Proxy \"<span class="variable">$&#123;PROXY_HTTP&#125;</span>\";"</span> | sudo tee -a /etc/apt/apt.conf.d/proxy.conf &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">unpro</span></span> () &#123;</span><br><span class="line">    <span class="built_in">unset</span> http_proxy</span><br><span class="line">    <span class="built_in">unset</span> HTTP_PROXY</span><br><span class="line">    <span class="built_in">unset</span> https_proxy</span><br><span class="line">    <span class="built_in">unset</span> HTTPS_PROXY</span><br><span class="line">    <span class="built_in">unset</span> ftp_proxy</span><br><span class="line">    <span class="built_in">unset</span> FTP_PROXY</span><br><span class="line">    <span class="built_in">unset</span> rsync_proxy</span><br><span class="line">    <span class="built_in">unset</span> RSYNC_PROXY</span><br><span class="line">    <span class="built_in">unset</span> ALL_PROXY</span><br><span class="line">    <span class="built_in">unset</span> all_proxy</span><br><span class="line">    sudo rm /etc/apt/apt.conf.d/proxy.conf</span><br><span class="line">    git config --global --<span class="built_in">unset</span> http.https://github.com.proxy</span><br><span class="line">    ip_</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>wsl2</tag>
      </tags>
  </entry>
  <entry>
    <title>初尝爬虫</title>
    <url>/post/craw-liaoxvefeng/</url>
    <content><![CDATA[<img src="/post/craw-liaoxvefeng/screen.png" class="">
<p><strong>爬取的是  <a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener"><em>廖雪峰的 python 教程</em></a> </strong>，参考的是  <a href="https://foofish.net/python-crawler-html2pdf.html" target="_blank" rel="noopener"><em>Python 爬虫：把廖雪峰教程转换成 PDF 电子书</em></a><br><a id="more"></a></p>
<p>第一次接触爬虫，一直觉得爬虫很神秘。接触之后才发现，其实之前就有部分接触过，啊哈哈哈～<br>爬虫我的理解就是请求+解析，其实跟一般的 web 编程没有太大的区别，只是更侧重于请求方面，当然，有些情况不需要解析。</p>
<h1 id="爬虫工具"><a href="#爬虫工具" class="headerlink" title="爬虫工具"></a>爬虫工具</h1><p>传闻 <strong>requests</strong> 和 <strong>BeautifulSoup</strong> 是爬虫的两大神器，还有一个知名的框架 <strong>scrapy</strong>。当然，还有 python 执行 js 的工具 <strong>PyV8</strong>，模拟浏览器的组合 <strong>selenium+phantomjs</strong> 和 <strong>selenium+chrome/firefox</strong>。工具很多，可以慢慢玩。</p>
<p>这里使用的有 <a href="http://docs.python-requests.org/zh_CN/latest/index.html" target="_blank" rel="noopener"><em>requests</em></a> ，<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/" target="_blank" rel="noopener"><em>BeautifulSoup</em></a> ，<a href="https://pypi.python.org/pypi/pdfkit" target="_blank" rel="noopener"><em>pdfkit</em></a> 。其中 pdfkit 需要安装 <a href="https://wkhtmltopdf.org/downloads.html" target="_blank" rel="noopener"><em>wkhtmltopdf</em></a> ，windows 的朋友可以直接下载安装最新版，linux 的朋友建议安装 0.12.3.2 的版本（截止到今天）。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ sudo apt-<span class="keyword">get</span> install wkhtmltopdf=<span class="number">0.12</span><span class="number">.3</span><span class="number">.2</span><span class="number">-3</span></span><br></pre></td></tr></table></figure>
<h1 id="廖雪峰的官网反爬机制"><a href="#廖雪峰的官网反爬机制" class="headerlink" title="廖雪峰的官网反爬机制"></a>廖雪峰的官网反爬机制</h1><div class="note success"><p>爬虫侧重于请求</p></div>
<h2 id="尝试请求"><a href="#尝试请求" class="headerlink" title="尝试请求"></a>尝试请求</h2><p>如果请求不正确，会返回 503。这个 http 状态码意味着服务器处理不过来或者拒接客户端的连接。</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; r = requests.<span class="keyword">get</span>(<span class="string">"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000"</span>)</span><br><span class="line">&gt;&gt;&gt; r.<span class="keyword">text</span></span><br><span class="line"><span class="comment">'<span class="doctag">&lt;html&gt;</span>\r\n<span class="doctag">&lt;head&gt;</span><span class="doctag">&lt;title&gt;</span>503 Service Temporarily Unavailable<span class="doctag">&lt;/title&gt;</span><span class="doctag">&lt;/head&gt;</span>\r\n<span class="doctag">&lt;body bgcolor="white"&gt;</span>\r\n<span class="doctag">&lt;center&gt;</span><span class="doctag">&lt;h1&gt;</span>503 Service Temporarily Unavailable<span class="doctag">&lt;/h1&gt;</span><span class="doctag">&lt;/center&gt;</span>\r\n<span class="doctag">&lt;hr&gt;</span><span class="doctag">&lt;center&gt;</span>nginx/1.10.3 (Ubuntu)<span class="doctag">&lt;/center&gt;</span>\r\n<span class="doctag">&lt;/body&gt;</span>\r\n<span class="doctag">&lt;/html&gt;</span>\r\n'</span></span><br></pre></td></tr></table></figure>
<p>直接使用浏览器访问，请求头：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Request Headers</span><br><span class="line"></span><br><span class="line"><span class="symbol">Accept:</span>text/html,application/xhtml+xml,application/xml;q=<span class="number">0</span>.<span class="number">9</span>,image/webp,image/apng,*<span class="regexp">/*;q=0.8</span></span><br><span class="line"><span class="regexp">Accept-Encoding:gzip, deflate, br</span></span><br><span class="line"><span class="regexp">Accept-Language:zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4</span></span><br><span class="line"><span class="regexp">Connection:keep-alive</span></span><br><span class="line"><span class="regexp">Cookie:atsp=1518835132236_1518835132694; Hm_lvt_2efddd14a5f2b304677462d06fb4f964=1518751218,1518753089,1518831431; Hm_lpvt_2efddd14a5f2b304677462d06fb4f964=1518835133</span></span><br><span class="line"><span class="regexp">Host:www.liaoxuefeng.com</span></span><br><span class="line"><span class="regexp">Referer:https:/</span><span class="regexp">/www.liaoxuefeng.com/wiki</span><span class="regexp">/0014316089557264a6b348958f449949df42a6d3a2e542c000/</span><span class="number">001431611</span>98846783e33de56d4041058c3dfc7e44ee120300<span class="number">0</span></span><br><span class="line">Upgrade-Insecure-<span class="symbol">Requests:</span><span class="number">1</span></span><br><span class="line">User-<span class="symbol">Agent:</span>Mozilla/<span class="number">5.0</span> (X11; Linux x86_64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">61.0</span>.<span class="number">3163.100</span> Safari/<span class="number">537.36</span></span><br></pre></td></tr></table></figure>
<h2 id="请求失败的原因"><a href="#请求失败的原因" class="headerlink" title="请求失败的原因"></a>请求失败的原因</h2><p>从请求头中观察出，有以下几点：</p>
<ol>
<li>模拟浏览器 User-Agent: ….</li>
<li>请求从哪里跳转的 Referer: …</li>
<li><strong>Cookie 设置</strong></li>
</ol>
<p>前面两点都简单，只要加上请求头就行了。只有 Cookie 比较难，因为是在 js 中设置的 cookie，但是接下来分析完，就会发现也很简单，简直易如反掌。</p>
<h3 id="设置头部信息"><a href="#设置头部信息" class="headerlink" title="设置头部信息"></a>设置头部信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers = &#123;<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36"</span>,</span><br><span class="line">           <span class="string">"Connection"</span>:<span class="string">"keep-alive"</span>,</span><br><span class="line">           <span class="string">"Upgrade-Insecure-Requests"</span>:<span class="string">"1"</span>,</span><br><span class="line">           <span class="string">"Host"</span>:<span class="string">"www.liaoxuefeng.com"</span>,</span><br><span class="line">           <span class="string">"Referer"</span>:<span class="string">"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000"</span></span><br><span class="line">           &#125;</span><br><span class="line">         </span><br><span class="line">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure>
<h2 id="分析-cookie-设置"><a href="#分析-cookie-设置" class="headerlink" title="分析 cookie 设置"></a>分析 cookie 设置</h2><p>分析的过程写起来很简单，但是花的时间挺长的，做了各种尝试～</p>
<p>在页面中有一段，这个是设置 cookie 的关键：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">eval</span>(<span class="built_in">decodeURIComponent</span>(<span class="string">'%69f%28%21get%43%6F%6F%6B%69%65(%27%61tsp%27))%73%65%74C%6F%6F%6B%69%65(%27%61tsp%27%2C%20%271518835160255%5F%27%2Bnew%20Date%28%29.getTime%28%29%2C%20580%29%3B'</span>));</span><br><span class="line">        &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Chrome Console 运行如下：<br><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">&gt; decodeURIComponent('<span class="symbol">%69</span>f<span class="symbol">%28</span><span class="symbol">%21</span>get<span class="symbol">%43</span><span class="symbol">%6</span>F<span class="symbol">%6</span>F<span class="symbol">%6</span>B<span class="symbol">%69</span><span class="symbol">%65</span>(<span class="symbol">%27</span><span class="symbol">%61</span>tsp<span class="symbol">%27</span>))<span class="symbol">%73</span><span class="symbol">%65</span><span class="symbol">%74</span>C<span class="symbol">%6</span>F<span class="symbol">%6</span>F<span class="symbol">%6</span>B<span class="symbol">%69</span><span class="symbol">%65</span>(<span class="symbol">%27</span><span class="symbol">%61</span>tsp<span class="symbol">%27</span><span class="symbol">%2</span>C<span class="symbol">%20</span><span class="symbol">%271518835160255</span><span class="symbol">%5</span>F<span class="symbol">%27</span><span class="symbol">%2</span>Bnew<span class="symbol">%20</span>Date<span class="symbol">%28</span><span class="symbol">%29</span>.getTime<span class="symbol">%28</span><span class="symbol">%29</span><span class="symbol">%2</span>C<span class="symbol">%20580</span><span class="symbol">%29</span><span class="symbol">%3</span>B')</span><br><span class="line">&lt;- <span class="string">"if(!getCookie('atsp'))setCookie('atsp', '1518835160255_'+new Date().getTime(), 580);"</span></span><br></pre></td></tr></table></figure></p>
<div class="note success"><p>即如果没有设置 cookie: atsp，那么设置 cookie</p></div>
<p>在 Sources 有一段 js:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在这个js里面 https:<span class="comment">//cdn.liaoxuefeng.com/cdn/static/themes/default/js/all.js?v=1b39f7c</span></span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="built_in">document</span>.cookie.match(<span class="string">"(^|;) ?"</span> + e + <span class="string">"=([^;]*)(;|$)"</span>);</span><br><span class="line">    <span class="keyword">return</span> t ? t[<span class="number">2</span>] : <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">e, t, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="keyword">new</span> <span class="built_in">Date</span>((<span class="keyword">new</span> <span class="built_in">Date</span>).getTime() + <span class="number">1e3</span> * n);</span><br><span class="line">    <span class="built_in">document</span>.cookie = e + <span class="string">"="</span> + t + <span class="string">";path=/;expires="</span> + i.toGMTString() + (<span class="string">"https"</span> === location.protocol ? <span class="string">";secure"</span> : <span class="string">""</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>很明显了，只需要获取到传进来的参数 t 就解决问题了。然而，通过敏锐地观察，参数可以不用获取，完全可以自己去设置：</p>
<p>Chrome Console 下运行：<br><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line">&gt; <span class="function"><span class="title">getCookie</span>(<span class="string">'atsp'</span>)</span></span><br><span class="line">&lt;- <span class="string">"1518837501367_1518837501845"</span></span><br></pre></td></tr></table></figure></p>
<p>“_” <strong>左边的参数几乎等于浏览器调用 js 的本地时间戳</strong> (new Date().getTime())，所以获取 cookie 就可以这样：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    timeStamp = str(int(time.time()*<span class="number">1000</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"atsp="</span> + timeStamp + <span class="string">"_"</span> + timeStamp</span><br></pre></td></tr></table></figure></p>
<p>cookie 中还有 Hm_lvt 和 Hm_lpvt，同样可以分析出来，这个是跟百度有关的，具体有什么作用就没有去研究了，可能跟访问量有关？反正不用理会。</p>
<p>那么爬取就变得易如反掌了～</p>
<h1 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h1><p>这里不用 session 也可以，完全没有用上 session 的功能嘛~~~<br>代码写的很糙，有时间重构了再贴上新的代码。代码可以参考前中的链接<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    get 请求，返回 response</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    headers[<span class="string">"Cookie"</span>] = get_cookie()</span><br><span class="line">    session = requests.session()</span><br><span class="line">    response = session.get(url, headers=headers)</span><br><span class="line">    response.raise_for_status()</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    timeStamp = int(time.time()*<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"atsp="</span> + str(timeStamp) + <span class="string">"_"</span> + str(timeStamp)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_url_to_html</span><span class="params">(url, break_point)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取 url 的内容，并解析写入到文件中</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    <span class="keyword">if</span> count &lt;= break_point:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    response = get(url)</span><br><span class="line">    soup = BeautifulSoup(response.content, <span class="string">"html5lib"</span>)</span><br><span class="line">    content = soup.find_all(class_=<span class="string">"x-content"</span>)[<span class="number">0</span>]</span><br><span class="line">    html = str(content.find_next(<span class="string">"h4"</span>)).replace(<span class="string">"h4"</span>, <span class="string">"h1"</span>) + str(content.find_all(class_=<span class="string">"x-wiki-content"</span>)[<span class="number">0</span>])</span><br><span class="line">    html = html_template.format(content=html)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"html/&#123;&#125;&#123;&#125;.html"</span>.format(str(<span class="string">"%02d"</span> % count), prety_file_name(<span class="string">"_"</span> + content.find_next(<span class="string">"h4"</span>).getText())), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(html.encode())</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count%<span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">            time.sleep(<span class="number">4</span>)</span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_pdf</span><span class="params">(htmls)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    把所有html文件转换成pdf文件</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        <span class="string">'page-size'</span>: <span class="string">'Letter'</span>,</span><br><span class="line">        <span class="string">'margin-top'</span>: <span class="string">'0.75in'</span>,</span><br><span class="line">        <span class="string">'margin-right'</span>: <span class="string">'0.75in'</span>,</span><br><span class="line">        <span class="string">'margin-bottom'</span>: <span class="string">'0.75in'</span>,</span><br><span class="line">        <span class="string">'margin-left'</span>: <span class="string">'0.75in'</span>,</span><br><span class="line">        <span class="string">'encoding'</span>: <span class="string">"UTF-8"</span>,</span><br><span class="line">        <span class="string">'custom-header'</span> : [</span><br><span class="line">            (<span class="string">'Accept-Encoding'</span>, <span class="string">'gzip'</span>)</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'cookie'</span> : [</span><br><span class="line">            (<span class="string">'cookie-name1'</span>, <span class="string">'cookie-value1'</span>),</span><br><span class="line">            (<span class="string">'cookie-name2'</span>, <span class="string">'cookie-value2'</span>),</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'no-outline'</span>: <span class="literal">None</span></span><br><span class="line">    &#125;</span><br><span class="line">    file_name = <span class="string">"pdf/test.pdf"</span></span><br><span class="line">    pdfkit.from_file(htmls, file_name, options=options)</span><br></pre></td></tr></table></figure></p>
<p>最后，新春愉快 <i class="fa fa-heart fa-lg"/><i class="fa fa-heart fa-lg"/><i class="fa fa-heart fa-lg"/></p>
<div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#ff0000">.</font><font color="#ff0800">.</font><font color="#ff1000">.</font><font color="#ff1800">.</font><font color="#ff2000">.</font><font color="#ff2800">.</font><font color="#ff3000">.</font><font color="#ff3800">.</font><font color="#ff4000">.</font><font color="#ff4700">.</font><font color="#ff4f00">.</font><font color="#ff5700">.</font><font color="#ff5f00">.</font><font color="#ff6700">.</font><font color="#ff6f00">.</font><font color="#ff7700">.</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">.</font><font color="#ffbb00">.</font><font color="#ffc300">.</font><font color="#ffcc00">.</font><font color="#ffd400">.</font><font color="#ffdd00">.</font><font color="#ffe500">.</font><font color="#ffee00">.</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">.</font><font color="#dfff00">.</font><font color="#cfff00">.</font><font color="#bfff00">.</font><font color="#afff00">.</font><font color="#9fff00">.</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">.</font><font color="#00ff33">.</font><font color="#00ff44">.</font><font color="#00ff55">.</font><font color="#00ff66">.</font><font color="#00ff77">.</font><font color="#00ff88">.</font><font color="#00ff99">.</font><font color="#00ffaa">.</font><font color="#00ffbb">.</font><font color="#00ffcc">.</font><font color="#00ffdd">.</font><font color="#00ffee">.</font><font color="#00ffff">.</font><font color="#00efff">.</font><font color="#00dfff">.</font><font color="#00cfff">.</font><font color="#00bfff">.</font><font color="#00afff">.</font><font color="#009fff">.</font><font color="#008fff">.</font><font color="#0080ff">.</font><font color="#0070ff">.</font><font color="#0060ff">.</font><font color="#0050ff">.</font><font color="#0040ff">.</font><font color="#0030ff">.</font><font color="#0020ff">.</font><font color="#0010ff">.</font><font color="#0000ff">.</font><font color="#0900ff">.</font><font color="#1300ff">.</font><font color="#1c00ff">.</font><font color="#2500ff">.</font><font color="#2e00ff">.</font><font color="#3800ff">.</font><font color="#4100ff">.</font><font color="#4a00ff">.</font><font color="#5300ff">.</font><font color="#5d00ff">.</font><font color="#6600ff">.</font><font color="#6f00ff">.</font><font color="#7800ff">.</font><font color="#8200ff">.</font><font color="#8b00ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#f70011">.</font><font color="#ff0000">.</font><font color="#ff0800">.</font><font color="#ff1000">.</font><font color="#ff1800">.</font><font color="#ff2000">.</font><font color="#ff2800">,</font><font color="#ff3000">a</font><font color="#ff3800">d</font><font color="#ff4000">8</font><font color="#ff4700">8</font><font color="#ff4f00">8</font><font color="#ff5700">8</font><font color="#ff5f00">b</font><font color="#ff6700">a</font><font color="#ff6f00">,</font><font color="#ff7700">.</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">.</font><font color="#ffbb00">.</font><font color="#ffc300">.</font><font color="#ffcc00">.</font><font color="#ffd400">.</font><font color="#ffdd00">.</font><font color="#ffe500">.</font><font color="#ffee00">.</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">.</font><font color="#dfff00">.</font><font color="#cfff00">.</font><font color="#bfff00">.</font><font color="#afff00">.</font><font color="#9fff00">.</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">.</font><font color="#00ff33">8</font><font color="#00ff44">8</font><font color="#00ff55">8</font><font color="#00ff66">b</font><font color="#00ff77">.</font><font color="#00ff88">.</font><font color="#00ff99">.</font><font color="#00ffaa">.</font><font color="#00ffbb">.</font><font color="#00ffcc">.</font><font color="#00ffdd">8</font><font color="#00ffee">8</font><font color="#00ffff">.</font><font color="#00efff">.</font><font color="#00dfff">8</font><font color="#00cfff">8</font><font color="#00bfff">.</font><font color="#00afff">.</font><font color="#009fff">.</font><font color="#008fff">.</font><font color="#0080ff">.</font><font color="#0070ff">.</font><font color="#0060ff">.</font><font color="#0050ff">.</font><font color="#0040ff">.</font><font color="#0030ff">.</font><font color="#0020ff">.</font><font color="#0010ff">.</font><font color="#0000ff">.</font><font color="#0900ff">.</font><font color="#1300ff">.</font><font color="#1c00ff">.</font><font color="#2500ff">.</font><font color="#2e00ff">.</font><font color="#3800ff">.</font><font color="#4100ff">.</font><font color="#4a00ff">.</font><font color="#5300ff">.</font><font color="#5d00ff">.</font><font color="#6600ff">.</font><font color="#6f00ff">.</font><font color="#7800ff">.</font><font color="#8200ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#f00022">.</font><font color="#f70011">.</font><font color="#ff0000">.</font><font color="#ff0800">.</font><font color="#ff1000">.</font><font color="#ff1800">d</font><font color="#ff2000">8</font><font color="#ff2800">“</font><font color="#ff3000">‘</font><font color="#ff3800">.</font><font color="#ff4000">.</font><font color="#ff4700">.</font><font color="#ff4f00">.</font><font color="#ff5700">.</font><font color="#ff5f00">“</font><font color="#ff6700">8</font><font color="#ff6f00">b</font><font color="#ff7700">.</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">.</font><font color="#ffbb00">.</font><font color="#ffc300">.</font><font color="#ffcc00">.</font><font color="#ffd400">.</font><font color="#ffdd00">.</font><font color="#ffe500">.</font><font color="#ffee00">.</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">.</font><font color="#dfff00">.</font><font color="#cfff00">.</font><font color="#bfff00">.</font><font color="#afff00">.</font><font color="#9fff00">.</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">8</font><font color="#00ff33">8</font><font color="#00ff44">8</font><font color="#00ff55">8</font><font color="#00ff66">b</font><font color="#00ff77">.</font><font color="#00ff88">.</font><font color="#00ff99">.</font><font color="#00ffaa">.</font><font color="#00ffbb">.</font><font color="#00ffcc">8</font><font color="#00ffdd">8</font><font color="#00ffee">.</font><font color="#00ffff">.</font><font color="#00efff">“</font><font color="#00dfff">“</font><font color="#00cfff">.</font><font color="#00bfff">.</font><font color="#00afff">.</font><font color="#009fff">.</font><font color="#008fff">.</font><font color="#0080ff">.</font><font color="#0070ff">.</font><font color="#0060ff">.</font><font color="#0050ff">.</font><font color="#0040ff">.</font><font color="#0030ff">.</font><font color="#0020ff">.</font><font color="#0010ff">.</font><font color="#0000ff">.</font><font color="#0900ff">.</font><font color="#1300ff">.</font><font color="#1c00ff">.</font><font color="#2500ff">.</font><font color="#2e00ff">.</font><font color="#3800ff">.</font><font color="#4100ff">.</font><font color="#4a00ff">.</font><font color="#5300ff">.</font><font color="#5d00ff">.</font><font color="#6600ff">.</font><font color="#6f00ff">.</font><font color="#7800ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#e80033">.</font><font color="#f00022">.</font><font color="#f70011">.</font><font color="#ff0000">.</font><font color="#ff0800">d</font><font color="#ff1000">8</font><font color="#ff1800">‘</font><font color="#ff2000">.</font><font color="#ff2800">.</font><font color="#ff3000">.</font><font color="#ff3800">.</font><font color="#ff4000">.</font><font color="#ff4700">.</font><font color="#ff4f00">.</font><font color="#ff5700">.</font><font color="#ff5f00">.</font><font color="#ff6700">.</font><font color="#ff6f00">.</font><font color="#ff7700">.</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">.</font><font color="#ffbb00">.</font><font color="#ffc300">.</font><font color="#ffcc00">.</font><font color="#ffd400">.</font><font color="#ffdd00">.</font><font color="#ffe500">.</font><font color="#ffee00">.</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">.</font><font color="#dfff00">.</font><font color="#cfff00">.</font><font color="#bfff00">.</font><font color="#afff00">.</font><font color="#9fff00">.</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">8</font><font color="#00ff22">8</font><font color="#00ff33">.</font><font color="#00ff44">.</font><font color="#00ff55">8</font><font color="#00ff66">b</font><font color="#00ff77">.</font><font color="#00ff88">.</font><font color="#00ff99">.</font><font color="#00ffaa">.</font><font color="#00ffbb">8</font><font color="#00ffcc">8</font><font color="#00ffdd">.</font><font color="#00ffee">.</font><font color="#00ffff">.</font><font color="#00efff">.</font><font color="#00dfff">.</font><font color="#00cfff">.</font><font color="#00bfff">.</font><font color="#00afff">.</font><font color="#009fff">.</font><font color="#008fff">.</font><font color="#0080ff">.</font><font color="#0070ff">.</font><font color="#0060ff">.</font><font color="#0050ff">.</font><font color="#0040ff">.</font><font color="#0030ff">.</font><font color="#0020ff">.</font><font color="#0010ff">.</font><font color="#0000ff">.</font><font color="#0900ff">.</font><font color="#1300ff">.</font><font color="#1c00ff">.</font><font color="#2500ff">.</font><font color="#2e00ff">.</font><font color="#3800ff">.</font><font color="#4100ff">.</font><font color="#4a00ff">.</font><font color="#5300ff">.</font><font color="#5d00ff">.</font><font color="#6600ff">.</font><font color="#6f00ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#e00044">.</font><font color="#e80033">.</font><font color="#f00022">.</font><font color="#f70011">.</font><font color="#ff0000">8</font><font color="#ff0800">8</font><font color="#ff1000">.</font><font color="#ff1800">.</font><font color="#ff2000">.</font><font color="#ff2800">.</font><font color="#ff3000">.</font><font color="#ff3800">.</font><font color="#ff4000">.</font><font color="#ff4700">.</font><font color="#ff4f00">.</font><font color="#ff5700">.</font><font color="#ff5f00">.</font><font color="#ff6700">.</font><font color="#ff6f00">.</font><font color="#ff7700">.</font><font color="#ff7f00">,</font><font color="#ff8800">a</font><font color="#ff9000">d</font><font color="#ff9900">P</font><font color="#ffa100">P</font><font color="#ffaa00">Y</font><font color="#ffb200">b</font><font color="#ffbb00">a</font><font color="#ffc300">,</font><font color="#ffcc00">.</font><font color="#ffd400">.</font><font color="#ffdd00">.</font><font color="#ffe500">8</font><font color="#ffee00">8</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">.</font><font color="#dfff00">.</font><font color="#cfff00">.</font><font color="#bfff00">.</font><font color="#afff00">.</font><font color="#9fff00">8</font><font color="#8fff00">8</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">8</font><font color="#00ff11">8</font><font color="#00ff22">.</font><font color="#00ff33">.</font><font color="#00ff44">.</font><font color="#00ff55">8</font><font color="#00ff66">b</font><font color="#00ff77">.</font><font color="#00ff88">.</font><font color="#00ff99">.</font><font color="#00ffaa">8</font><font color="#00ffbb">8</font><font color="#00ffcc">.</font><font color="#00ffdd">.</font><font color="#00ffee">8</font><font color="#00ffff">8</font><font color="#00efff">.</font><font color="#00dfff">.</font><font color="#00cfff">,</font><font color="#00bfff">a</font><font color="#00afff">d</font><font color="#009fff">P</font><font color="#008fff">P</font><font color="#0080ff">Y</font><font color="#0070ff">Y</font><font color="#0060ff">b</font><font color="#0050ff">a</font><font color="#0040ff">,</font><font color="#0030ff">.</font><font color="#0020ff">.</font><font color="#0010ff">8</font><font color="#0000ff">b</font><font color="#0900ff">,</font><font color="#1300ff">d</font><font color="#1c00ff">P</font><font color="#2500ff">P</font><font color="#2e00ff">Y</font><font color="#3800ff">b</font><font color="#4100ff">a</font><font color="#4a00ff">,</font><font color="#5300ff">.</font><font color="#5d00ff">.</font><font color="#6600ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#d80055">.</font><font color="#e00044">.</font><font color="#e80033">.</font><font color="#f00022">.</font><font color="#f70011">8</font><font color="#ff0000">8</font><font color="#ff0800">.</font><font color="#ff1000">.</font><font color="#ff1800">.</font><font color="#ff2000">.</font><font color="#ff2800">.</font><font color="#ff3000">.</font><font color="#ff3800">8</font><font color="#ff4000">8</font><font color="#ff4700">8</font><font color="#ff4f00">8</font><font color="#ff5700">8</font><font color="#ff5f00">.</font><font color="#ff6700">.</font><font color="#ff6f00">a</font><font color="#ff7700">8</font><font color="#ff7f00">“</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">“</font><font color="#ffbb00">8</font><font color="#ffc300">a</font><font color="#ffcc00">.</font><font color="#ffd400">.</font><font color="#ffdd00">8</font><font color="#ffe500">8</font><font color="#ffee00">.</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">.</font><font color="#dfff00">.</font><font color="#cfff00">.</font><font color="#bfff00">.</font><font color="#afff00">8</font><font color="#9fff00">8</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">8</font><font color="#00ff00">8</font><font color="#00ff11">.</font><font color="#00ff22">.</font><font color="#00ff33">.</font><font color="#00ff44">.</font><font color="#00ff55">8</font><font color="#00ff66">b</font><font color="#00ff77">.</font><font color="#00ff88">.</font><font color="#00ff99">8</font><font color="#00ffaa">8</font><font color="#00ffbb">.</font><font color="#00ffcc">.</font><font color="#00ffdd">8</font><font color="#00ffee">8</font><font color="#00ffff">.</font><font color="#00efff">.</font><font color="#00dfff">“</font><font color="#00cfff">“</font><font color="#00bfff">.</font><font color="#00afff">.</font><font color="#009fff">.</font><font color="#008fff">.</font><font color="#0080ff">.</font><font color="#0070ff">.</font><font color="#0060ff">Y</font><font color="#0050ff">8</font><font color="#0040ff">.</font><font color="#0030ff">.</font><font color="#0020ff">8</font><font color="#0010ff">8</font><font color="#0000ff">P</font><font color="#0900ff">‘</font><font color="#1300ff">.</font><font color="#1c00ff">.</font><font color="#2500ff">.</font><font color="#2e00ff">.</font><font color="#3800ff">“</font><font color="#4100ff">8</font><font color="#4a00ff">a</font><font color="#5300ff">.</font><font color="#5d00ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#d10066">.</font><font color="#d80055">.</font><font color="#e00044">.</font><font color="#e80033">.</font><font color="#f00022">Y</font><font color="#f70011">8</font><font color="#ff0000">,</font><font color="#ff0800">.</font><font color="#ff1000">.</font><font color="#ff1800">.</font><font color="#ff2000">.</font><font color="#ff2800">.</font><font color="#ff3000">.</font><font color="#ff3800">.</font><font color="#ff4000">.</font><font color="#ff4700">8</font><font color="#ff4f00">8</font><font color="#ff5700">.</font><font color="#ff5f00">.</font><font color="#ff6700">8</font><font color="#ff6f00">b</font><font color="#ff7700">.</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">d</font><font color="#ffbb00">8</font><font color="#ffc300">.</font><font color="#ffcc00">.</font><font color="#ffd400">8</font><font color="#ffdd00">8</font><font color="#ffe500">.</font><font color="#ffee00">.</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">.</font><font color="#dfff00">.</font><font color="#cfff00">.</font><font color="#bfff00">8</font><font color="#afff00">8</font><font color="#9fff00">.</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">8</font><font color="#10ff00">8</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">.</font><font color="#00ff33">.</font><font color="#00ff44">.</font><font color="#00ff55">8</font><font color="#00ff66">b</font><font color="#00ff77">.</font><font color="#00ff88">8</font><font color="#00ff99">8</font><font color="#00ffaa">.</font><font color="#00ffbb">.</font><font color="#00ffcc">8</font><font color="#00ffdd">8</font><font color="#00ffee">.</font><font color="#00ffff">.</font><font color="#00efff">,</font><font color="#00dfff">a</font><font color="#00cfff">d</font><font color="#00bfff">P</font><font color="#00afff">P</font><font color="#009fff">P</font><font color="#008fff">P</font><font color="#0080ff">P</font><font color="#0070ff">8</font><font color="#0060ff">8</font><font color="#0050ff">.</font><font color="#0040ff">.</font><font color="#0030ff">8</font><font color="#0020ff">8</font><font color="#0010ff">.</font><font color="#0000ff">.</font><font color="#0900ff">.</font><font color="#1300ff">.</font><font color="#1c00ff">.</font><font color="#2500ff">.</font><font color="#2e00ff">.</font><font color="#3800ff">8</font><font color="#4100ff">8</font><font color="#4a00ff">.</font><font color="#5300ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#c90077">.</font><font color="#d10066">.</font><font color="#d80055">.</font><font color="#e00044">.</font><font color="#e80033">.</font><font color="#f00022">Y</font><font color="#f70011">8</font><font color="#ff0000">a</font><font color="#ff0800">.</font><font color="#ff1000">.</font><font color="#ff1800">.</font><font color="#ff2000">.</font><font color="#ff2800">.</font><font color="#ff3000">.</font><font color="#ff3800">a</font><font color="#ff4000">8</font><font color="#ff4700">8</font><font color="#ff4f00">.</font><font color="#ff5700">.</font><font color="#ff5f00">“</font><font color="#ff6700">8</font><font color="#ff6f00">a</font><font color="#ff7700">,</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">,</font><font color="#ffa100">a</font><font color="#ffaa00">8</font><font color="#ffb200">“</font><font color="#ffbb00">.</font><font color="#ffc300">.</font><font color="#ffcc00">“</font><font color="#ffd400">8</font><font color="#ffdd00">a</font><font color="#ffe500">,</font><font color="#ffee00">.</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">,</font><font color="#dfff00">a</font><font color="#cfff00">8</font><font color="#bfff00">8</font><font color="#afff00">.</font><font color="#9fff00">.</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">8</font><font color="#20ff00">8</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">.</font><font color="#00ff33">.</font><font color="#00ff44">.</font><font color="#00ff55">8</font><font color="#00ff66">8</font><font color="#00ff77">8</font><font color="#00ff88">8</font><font color="#00ff99">.</font><font color="#00ffaa">.</font><font color="#00ffbb">8</font><font color="#00ffcc">8</font><font color="#00ffdd">.</font><font color="#00ffee">.</font><font color="#00ffff">8</font><font color="#00efff">8</font><font color="#00dfff">,</font><font color="#00cfff">.</font><font color="#00bfff">.</font><font color="#00afff">.</font><font color="#009fff">.</font><font color="#008fff">,</font><font color="#0080ff">8</font><font color="#0070ff">8</font><font color="#0060ff">.</font><font color="#0050ff">.</font><font color="#0040ff">8</font><font color="#0030ff">8</font><font color="#0020ff">.</font><font color="#0010ff">.</font><font color="#0000ff">.</font><font color="#0900ff">.</font><font color="#1300ff">.</font><font color="#1c00ff">.</font><font color="#2500ff">.</font><font color="#2e00ff">8</font><font color="#3800ff">8</font><font color="#4100ff">.</font><font color="#4a00ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#c10088">.</font><font color="#c90077">.</font><font color="#d10066">.</font><font color="#d80055">.</font><font color="#e00044">.</font><font color="#e80033">.</font><font color="#f00022">.</font><font color="#f70011">“</font><font color="#ff0000">Y</font><font color="#ff0800">8</font><font color="#ff1000">8</font><font color="#ff1800">8</font><font color="#ff2000">8</font><font color="#ff2800">8</font><font color="#ff3000">P</font><font color="#ff3800">“</font><font color="#ff4000">.</font><font color="#ff4700">.</font><font color="#ff4f00">.</font><font color="#ff5700">.</font><font color="#ff5f00">.</font><font color="#ff6700">“</font><font color="#ff6f00">Y</font><font color="#ff7700">b</font><font color="#ff7f00">b</font><font color="#ff8800">d</font><font color="#ff9000">P</font><font color="#ff9900">“</font><font color="#ffa100">‘</font><font color="#ffaa00">.</font><font color="#ffb200">.</font><font color="#ffbb00">.</font><font color="#ffc300">.</font><font color="#ffcc00">.</font><font color="#ffd400">“</font><font color="#ffdd00">Y</font><font color="#ffe500">b</font><font color="#ffee00">b</font><font color="#fff600">d</font><font color="#ffff00">P</font><font color="#efff00">‘</font><font color="#dfff00">Y</font><font color="#cfff00">8</font><font color="#bfff00">.</font><font color="#afff00">.</font><font color="#9fff00">.</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">8</font><font color="#30ff00">8</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">.</font><font color="#00ff33">.</font><font color="#00ff44">.</font><font color="#00ff55">8</font><font color="#00ff66">8</font><font color="#00ff77">8</font><font color="#00ff88">.</font><font color="#00ff99">.</font><font color="#00ffaa">8</font><font color="#00ffbb">8</font><font color="#00ffcc">.</font><font color="#00ffdd">.</font><font color="#00ffee">.</font><font color="#00ffff">“</font><font color="#00efff">8</font><font color="#00dfff">b</font><font color="#00cfff">b</font><font color="#00bfff">d</font><font color="#00afff">P</font><font color="#009fff">“</font><font color="#008fff">Y</font><font color="#0080ff">8</font><font color="#0070ff">.</font><font color="#0060ff">.</font><font color="#0050ff">8</font><font color="#0040ff">8</font><font color="#0030ff">.</font><font color="#0020ff">.</font><font color="#0010ff">.</font><font color="#0000ff">.</font><font color="#0900ff">.</font><font color="#1300ff">.</font><font color="#1c00ff">.</font><font color="#2500ff">8</font><font color="#2e00ff">8</font><font color="#3800ff">.</font><font color="#4100ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#b90099">.</font><font color="#c10088">.</font><font color="#c90077">.</font><font color="#d10066">.</font><font color="#d80055">.</font><font color="#e00044">.</font><font color="#e80033">.</font><font color="#f00022">.</font><font color="#f70011">.</font><font color="#ff0000">.</font><font color="#ff0800">.</font><font color="#ff1000">.</font><font color="#ff1800">.</font><font color="#ff2000">.</font><font color="#ff2800">.</font><font color="#ff3000">.</font><font color="#ff3800">.</font><font color="#ff4000">.</font><font color="#ff4700">.</font><font color="#ff4f00">.</font><font color="#ff5700">.</font><font color="#ff5f00">.</font><font color="#ff6700">.</font><font color="#ff6f00">.</font><font color="#ff7700">.</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">.</font><font color="#ffbb00">.</font><font color="#ffc300">.</font><font color="#ffcc00">.</font><font color="#ffd400">.</font><font color="#ffdd00">.</font><font color="#ffe500">.</font><font color="#ffee00">.</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">.</font><font color="#dfff00">.</font><font color="#cfff00">.</font><font color="#bfff00">.</font><font color="#afff00">.</font><font color="#9fff00">.</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">.</font><font color="#00ff33">.</font><font color="#00ff44">.</font><font color="#00ff55">.</font><font color="#00ff66">.</font><font color="#00ff77">.</font><font color="#00ff88">.</font><font color="#00ff99">.</font><font color="#00ffaa">.</font><font color="#00ffbb">.</font><font color="#00ffcc">.</font><font color="#00ffdd">.</font><font color="#00ffee">.</font><font color="#00ffff">.</font><font color="#00efff">.</font><font color="#00dfff">.</font><font color="#00cfff">.</font><font color="#00bfff">.</font><font color="#00afff">.</font><font color="#009fff">.</font><font color="#008fff">.</font><font color="#0080ff">.</font><font color="#0070ff">.</font><font color="#0060ff">.</font><font color="#0050ff">.</font><font color="#0040ff">.</font><font color="#0030ff">.</font><font color="#0020ff">.</font><font color="#0010ff">.</font><font color="#0000ff">.</font><font color="#0900ff">.</font><font color="#1300ff">.</font><font color="#1c00ff">.</font><font color="#2500ff">.</font><font color="#2e00ff">.</font><font color="#3800ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#b200aa">.</font><font color="#b90099">.</font><font color="#c10088">.</font><font color="#c90077">.</font><font color="#d10066">.</font><font color="#d80055">.</font><font color="#e00044">.</font><font color="#e80033">.</font><font color="#f00022">.</font><font color="#f70011">.</font><font color="#ff0000">.</font><font color="#ff0800">.</font><font color="#ff1000">.</font><font color="#ff1800">.</font><font color="#ff2000">.</font><font color="#ff2800">.</font><font color="#ff3000">.</font><font color="#ff3800">.</font><font color="#ff4000">.</font><font color="#ff4700">.</font><font color="#ff4f00">.</font><font color="#ff5700">.</font><font color="#ff5f00">.</font><font color="#ff6700">.</font><font color="#ff6f00">.</font><font color="#ff7700">.</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">.</font><font color="#ffbb00">.</font><font color="#ffc300">.</font><font color="#ffcc00">.</font><font color="#ffd400">.</font><font color="#ffdd00">.</font><font color="#ffe500">.</font><font color="#ffee00">.</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">.</font><font color="#dfff00">.</font><font color="#cfff00">.</font><font color="#bfff00">.</font><font color="#afff00">.</font><font color="#9fff00">.</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">.</font><font color="#00ff33">.</font><font color="#00ff44">.</font><font color="#00ff55">.</font><font color="#00ff66">.</font><font color="#00ff77">.</font><font color="#00ff88">.</font><font color="#00ff99">.</font><font color="#00ffaa">.</font><font color="#00ffbb">.</font><font color="#00ffcc">.</font><font color="#00ffdd">.</font><font color="#00ffee">.</font><font color="#00ffff">.</font><font color="#00efff">.</font><font color="#00dfff">.</font><font color="#00cfff">.</font><font color="#00bfff">.</font><font color="#00afff">.</font><font color="#009fff">.</font><font color="#008fff">.</font><font color="#0080ff">.</font><font color="#0070ff">.</font><font color="#0060ff">.</font><font color="#0050ff">.</font><font color="#0040ff">.</font><font color="#0030ff">.</font><font color="#0020ff">.</font><font color="#0010ff">.</font><font color="#0000ff">.</font><font color="#0900ff">.</font><font color="#1300ff">.</font><font color="#1c00ff">.</font><font color="#2500ff">.</font><font color="#2e00ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#aa00bb">.</font><font color="#b200aa">.</font><font color="#b90099">.</font><font color="#c10088">.</font><font color="#c90077">.</font><font color="#d10066">.</font><font color="#d80055">.</font><font color="#e00044">.</font><font color="#e80033">.</font><font color="#f00022">.</font><font color="#f70011">.</font><font color="#ff0000">.</font><font color="#ff0800">.</font><font color="#ff1000">.</font><font color="#ff1800">.</font><font color="#ff2000">.</font><font color="#ff2800">.</font><font color="#ff3000">.</font><font color="#ff3800">.</font><font color="#ff4000">.</font><font color="#ff4700">.</font><font color="#ff4f00">.</font><font color="#ff5700">.</font><font color="#ff5f00">.</font><font color="#ff6700">.</font><font color="#ff6f00">.</font><font color="#ff7700">.</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">.</font><font color="#ffbb00">.</font><font color="#ffc300">.</font><font color="#ffcc00">.</font><font color="#ffd400">.</font><font color="#ffdd00">.</font><font color="#ffe500">.</font><font color="#ffee00">.</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">.</font><font color="#dfff00">.</font><font color="#cfff00">.</font><font color="#bfff00">.</font><font color="#afff00">.</font><font color="#9fff00">.</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">.</font><font color="#00ff33">.</font><font color="#00ff44">.</font><font color="#00ff55">.</font><font color="#00ff66">.</font><font color="#00ff77">.</font><font color="#00ff88">.</font><font color="#00ff99">.</font><font color="#00ffaa">.</font><font color="#00ffbb">.</font><font color="#00ffcc">.</font><font color="#00ffdd">.</font><font color="#00ffee">.</font><font color="#00ffff">.</font><font color="#00efff">.</font><font color="#00dfff">.</font><font color="#00cfff">.</font><font color="#00bfff">.</font><font color="#00afff">.</font><font color="#009fff">.</font><font color="#008fff">.</font><font color="#0080ff">.</font><font color="#0070ff">.</font><font color="#0060ff">.</font><font color="#0050ff">.</font><font color="#0040ff">.</font><font color="#0030ff">.</font><font color="#0020ff">.</font><font color="#0010ff">.</font><font color="#0000ff">.</font><font color="#0900ff">.</font><font color="#1300ff">.</font><font color="#1c00ff">.</font><font color="#2500ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#a200cc">.</font><font color="#aa00bb">.</font><font color="#b200aa">.</font><font color="#b90099">.</font><font color="#c10088">8</font><font color="#c90077">8</font><font color="#d10066">8</font><font color="#d80055">8</font><font color="#e00044">8</font><font color="#e80033">8</font><font color="#f00022">8</font><font color="#f70011">8</font><font color="#ff0000">b</font><font color="#ff0800">a</font><font color="#ff1000">,</font><font color="#ff1800">.</font><font color="#ff2000">.</font><font color="#ff2800">.</font><font color="#ff3000">.</font><font color="#ff3800">.</font><font color="#ff4000">.</font><font color="#ff4700">.</font><font color="#ff4f00">.</font><font color="#ff5700">.</font><font color="#ff5f00">.</font><font color="#ff6700">.</font><font color="#ff6f00">.</font><font color="#ff7700">.</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">.</font><font color="#ffbb00">.</font><font color="#ffc300">.</font><font color="#ffcc00">.</font><font color="#ffd400">.</font><font color="#ffdd00">.</font><font color="#ffe500">.</font><font color="#ffee00">.</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">.</font><font color="#dfff00">.</font><font color="#cfff00">.</font><font color="#bfff00">.</font><font color="#afff00">8</font><font color="#9fff00">8</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">8</font><font color="#60ff00">8</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">.</font><font color="#00ff33">.</font><font color="#00ff44">.</font><font color="#00ff55">.</font><font color="#00ff66">.</font><font color="#00ff77">.</font><font color="#00ff88">.</font><font color="#00ff99">8</font><font color="#00ffaa">8</font><font color="#00ffbb">8</font><font color="#00ffcc">8</font><font color="#00ffdd">8</font><font color="#00ffee">8</font><font color="#00ffff">8</font><font color="#00efff">8</font><font color="#00dfff">b</font><font color="#00cfff">a</font><font color="#00bfff">.</font><font color="#00afff">.</font><font color="#009fff">.</font><font color="#008fff">.</font><font color="#0080ff">.</font><font color="#0070ff">.</font><font color="#0060ff">.</font><font color="#0050ff">.</font><font color="#0040ff">.</font><font color="#0030ff">.</font><font color="#0020ff">.</font><font color="#0010ff">.</font><font color="#0000ff">.</font><font color="#0900ff">.</font><font color="#1300ff">.</font><font color="#1c00ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#9a00dd">.</font><font color="#a200cc">.</font><font color="#aa00bb">.</font><font color="#b200aa">.</font><font color="#b90099">8</font><font color="#c10088">8</font><font color="#c90077">.</font><font color="#d10066">.</font><font color="#d80055">.</font><font color="#e00044">.</font><font color="#e80033">.</font><font color="#f00022">.</font><font color="#f70011">.</font><font color="#ff0000">“</font><font color="#ff0800">8</font><font color="#ff1000">b</font><font color="#ff1800">.</font><font color="#ff2000">.</font><font color="#ff2800">.</font><font color="#ff3000">.</font><font color="#ff3800">.</font><font color="#ff4000">.</font><font color="#ff4700">.</font><font color="#ff4f00">.</font><font color="#ff5700">.</font><font color="#ff5f00">.</font><font color="#ff6700">.</font><font color="#ff6f00">.</font><font color="#ff7700">.</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">.</font><font color="#ffbb00">.</font><font color="#ffc300">.</font><font color="#ffcc00">.</font><font color="#ffd400">.</font><font color="#ffdd00">.</font><font color="#ffe500">.</font><font color="#ffee00">.</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">.</font><font color="#dfff00">.</font><font color="#cfff00">.</font><font color="#bfff00">8</font><font color="#afff00">8</font><font color="#9fff00">.</font><font color="#8fff00">.</font><font color="#80ff00">“</font><font color="#70ff00">“</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">.</font><font color="#00ff33">.</font><font color="#00ff44">.</font><font color="#00ff55">.</font><font color="#00ff66">.</font><font color="#00ff77">.</font><font color="#00ff88">8</font><font color="#00ff99">8</font><font color="#00ffaa">.</font><font color="#00ffbb">.</font><font color="#00ffcc">.</font><font color="#00ffdd">.</font><font color="#00ffee">.</font><font color="#00ffff">.</font><font color="#00efff">“</font><font color="#00dfff">8</font><font color="#00cfff">b</font><font color="#00bfff">.</font><font color="#00afff">.</font><font color="#009fff">.</font><font color="#008fff">.</font><font color="#0080ff">.</font><font color="#0070ff">.</font><font color="#0060ff">.</font><font color="#0050ff">.</font><font color="#0040ff">.</font><font color="#0030ff">.</font><font color="#0020ff">.</font><font color="#0010ff">.</font><font color="#0000ff">.</font><font color="#0900ff">.</font><font color="#1300ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#9300ee">.</font><font color="#9a00dd">.</font><font color="#a200cc">.</font><font color="#aa00bb">.</font><font color="#b200aa">8</font><font color="#b90099">8</font><font color="#c10088">.</font><font color="#c90077">.</font><font color="#d10066">.</font><font color="#d80055">.</font><font color="#e00044">.</font><font color="#e80033">.</font><font color="#f00022">.</font><font color="#f70011">.</font><font color="#ff0000">.</font><font color="#ff0800">8</font><font color="#ff1000">b</font><font color="#ff1800">.</font><font color="#ff2000">.</font><font color="#ff2800">.</font><font color="#ff3000">.</font><font color="#ff3800">.</font><font color="#ff4000">.</font><font color="#ff4700">.</font><font color="#ff4f00">.</font><font color="#ff5700">.</font><font color="#ff5f00">.</font><font color="#ff6700">.</font><font color="#ff6f00">.</font><font color="#ff7700">.</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">.</font><font color="#ffbb00">.</font><font color="#ffc300">.</font><font color="#ffcc00">.</font><font color="#ffd400">.</font><font color="#ffdd00">.</font><font color="#ffe500">.</font><font color="#ffee00">.</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">.</font><font color="#dfff00">.</font><font color="#cfff00">8</font><font color="#bfff00">8</font><font color="#afff00">.</font><font color="#9fff00">.</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">.</font><font color="#00ff33">.</font><font color="#00ff44">.</font><font color="#00ff55">.</font><font color="#00ff66">.</font><font color="#00ff77">8</font><font color="#00ff88">8</font><font color="#00ff99">.</font><font color="#00ffaa">.</font><font color="#00ffbb">.</font><font color="#00ffcc">.</font><font color="#00ffdd">.</font><font color="#00ffee">.</font><font color="#00ffff">,</font><font color="#00efff">8</font><font color="#00dfff">P</font><font color="#00cfff">.</font><font color="#00bfff">.</font><font color="#00afff">.</font><font color="#009fff">.</font><font color="#008fff">.</font><font color="#0080ff">.</font><font color="#0070ff">.</font><font color="#0060ff">.</font><font color="#0050ff">.</font><font color="#0040ff">.</font><font color="#0030ff">.</font><font color="#0020ff">.</font><font color="#0010ff">.</font><font color="#0000ff">.</font><font color="#0900ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#8b00ff">.</font><font color="#9300ee">.</font><font color="#9a00dd">.</font><font color="#a200cc">.</font><font color="#aa00bb">8</font><font color="#b200aa">8</font><font color="#b90099">.</font><font color="#c10088">.</font><font color="#c90077">.</font><font color="#d10066">.</font><font color="#d80055">.</font><font color="#e00044">.</font><font color="#e80033">.</font><font color="#f00022">.</font><font color="#f70011">.</font><font color="#ff0000">8</font><font color="#ff0800">8</font><font color="#ff1000">.</font><font color="#ff1800">.</font><font color="#ff2000">,</font><font color="#ff2800">a</font><font color="#ff3000">d</font><font color="#ff3800">P</font><font color="#ff4000">P</font><font color="#ff4700">Y</font><font color="#ff4f00">Y</font><font color="#ff5700">b</font><font color="#ff5f00">a</font><font color="#ff6700">,</font><font color="#ff6f00">.</font><font color="#ff7700">.</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">.</font><font color="#ffbb00">.</font><font color="#ffc300">.</font><font color="#ffcc00">.</font><font color="#ffd400">.</font><font color="#ffdd00">.</font><font color="#ffe500">.</font><font color="#ffee00">.</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">.</font><font color="#dfff00">8</font><font color="#cfff00">8</font><font color="#bfff00">.</font><font color="#afff00">.</font><font color="#9fff00">8</font><font color="#8fff00">8</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">.</font><font color="#00ff33">.</font><font color="#00ff44">.</font><font color="#00ff55">.</font><font color="#00ff66">8</font><font color="#00ff77">8</font><font color="#00ff88">a</font><font color="#00ff99">a</font><font color="#00ffaa">a</font><font color="#00ffbb">a</font><font color="#00ffcc">a</font><font color="#00ffdd">a</font><font color="#00ffee">8</font><font color="#00ffff">P</font><font color="#00efff">‘</font><font color="#00dfff">.</font><font color="#00cfff">.</font><font color="#00bfff">,</font><font color="#00afff">a</font><font color="#009fff">d</font><font color="#008fff">P</font><font color="#0080ff">P</font><font color="#0070ff">Y</font><font color="#0060ff">Y</font><font color="#0050ff">b</font><font color="#0040ff">a</font><font color="#0030ff">,</font><font color="#0020ff">.</font><font color="#0010ff">.</font><font color="#0000ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#8200ff">.</font><font color="#8b00ff">.</font><font color="#9300ee">.</font><font color="#9a00dd">.</font><font color="#a200cc">8</font><font color="#aa00bb">8</font><font color="#b200aa">.</font><font color="#b90099">.</font><font color="#c10088">.</font><font color="#c90077">.</font><font color="#d10066">.</font><font color="#d80055">.</font><font color="#e00044">.</font><font color="#e80033">.</font><font color="#f00022">.</font><font color="#f70011">8</font><font color="#ff0000">8</font><font color="#ff0800">.</font><font color="#ff1000">.</font><font color="#ff1800">“</font><font color="#ff2000">“</font><font color="#ff2800">.</font><font color="#ff3000">.</font><font color="#ff3800">.</font><font color="#ff4000">.</font><font color="#ff4700">.</font><font color="#ff4f00">.</font><font color="#ff5700">Y</font><font color="#ff5f00">8</font><font color="#ff6700">.</font><font color="#ff6f00">.</font><font color="#ff7700">.</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">.</font><font color="#ffbb00">.</font><font color="#ffc300">.</font><font color="#ffcc00">.</font><font color="#ffd400">.</font><font color="#ffdd00">.</font><font color="#ffe500">.</font><font color="#ffee00">.</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">8</font><font color="#dfff00">8</font><font color="#cfff00">.</font><font color="#bfff00">.</font><font color="#afff00">8</font><font color="#9fff00">8</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">.</font><font color="#00ff33">.</font><font color="#00ff44">.</font><font color="#00ff55">8</font><font color="#00ff66">8</font><font color="#00ff77">“</font><font color="#00ff88">“</font><font color="#00ff99">“</font><font color="#00ffaa">“</font><font color="#00ffbb">“</font><font color="#00ffcc">“</font><font color="#00ffdd">8</font><font color="#00ffee">b</font><font color="#00ffff">,</font><font color="#00efff">.</font><font color="#00dfff">.</font><font color="#00cfff">“</font><font color="#00bfff">“</font><font color="#00afff">.</font><font color="#009fff">.</font><font color="#008fff">.</font><font color="#0080ff">.</font><font color="#0070ff">.</font><font color="#0060ff">.</font><font color="#0050ff">Y</font><font color="#0040ff">8</font><font color="#0030ff">.</font><font color="#0020ff">.</font><font color="#0010ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#7800ff">.</font><font color="#8200ff">.</font><font color="#8b00ff">.</font><font color="#9300ee">.</font><font color="#9a00dd">8</font><font color="#a200cc">8</font><font color="#aa00bb">.</font><font color="#b200aa">.</font><font color="#b90099">.</font><font color="#c10088">.</font><font color="#c90077">.</font><font color="#d10066">.</font><font color="#d80055">.</font><font color="#e00044">.</font><font color="#e80033">.</font><font color="#f00022">8</font><font color="#f70011">P</font><font color="#ff0000">.</font><font color="#ff0800">.</font><font color="#ff1000">,</font><font color="#ff1800">a</font><font color="#ff2000">d</font><font color="#ff2800">P</font><font color="#ff3000">P</font><font color="#ff3800">P</font><font color="#ff4000">P</font><font color="#ff4700">P</font><font color="#ff4f00">8</font><font color="#ff5700">8</font><font color="#ff5f00">.</font><font color="#ff6700">.</font><font color="#ff6f00">.</font><font color="#ff7700">.</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">.</font><font color="#ffbb00">.</font><font color="#ffc300">.</font><font color="#ffcc00">.</font><font color="#ffd400">.</font><font color="#ffdd00">.</font><font color="#ffe500">.</font><font color="#ffee00">.</font><font color="#fff600">.</font><font color="#ffff00">8</font><font color="#efff00">8</font><font color="#dfff00">.</font><font color="#cfff00">.</font><font color="#bfff00">8</font><font color="#afff00">8</font><font color="#9fff00">.</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">.</font><font color="#00ff33">.</font><font color="#00ff44">8</font><font color="#00ff55">8</font><font color="#00ff66">.</font><font color="#00ff77">.</font><font color="#00ff88">.</font><font color="#00ff99">.</font><font color="#00ffaa">.</font><font color="#00ffbb">.</font><font color="#00ffcc">.</font><font color="#00ffdd">8</font><font color="#00ffee">b</font><font color="#00ffff">.</font><font color="#00efff">.</font><font color="#00dfff">,</font><font color="#00cfff">a</font><font color="#00bfff">d</font><font color="#00afff">P</font><font color="#009fff">P</font><font color="#008fff">P</font><font color="#0080ff">P</font><font color="#0070ff">P</font><font color="#0060ff">8</font><font color="#0050ff">8</font><font color="#0040ff">.</font><font color="#0030ff">.</font><font color="#0020ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#6f00ff">.</font><font color="#7800ff">.</font><font color="#8200ff">.</font><font color="#8b00ff">.</font><font color="#9300ee">8</font><font color="#9a00dd">8</font><font color="#a200cc">.</font><font color="#aa00bb">.</font><font color="#b200aa">.</font><font color="#b90099">.</font><font color="#c10088">.</font><font color="#c90077">.</font><font color="#d10066">.</font><font color="#d80055">a</font><font color="#e00044">8</font><font color="#e80033">P</font><font color="#f00022">.</font><font color="#f70011">.</font><font color="#ff0000">.</font><font color="#ff0800">8</font><font color="#ff1000">8</font><font color="#ff1800">,</font><font color="#ff2000">.</font><font color="#ff2800">.</font><font color="#ff3000">.</font><font color="#ff3800">.</font><font color="#ff4000">,</font><font color="#ff4700">8</font><font color="#ff4f00">8</font><font color="#ff5700">.</font><font color="#ff5f00">.</font><font color="#ff6700">.</font><font color="#ff6f00">.</font><font color="#ff7700">.</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">8</font><font color="#ffbb00">8</font><font color="#ffc300">,</font><font color="#ffcc00">.</font><font color="#ffd400">.</font><font color="#ffdd00">.</font><font color="#ffe500">,</font><font color="#ffee00">d</font><font color="#fff600">8</font><font color="#ffff00">8</font><font color="#efff00">.</font><font color="#dfff00">.</font><font color="#cfff00">8</font><font color="#bfff00">8</font><font color="#afff00">.</font><font color="#9fff00">.</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">.</font><font color="#00ff33">8</font><font color="#00ff44">8</font><font color="#00ff55">.</font><font color="#00ff66">.</font><font color="#00ff77">.</font><font color="#00ff88">.</font><font color="#00ff99">.</font><font color="#00ffaa">.</font><font color="#00ffbb">a</font><font color="#00ffcc">8</font><font color="#00ffdd">P</font><font color="#00ffee">.</font><font color="#00ffff">.</font><font color="#00efff">8</font><font color="#00dfff">8</font><font color="#00cfff">,</font><font color="#00bfff">.</font><font color="#00afff">.</font><font color="#009fff">.</font><font color="#008fff">.</font><font color="#0080ff">,</font><font color="#0070ff">8</font><font color="#0060ff">8</font><font color="#0050ff">.</font><font color="#0040ff">.</font><font color="#0030ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#6600ff">.</font><font color="#6f00ff">.</font><font color="#7800ff">.</font><font color="#8200ff">.</font><font color="#8b00ff">8</font><font color="#9300ee">8</font><font color="#9a00dd">8</font><font color="#a200cc">8</font><font color="#aa00bb">8</font><font color="#b200aa">8</font><font color="#b90099">8</font><font color="#c10088">8</font><font color="#c90077">Y</font><font color="#d10066">“</font><font color="#d80055">‘</font><font color="#e00044">.</font><font color="#e80033">.</font><font color="#f00022">.</font><font color="#f70011">.</font><font color="#ff0000">.</font><font color="#ff0800">“</font><font color="#ff1000">8</font><font color="#ff1800">b</font><font color="#ff2000">b</font><font color="#ff2800">d</font><font color="#ff3000">P</font><font color="#ff3800">“</font><font color="#ff4000">Y</font><font color="#ff4700">8</font><font color="#ff4f00">.</font><font color="#ff5700">.</font><font color="#ff5f00">.</font><font color="#ff6700">.</font><font color="#ff6f00">.</font><font color="#ff7700">.</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">“</font><font color="#ffbb00">Y</font><font color="#ffc300">8</font><font color="#ffcc00">8</font><font color="#ffd400">8</font><font color="#ffdd00">8</font><font color="#ffe500">P</font><font color="#ffee00">“</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">.</font><font color="#dfff00">8</font><font color="#cfff00">8</font><font color="#bfff00">.</font><font color="#afff00">.</font><font color="#9fff00">.</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">8</font><font color="#00ff33">8</font><font color="#00ff44">8</font><font color="#00ff55">8</font><font color="#00ff66">8</font><font color="#00ff77">8</font><font color="#00ff88">8</font><font color="#00ff99">8</font><font color="#00ffaa">P</font><font color="#00ffbb">“</font><font color="#00ffcc">.</font><font color="#00ffdd">.</font><font color="#00ffee">.</font><font color="#00ffff">.</font><font color="#00efff">“</font><font color="#00dfff">8</font><font color="#00cfff">b</font><font color="#00bfff">b</font><font color="#00afff">d</font><font color="#009fff">P</font><font color="#008fff">“</font><font color="#0080ff">Y</font><font color="#0070ff">8</font><font color="#0060ff">.</font><font color="#0050ff">.</font><font color="#0040ff">.</font></div><div style="line-height:1;font-family:consolas, Menlo, 'PingFang SC', 'Microsoft YaHei', monospace"><font color="#5d00ff">.</font><font color="#6600ff">.</font><font color="#6f00ff">.</font><font color="#7800ff">.</font><font color="#8200ff">.</font><font color="#8b00ff">.</font><font color="#9300ee">.</font><font color="#9a00dd">.</font><font color="#a200cc">.</font><font color="#aa00bb">.</font><font color="#b200aa">.</font><font color="#b90099">.</font><font color="#c10088">.</font><font color="#c90077">.</font><font color="#d10066">.</font><font color="#d80055">.</font><font color="#e00044">.</font><font color="#e80033">.</font><font color="#f00022">.</font><font color="#f70011">.</font><font color="#ff0000">.</font><font color="#ff0800">.</font><font color="#ff1000">.</font><font color="#ff1800">.</font><font color="#ff2000">.</font><font color="#ff2800">.</font><font color="#ff3000">.</font><font color="#ff3800">.</font><font color="#ff4000">.</font><font color="#ff4700">.</font><font color="#ff4f00">.</font><font color="#ff5700">.</font><font color="#ff5f00">.</font><font color="#ff6700">.</font><font color="#ff6f00">.</font><font color="#ff7700">.</font><font color="#ff7f00">.</font><font color="#ff8800">.</font><font color="#ff9000">.</font><font color="#ff9900">.</font><font color="#ffa100">.</font><font color="#ffaa00">.</font><font color="#ffb200">.</font><font color="#ffbb00">.</font><font color="#ffc300">.</font><font color="#ffcc00">.</font><font color="#ffd400">.</font><font color="#ffdd00">.</font><font color="#ffe500">.</font><font color="#ffee00">.</font><font color="#fff600">.</font><font color="#ffff00">.</font><font color="#efff00">.</font><font color="#dfff00">.</font><font color="#cfff00">.</font><font color="#bfff00">.</font><font color="#afff00">.</font><font color="#9fff00">.</font><font color="#8fff00">.</font><font color="#80ff00">.</font><font color="#70ff00">.</font><font color="#60ff00">.</font><font color="#50ff00">.</font><font color="#40ff00">.</font><font color="#30ff00">.</font><font color="#20ff00">.</font><font color="#10ff00">.</font><font color="#00ff00">.</font><font color="#00ff11">.</font><font color="#00ff22">.</font><font color="#00ff33">.</font><font color="#00ff44">.</font><font color="#00ff55">.</font><font color="#00ff66">.</font><font color="#00ff77">.</font><font color="#00ff88">.</font><font color="#00ff99">.</font><font color="#00ffaa">.</font><font color="#00ffbb">.</font><font color="#00ffcc">.</font><font color="#00ffdd">.</font><font color="#00ffee">.</font><font color="#00ffff">.</font><font color="#00efff">.</font><font color="#00dfff">.</font><font color="#00cfff">.</font><font color="#00bfff">.</font><font color="#00afff">.</font><font color="#009fff">.</font><font color="#008fff">.</font><font color="#0080ff">.</font><font color="#0070ff">.</font><font color="#0060ff">.</font><font color="#0050ff">.</font></div>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>craw</tag>
        <tag>http</tag>
        <tag>cookie</tag>
      </tags>
  </entry>
</search>
